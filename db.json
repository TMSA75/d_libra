[{"model": "webapi.user", "pk": 7, "fields": {"fname": "", "lname": "", "email": "jawadsheikh224@gmail11.com", "username": "jawadsheikh2241955", "password": "pbkdf2_sha256$29000$JVfIIs0V1xAT$TRvwfjXaCbu49veoNmUl4Ch4wv6vnOesh8OFeynBrYE=", "role": "normaluser", "profile": "SuperAdmin/dummy.jpg"}}, {"model": "webapi.user", "pk": 8, "fields": {"fname": "shakeeb", "lname": "anwar", "email": "shakeeb@gmail.com", "username": "shakeeb2771", "password": "pbkdf2_sha256$29000$TC6GwN9X3Mws$Ej/PKJ3yYH090mq324L9C3t5Zn0a5cal/d9Z/60B8mU=", "role": "editor", "profile": "SuperAdmin/dummy.jpg"}}, {"model": "webapi.user", "pk": 9, "fields": {"fname": "", "lname": "", "email": "shakeeb1123@gmail.com", "username": "shakeeb1123", "password": "pbkdf2_sha256$29000$wDatM0nncDRz$cgaAJetUFkARJf84NzVK3yjwkK5J7w5JX3R6KldK4Tw=", "role": "normaluser", "profile": "SuperAdmin/dummy.jpg"}}, {"model": "webapi.user", "pk": 10, "fields": {"fname": "", "lname": "", "email": "shakeeb11234@gmail.com", "username": "shakeeb11234", "password": "pbkdf2_sha256$29000$HFUGjfHwo9WX$whDDCgcXLLU8N7sYPocC+0uxaebRvOs5YyQLhqUnTDk=", "role": "normaluser", "profile": "SuperAdmin/dummy.jpg"}}, {"model": "webapi.category", "pk": 1, "fields": {"name": "Git & GitHub Introduction", "image": "category_pic/Logo_GitGitHub.svg", "parent": null, "unique_identifier": 204110, "slug": "GitGitHubIntroduction", "created_at": "2022-03-22T09:25:27.148Z", "updated_at": "2022-03-27T11:46:02.640Z", "CategoryType": "Category", "lft": 1, "rght": 18, "tree_id": 1, "level": 0}}, {"model": "webapi.category", "pk": 2, "fields": {"name": "Git & GitHub Key Concepts", "image": "category_pic/Logo_GitGitHub_0E4Mwmv.svg", "parent": 1, "unique_identifier": 20411011, "slug": "GitGitHubKeyConcepts", "created_at": "2022-03-22T09:27:10.119Z", "updated_at": "2022-04-04T04:19:59.752Z", "CategoryType": "SubCategory", "lft": 2, "rght": 3, "tree_id": 1, "level": 1}}, {"model": "webapi.category", "pk": 3, "fields": {"name": "Git & GitHub Life Cycle", "image": "category_pic/Logo_GitGitHub_aZinTIE.svg", "parent": 1, "unique_identifier": 20411012, "slug": "GitGitHubLifeCycle", "created_at": "2022-03-22T09:30:33.733Z", "updated_at": "2022-04-04T04:20:12.172Z", "CategoryType": "SubCategory", "lft": 4, "rght": 5, "tree_id": 1, "level": 1}}, {"model": "webapi.category", "pk": 4, "fields": {"name": "Git & GitHub Initial Settings", "image": "category_pic/Logo_GitGitHub_bkG793K.svg", "parent": 1, "unique_identifier": 20411013, "slug": "GitGitHubInitialSettings", "created_at": "2022-03-22T09:31:03.098Z", "updated_at": "2022-04-04T04:20:18.517Z", "CategoryType": "SubCategory", "lft": 6, "rght": 7, "tree_id": 1, "level": 1}}, {"model": "webapi.category", "pk": 5, "fields": {"name": "Launch Git Project", "image": "category_pic/Logo_GitGitHub_EM1zViV.svg", "parent": 1, "unique_identifier": 20411014, "slug": "LaunchGitProject", "created_at": "2022-03-22T09:31:52.212Z", "updated_at": "2022-04-04T04:20:43.711Z", "CategoryType": "SubCategory", "lft": 8, "rght": 9, "tree_id": 1, "level": 1}}, {"model": "webapi.category", "pk": 6, "fields": {"name": "Edit & Commit", "image": "category_pic/Logo_GitGitHub_R9eON0I.svg", "parent": 1, "unique_identifier": 20411015, "slug": "EditCommit", "created_at": "2022-03-22T09:32:20.795Z", "updated_at": "2022-04-04T04:20:54.263Z", "CategoryType": "SubCategory", "lft": 10, "rght": 11, "tree_id": 1, "level": 1}}, {"model": "webapi.category", "pk": 7, "fields": {"name": "Work With Branches", "image": "category_pic/Logo_GitGitHub_Y6sA7xl.svg", "parent": 1, "unique_identifier": 20411016, "slug": "WorkWithBranches", "created_at": "2022-03-22T09:32:53.111Z", "updated_at": "2022-04-04T04:21:02.203Z", "CategoryType": "SubCategory", "lft": 12, "rght": 13, "tree_id": 1, "level": 1}}, {"model": "webapi.category", "pk": 8, "fields": {"name": "Remote Collaboration", "image": "category_pic/Logo_GitGitHub_6WdnMwv.svg", "parent": 1, "unique_identifier": 20411017, "slug": "RemoteCollaboration", "created_at": "2022-03-22T09:33:25.957Z", "updated_at": "2022-04-04T04:21:11.612Z", "CategoryType": "SubCategory", "lft": 14, "rght": 15, "tree_id": 1, "level": 1}}, {"model": "webapi.category", "pk": 9, "fields": {"name": "Supplemental Topics", "image": "category_pic/Logo_GitGitHub_n8VrZCt.svg", "parent": 1, "unique_identifier": 20411018, "slug": "GuideToTheNextLevel", "created_at": "2022-03-22T09:33:50.097Z", "updated_at": "2022-04-04T04:21:21.607Z", "CategoryType": "SubCategory", "lft": 16, "rght": 17, "tree_id": 1, "level": 1}}, {"model": "webapi.category", "pk": 18, "fields": {"name": "Biology", "image": "category_pic/slider-2-person.png", "parent": null, "unique_identifier": 4130, "slug": "life, nature,earth", "created_at": "2022-04-04T04:31:50.922Z", "updated_at": "2022-04-04T04:31:50.922Z", "CategoryType": "Category", "lft": 1, "rght": 4, "tree_id": 2, "level": 0}}, {"model": "webapi.category", "pk": 19, "fields": {"name": "zoology", "image": "category_pic/slider-2-person_fz895cj.png", "parent": 18, "unique_identifier": 3557, "slug": "life, nature,earth,disater", "created_at": "2022-04-04T04:32:38.338Z", "updated_at": "2022-04-04T04:32:38.338Z", "CategoryType": "", "lft": 2, "rght": 3, "tree_id": 2, "level": 1}}, {"model": "webapi.reviewmodel", "pk": 6, "fields": {"title": "Git & GitHub Introduction", "author": 8, "images": "media/uploads/2041-10-10-10-10_GitGitHubIntroduction.svg", "categories": 1, "only_to_my_page": false, "unique_identifier": 204110101010, "meta_keywords": null, "meta_description": null, "content": "<p><strong>English To Be Reviewed Again</strong></p>\r\n\r\n<p><strong>Version Control System</strong> (VCS) is one of the most critical tools for coding and digital application development. <strong>Git</strong> is the most commonly used version control system, created by Linus Torvalds in 2005 for the development of the Linux kernel. <strong>GitHub</strong> is one of the most popular remote repository services based on the Git platform.</p>\r\n\r\n<p>In this course, we&rsquo;ll explain how to use Git as a version control system and how to collaborate on GitHub .</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Icons</h3>\r\n\r\n<p>Throughout the course, we are uzing some icons to improve clarity of topics.</p>\r\n\r\n<p><strong>Git and GitHub icons</strong></p>\r\n\r\n<ul>\r\n\t<li>You can find the Git icon (&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/git.svg\" /> )&nbsp;or&nbsp;GitHub icon (&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/github.svg\" /> ) on top right of each main slide. The icons are indications&nbsp;of which platform&#39;s explanations&nbsp;are covered on the page. If both icons are shown, the page explain both topics or intersections of the two platforms.</li>\r\n</ul>\r\n\r\n<p><strong>Practice Section (&nbsp;<img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /> )</strong></p>\r\n\r\n<ul>\r\n\t<li>We prepared a practice section&nbsp;on some pages to demonstrate key commands and operations on the web browser&nbsp;. The demonstration is based on MacOS computer, however, the demonstration is also largely applicable to other OS like Windows and Linux.</li>\r\n\t<li>To make clear how you need to use the command line or text editor, we use the following icons before the black box to describe code or command.\r\n\t<ul>\r\n\t\t<li><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;: when you see this icon, you need to make inputs on the&nbsp;command line based on the instruction.</li>\r\n\t\t<li>&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp; : this icon indicates that the descriptions below the icon is responses in the&nbsp;command line after your command line input</li>\r\n\t\t<li>&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/Interactive_icon_blue.svg\" />&nbsp; : in some case, the command line requires interactive session, for example, when it is asking your password. This icon indicates that you need to make inputs based on the command line&#39;s request.</li>\r\n\t\t<li><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp; : when you write code or make a commit message for Git, you need a text editor. This icon indicates that the descriptions below the icon need to be written in your&nbsp;text editor.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>You can find pages which have a practice section through main slides. If there is this icon (<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_tag_icon.svg\" />) in the bottom left of the slide, the page includes practice section.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T11:52:18.698Z", "updated_at": "2022-03-27T11:52:18.698Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 7, "fields": {"title": "Table Of Contents", "author": 8, "images": "media/uploads/29_oBrdkyG.svg", "categories": 1, "only_to_my_page": false, "unique_identifier": 204110101110, "meta_keywords": null, "meta_description": null, "content": "<p>01&nbsp;<a href=\"http://test.photomania.blue/detail/129/\">Git &amp; GitHub Key Concepts</a></p>\r\n\r\n<ul>\r\n\t<li>What Is Git?</li>\r\n\t<li>What Is Version Control?</li>\r\n\t<li>How To Make A Record On Git?</li>\r\n\t<li>Collaborating On Git &amp; GitHub &mdash; Remote Repository</li>\r\n\t<li>Collaborating On Git &amp; Git Hub &mdash; Branch</li>\r\n\t<li>What You Can Do On GitHub Beyond Collaborative Coding</li>\r\n</ul>\r\n\r\n<p>02&nbsp;<a href=\"http://test.photomania.blue/detail/133/\">Git &amp; GitHub Life Cycle</a></p>\r\n\r\n<ul>\r\n\t<li>Git &amp; GitHub Basic Life Cycle Overview</li>\r\n\t<li>Target State Of A Git Project Launch</li>\r\n\t<li>Git &amp; GitHub Regular Workflow</li>\r\n</ul>\r\n\r\n<p>03&nbsp;<a href=\"http://test.photomania.blue/detail/137/\">Git &amp; GitHub Initial Settings</a></p>\r\n\r\n<ul>\r\n\t<li>Git &amp; GitHub Initial Settings Overview</li>\r\n\t<li>Install Git&nbsp;&nbsp;<a href=\"http://test.photomania.blue/detail/139/#practice\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_tag_icon.svg\" /></a></li>\r\n\t<li>Git User Settings &mdash; Git Config&nbsp;&nbsp;<a href=\"http://test.photomania.blue/detail/140/#practice\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_tag_icon.svg\" /></a></li>\r\n\t<li>Create GitHub Account</li>\r\n\t<li>GitHub Access Authentication Settings</li>\r\n\t<li>Generating PAT (Personal Access Token)</li>\r\n\t<li>GitHub SSH Setup&nbsp;&nbsp;<a href=\"http://test.photomania.blue/detail/144/#practice\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_tag_icon.svg\" /></a></li>\r\n</ul>\r\n\r\n<p>04&nbsp;<a href=\"http://test.photomania.blue/detail/145/\">Launch a Git Project</a></p>\r\n\r\n<ul>\r\n\t<li>Three Cases To Launch Git Project</li>\r\n\t<li>Key Steps To Launch Git Project As Project Initiator</li>\r\n\t<li>Create Local Repository &mdash; Git Init&nbsp;&nbsp;<a href=\"http://test.photomania.blue/detail/148/#practice\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_tag_icon.svg\" /></a></li>\r\n\t<li>Making The First Commit&nbsp;&nbsp;<a href=\"http://test.photomania.blue/detail/151/#practice\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_tag_icon.svg\" /></a></li>\r\n\t<li>.gitignore File&nbsp;&nbsp;<a href=\"http://test.photomania.blue/detail/149/#practice\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_tag_icon.svg\" /></a></li>\r\n\t<li>Set UP Remote Repository&nbsp;&mdash; Create Repository And Grant Access</li>\r\n\t<li>Link Remote Repository With Local Repository &mdash; Git Remote Add</li>\r\n\t<li>Upload Local Repository To Remote Repository &mdash; Git Push</li>\r\n\t<li>How To Work With Remote Repository When Launching Project</li>\r\n\t<li>Case 1. Create Own Repository And Share It With Others&nbsp;&nbsp;<a href=\"http://test.photomania.blue/detail/152/#practice\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_tag_icon.svg\" /></a></li>\r\n\t<li>Case 2. Get Access To Others&rsquo; Remote Repository As Collaborator&nbsp;&nbsp;<a href=\"http://test.photomania.blue/detail/155/#practice\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_tag_icon.svg\" /></a></li>\r\n\t<li>Git Clone</li>\r\n\t<li>Case 3. Create Replica Of Remote Repository And Bring It To Local Computer&nbsp;&nbsp;<a href=\"http://test.photomania.blue/detail/157/#practice\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_tag_icon.svg\" /></a></li>\r\n\t<li>Fork vs. Clone</li>\r\n</ul>\r\n\r\n<p>05 Edit &amp; Commit</p>\r\n\r\n<ul>\r\n\t<li>Git Regular Workflow &mdash; Edit &amp; Commit</li>\r\n\t<li>Edit and Commit Overveiw (1)</li>\r\n\t<li>Edit and Commit Overveiw (2)</li>\r\n\t<li>HEAD</li>\r\n\t<li>Add Files To Staging Area &mdash; Git Add</li>\r\n\t<li>Check Status Of Working Tree And Staging Area -- Git Status</li>\r\n\t<li>Commit Files &mdash; Git Commit</li>\r\n\t<li>Check Commit Histories &mdash; Git Log</li>\r\n\t<li>Check Differences &mdash; Git Diff</li>\r\n\t<li>Restore Files To Working Tree &mdash; Git Restore</li>\r\n\t<li>Delete Files &mdash; Git Rm</li>\r\n\t<li>Undo Changes &mdash; Git Reset</li>\r\n</ul>\r\n\r\n<p>06 Work with Branches</p>\r\n\r\n<ul>\r\n\t<li>Git Regular Workflow &mdash; Work With Branches</li>\r\n\t<li>What Is Branch?</li>\r\n\t<li>Branch Operation Basic Life Cycle</li>\r\n\t<li>Create Branch And Check Branch Status &mdash; Git Branch</li>\r\n\t<li>Switch Current Branch (1) &mdash; Git Checkout</li>\r\n\t<li>Switch Current Branch (2) &mdash; Git Switch</li>\r\n\t<li>Merge Branches &mdash; Git Merge</li>\r\n\t<li>Fast-forward Merge</li>\r\n\t<li>Non Fast-forward Merge (No Option)</li>\r\n\t<li>Non Fast-forward Merge (--no-ff Option)</li>\r\n\t<li>Squash Merge</li>\r\n\t<li>Rebase Branch &mdash; Git Rebase</li>\r\n\t<li>Managing Conflict</li>\r\n\t<li>Stash Changes &mdash; Git Stash</li>\r\n</ul>\r\n\r\n<p>07 Remote Collaboration</p>\r\n\r\n<ul>\r\n\t<li>Git Regular Workflow &mdash; Remote Collaboration</li>\r\n\t<li>Remote Collaboration Overview</li>\r\n\t<li>Link With Remote Repository &mdash; Git Remote</li>\r\n\t<li>Upload To Remote Repository &mdash; Git Push</li>\r\n\t<li>Download Remote Repository and Merge to Local Repository &mdash; Git Pull</li>\r\n\t<li>Get Remote Repository Information to Local Repository &mdash; Git Fetch</li>\r\n\t<li>Pull vs. Fetch</li>\r\n\t<li>Request For Review and Merge &mdash; Pull Request</li>\r\n\t<li>Merge Operation On GitHub</li>\r\n</ul>\r\n\r\n<p>08 Supplemental Topics</p>\r\n\r\n<ul>\r\n\t<li>GitHub Issues</li>\r\n\t<li>Key Git Commands</li>\r\n\t<li>Glossaries</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T11:54:04.051Z", "updated_at": "2022-03-28T10:24:49.121Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 8, "fields": {"title": "Chapter 1.  Git & GitHub Key Concepts", "author": 8, "images": "media/uploads/2.svg", "categories": 2, "only_to_my_page": false, "unique_identifier": 204110111010, "meta_keywords": null, "meta_description": null, "content": "<p>In this chapter, we&rsquo;ll explain the key concepts of Git and remote repository services using GitHub examples. The following topics are covered in this chapter.</p>\r\n\r\n<p>TOPICS</p>\r\n\r\n<ol>\r\n\t<li><strong>What Is Git?</strong></li>\r\n\t<li><strong>What Is Version Control?</strong></li>\r\n\t<li><strong>How To Make A Record On Git?</strong></li>\r\n\t<li><strong>Collaborating On Git &amp; GitHub &mdash; Remote Repository</strong></li>\r\n\t<li><strong>Collaborating On Git &amp; GitHub &mdash; Branch</strong></li>\r\n\t<li><strong>What You Can Do On GitHub Beyond Coding Collaboration</strong></li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>To start learning, go to the next page.</p>", "created_at": "2022-03-27T11:55:32.711Z", "updated_at": "2022-03-27T11:55:32.711Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 9, "fields": {"title": "What Is Git?", "author": 8, "images": "media/uploads/3.svg", "categories": 2, "only_to_my_page": false, "unique_identifier": 204110111110, "meta_keywords": null, "meta_description": null, "content": "<p>Git is a free and open-source distributed version control system. Git is often used with remote repository services such as GitHub, GitLab, and Bitbucket. Git and remote repository services like GitHub can provide <strong>Three Key Values</strong>.</p>\r\n\r\n<p>Three Key Values</p>\r\n\r\n<ol>\r\n\t<li><strong>Version Control: </strong>using Git, you can <u>record</u>, <u>track</u> and <u>retrieve</u> your coding histories</li>\r\n\t<li><strong>Collaborative Coding:</strong> on Git and remote repository services, you can <u>share your code</u>, get others&rsquo; codes and <u>work as a team</u></li>\r\n\t<li><strong>Task Management &amp; Automation: </strong>most Git remote repository services provide additional features to <u>manage tasks</u> and <u>automate workflow</u> such as auto deployment.</li>\r\n</ol>\r\n\r\n<p>Git and Github are often explained together, however, they are different things. Git is a version control system while GitHub is a repository service provided by GitHub, Inc. Typically, remote repository services also offer task management features. For example, GitHub provides Git Issues&nbsp;that allows you to input tasks and share them with your team. GitHub or other remote repository services can also integrate with other services for workflow automation.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T11:56:55.651Z", "updated_at": "2022-03-27T11:56:55.651Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 10, "fields": {"title": "What Is Version Control?", "author": 8, "images": "media/uploads/4.svg", "categories": 2, "only_to_my_page": false, "unique_identifier": 204110111210, "meta_keywords": null, "meta_description": null, "content": "<p>When coding, you need to manage several files which are dependent on one another. If you want to save different versions, you need to save entire sets of files in different directories with version names. This approach is very computer resource consuming. Git provides solutions for this with simple Git commands.</p>\r\n\r\n<p>There are two keywords to understand the Git coding history management: Repository and Commit.</p>\r\n\r\n<p><strong>Repository</strong> is a location where different versions of codes are stored. There are two types of repositories:</p>\r\n\r\n<ul>\r\n\t<li><strong>Local Repository: </strong>it&nbsp;is installed on your local computer</li>\r\n\t<li><strong>Remote Repository</strong>: it is&nbsp;created under a remote repository service platform such as GitHub&nbsp;on the Internet.</li>\r\n</ul>\r\n\r\n<p><strong>Commit</strong> creates a snapshop&nbsp;to record the status of coding in a repository. Only committed files are recorded in the Git log system. Committed files are saved with the following key information:</p>\r\n\r\n<ul>\r\n\t<li>Commit hash: unique number to identify each commit</li>\r\n\t<li>Author information: name and&nbsp;email address of the person who made the commit</li>\r\n\t<li>Date and time</li>\r\n\t<li>Commit message: short title and description about the commit</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T11:58:22.697Z", "updated_at": "2022-03-27T11:58:22.697Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 11, "fields": {"title": "How To Make A Record On Git?", "author": 8, "images": "media/uploads/5.svg", "categories": 2, "only_to_my_page": false, "unique_identifier": 204110111310, "meta_keywords": null, "meta_description": null, "content": "<p>Git allows us to track all changes in our working files, however it doesn&rsquo;t record every single change. Git tracks only <strong>Committed&nbsp;files&nbsp;</strong>(a snapshot of set of project files).&nbsp;This is like when we save a file on our computer as one version and save again as another version with different filenames.</p>\r\n\r\n<p>Committed&nbsp;files are stored in a local or remote repository. Through the remote repository, you can share your work and collaborate with others. Here we&rsquo;ll explain how to manage working history under a local repository.</p>\r\n\r\n<p>There are three&nbsp;major areas&nbsp;to manage versions through Git.&nbsp;</p>\r\n\r\n<ul>\r\n\t<li><strong>Working Tree</strong> is used to edit your working files. The files and directories which you see on your working directory are Working Tree. Here you can edit your files.&nbsp;</li>\r\n\t<li><strong>Staging Area</strong> is a buffer area used&nbsp;to prepare your working files for&nbsp;commit. The&nbsp;command to bring the working files into Staging Area is <strong>$ git add</strong>. You can double check if the files you added to Staging Area are ready for commit. If the files are ready, you can commit and save them&nbsp;under Local Repository. The&nbsp;command to commit files is <strong>$ git commit</strong>.</li>\r\n\t<li><strong>Local Repository</strong> is a place where Committed&nbsp;files are stored with version histories. By running $ git commit command, you can commit your files under Staging Area (save a version under your Local Repository). At this stage, your files are still on your computer and not accessible for&nbsp;others. To share the files, you need to bring the files to Remote Repository, which is explained on&nbsp;the next page</li>\r\n</ul>\r\n\r\n<p>When committing files, you need to write a message&nbsp;describing&nbsp;what the commit is about:&nbsp;for example, &quot;<em>added payment function&quot;</em> or &quot;<em>fixed errors&quot;</em>.</p>\r\n\r\n<p>When running the $ git commit command, a text editor launches automatically for&nbsp;writing&nbsp;comments. Vim&nbsp;text editor is the default setting typically. For the purpose of this course, Visual Studio Code will be used.</p>\r\n\r\n<p>More details will be provided in Chapter 5 Edit &amp; Commit.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T11:59:46.578Z", "updated_at": "2022-03-27T11:59:46.578Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 12, "fields": {"title": "Collaborating On Git&Git Hub — Remote Repository", "author": 8, "images": "media/uploads/6.svg", "categories": 2, "only_to_my_page": false, "unique_identifier": 204110111410, "meta_keywords": null, "meta_description": null, "content": "<p>Collaborative coding is typically managed through a<strong> Remote Repository</strong>. A Remote Repository is a place where Committed files are stored on the web and can be shared with others. <strong>GitHub</strong>, <strong>GitLab</strong> or <strong>Bitbucket</strong> are the major remote repository services.&nbsp;</p>\r\n\r\n<p>Interactions between a Local Repository and Remote Repository are done through the command line on a local computer or a desktop application provided by remote repository services.</p>\r\n\r\n<p>The following steps are an example flow to share the files and collaborate with a team member.</p>\r\n\r\n<p>Example:<em> Developer A</em> initiates a project, and <em>Developer B</em> supports <em>Developer A</em></p>\r\n\r\n<ol>\r\n\t<li><em>Developer A</em> works on coding and makes the first <strong>Commit </strong>(saved in his Local Repository).</li>\r\n\t<li><em>Developer A</em> sends the commited files to his Remote Repository. This action is called <strong>Push</strong>. The command to push files is <strong>$ git push</strong>.</li>\r\n\t<li><em>Developer A</em> gives <em>Developer B</em> access to his Remote Repository.</li>\r\n\t<li><em>Developer B</em> brings the files from the Remote Repository to her local computer. When she does this for the first time, the action is called <strong>Clone</strong>. Clone creates the same set of files as the Remote Repository in the local computer &mdash; commited files are registered in her Local Repository and the same files are saved under the working directory. The command to clone is <strong>$ git clone</strong>.</li>\r\n\t<li><em>Developer B</em> can work on creating new lines of code and save them&nbsp;under her Local Repository (<strong>Commit</strong>).</li>\r\n\t<li><em>Developer B</em> pushes&nbsp;them back to Remote Repository where <em>Developer A </em>can access them.&nbsp;</li>\r\n\t<li><em>Developer A </em>can bring the files back to his Local Repository and his working directory. This action is called <strong>Pull</strong>. The command to pull files is <strong>$ git pull</strong>.</li>\r\n</ol>\r\n\r\n<p>The flow above is one of typical case. We&rsquo;ll give more details about Remote Repository&nbsp;in Chapter 7 Remote Collaboration.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T12:01:10.746Z", "updated_at": "2022-03-27T12:01:10.746Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 13, "fields": {"title": "Collaborating On Git&Git Hub — Branch", "author": 8, "images": "media/uploads/7.svg", "categories": 2, "only_to_my_page": false, "unique_identifier": 204110111510, "meta_keywords": null, "meta_description": null, "content": "<p>A <strong>Branch</strong> in Git is an independent line of development with a comit history. Different branches give a different recording space; each branch has its own coding history (a line of commits).&nbsp;</p>\r\n\r\n<p>Branches allow us to manage different versions of the same set of project files simultaneously. For example, one developer can work on adding a new promotion campaign feature while another developer is working on adding a new payment feature to the same web application.&nbsp;</p>\r\n\r\n<p>Git provides a <strong>master branch</strong> as a default. Unless you create a new branch, all your work is done on the master branch. The branch to create a new feature is typically called a <strong>topic branch</strong>.&nbsp;</p>\r\n\r\n<p>Once development is completed in a topic branch, you can <strong>merge</strong>&nbsp;it with the master branch or its&nbsp;parent branch.&nbsp;</p>\r\n\r\n<p>With the branching functionality, you can collaborate with others efficiently. Or even you can utilize branches&nbsp;by yourself to manage&nbsp;versions to develop different features simultaniously.</p>\r\n\r\n<p>More details of the Branch concept and operations will be explained in Chapter 6 Work with Branches.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T12:02:16.825Z", "updated_at": "2022-03-27T12:02:16.825Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 14, "fields": {"title": "What You Can Do Beyond Collaborative Coding On GitHub", "author": 8, "images": "media/uploads/8.svg", "categories": 2, "only_to_my_page": false, "unique_identifier": 204110111610, "meta_keywords": null, "meta_description": null, "content": "<p>GitHub is no longer just a Git hosting service. There are several features you can use. Here are some examples.&nbsp;</p>\r\n\r\n<p><strong>GitHub Issues</strong>: this is a task management tool. GitHub users can easily create project task lists using GitHub Issues. You can upload images by simple drag&amp;drop and add an&nbsp;image in the issue list very easily. GitHub issues&nbsp;is a powerful tool for&nbsp;communicating&nbsp;with your team members effectively.&nbsp; You can also asign your team members to each task.</p>\r\n\r\n<p><strong>GitHub Actions</strong>: this is a tool to support CI/CD and DevOps workflow. Even before GitHub Actions was introduced, GitHub was a popular platform for CI/CD and DevOps through API, connecting with other applications such as CircleCI, Travis CI, Jenkins. GitHub Actions give you more opportunities to improve your workflow within your repositories on GitHub.</p>\r\n\r\n<p>GitHub also provides other tools and services like auto security alerts using Dependabot.&nbsp;</p>\r\n\r\n<p>Several client apps are also available to improve your working efficiencies.</p>\r\n\r\n<p><strong>&nbsp; GitHub Desktop</strong>: To control GitHub on a local GUI application</p>\r\n\r\n<p><strong>&nbsp; GitHub CLI</strong>: To control GitHub from the local computer&#39;s command line.</p>\r\n\r\n<p>&nbsp;&nbsp;<strong>GitHub Mobile App</strong>: To easily check status of issues and repositories&nbsp;</p>\r\n\r\n<p>Some details will be provided&nbsp;in Chapter 8 Supplemental Topics.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T12:03:40.690Z", "updated_at": "2022-03-27T12:03:40.690Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 15, "fields": {"title": "Chapter 2.   Git & GitHub Life Cycle", "author": 8, "images": "media/uploads/9.svg", "categories": 3, "only_to_my_page": false, "unique_identifier": 204110121010, "meta_keywords": null, "meta_description": null, "content": "<p>In this chapter, we&rsquo;ll go through a typical user journey with explanations of basic Git commands and GitHub features. This chapter covers&nbsp;the following topics.</p>\r\n\r\n<p>TOPICS</p>\r\n\r\n<ol>\r\n\t<li><strong>Git &amp; GitHub Basic Life Cycle Overview</strong></li>\r\n\t<li><strong>Target State Of Git Project Launch</strong></li>\r\n\t<li><strong>Git &amp; GitHub Regular Workflow</strong></li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>To start learning, go to the next page.</p>", "created_at": "2022-03-27T12:05:01.783Z", "updated_at": "2022-03-27T12:05:01.783Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 16, "fields": {"title": "Git & GitHub Basic Life Cycle Overview", "author": 8, "images": "media/uploads/10.svg", "categories": 3, "only_to_my_page": false, "unique_identifier": 204110121110, "meta_keywords": null, "meta_description": null, "content": "<p>Beginners of Git and GitHub should understand <strong>Five Key Steps</strong>.</p>\r\n\r\n<p><strong>The first two steps</strong> are for a preparation to start a project on Git and GitHub.&nbsp;</p>\r\n\r\n<h2>Step 1: Initial Settings</h2>\r\n\r\n<p>When you first use Git and GitHub, you need to install Git software and register your profile. You also need to create a GitHub account. This is a one-time operation unless you want to change your computer or your account. The details will be covered in Chapter 3.</p>\r\n\r\n<h2>Step 2: Launch a project</h2>\r\n\r\n<p>When you initiate a project, you need to create local and remote repositories that will be used to save your coding and share your codes with others. At this step, you&rsquo;ll also establish a connection between the local repository and the remote repository. The details will be covered in Chapter 4.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>The last three steps</strong> cover daily operations on Git and GitHub. Throughout your coding project, you are expected to use various Git commands and GitHub features on a daily basis along with the following three steps.</p>\r\n\r\n<h2>Step 3: Edit &amp; Commit</h2>\r\n\r\n<p>Once you launched a project, you can start to write and edit your code. You can save several versions of code in your Local Repository&nbsp;by committing the codes.&nbsp;The details will be covered in Chapter 5.</p>\r\n\r\n<h2>Step 4: Work with Branches</h2>\r\n\r\n<p>When you add some features while continuing working on the main code development, you may want to develop&nbsp;several versions of code simultaniously. The Branch functionality enables you or your team members to work on different versions of code simultaneously.&nbsp;The details will be covered in Chapter 6.</p>\r\n\r\n<h2>Step 5: Remote Collaboration</h2>\r\n\r\n<p>One of the key features of Git is that it allows collaboration with others. You can share your code through remote repository with your team members and vice versa. The details will be covered in Chapter 7.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T12:06:02.422Z", "updated_at": "2022-03-27T12:06:02.422Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 17, "fields": {"title": "Target State Of Git Project Launch", "author": 8, "images": "", "categories": 3, "only_to_my_page": false, "unique_identifier": 204110121210, "meta_keywords": null, "meta_description": null, "content": "<p><strong>English To Be Reviewed Again</strong></p>\r\n\r\n<p>The target of the first two steps described on the previous page&nbsp;is to establish&nbsp;the illustrated status for a specific project.</p>\r\n\r\n<ul>\r\n\t<li>A Local Repository for the project is created on your local computer</li>\r\n\t<li>A Remote Repository for the project is created on GitHub and / or access to the project Remote Repository&nbsp;is granted to the necessary project members</li>\r\n\t<li>The Local Repository and Remote Repository are linked with each other (typically through HTTPS or SSH connection)</li>\r\n</ul>\r\n\r\n<p>At this stage, you should be able to see the same directories and files in both Local Repository and Remote Repository.&nbsp;Once you reach this status, you are ready to start a new project with Git &amp; GitHub and you can move on to the regular Git &amp; GitHub workflow explained on the next page.</p>", "created_at": "2022-03-27T12:07:25.768Z", "updated_at": "2022-03-27T12:07:25.768Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 18, "fields": {"title": "Git & GitHub Regular Workflow", "author": 8, "images": "", "categories": 3, "only_to_my_page": false, "unique_identifier": 204110121310, "meta_keywords": null, "meta_description": null, "content": "<p><strong>English To Be Reviewed Again</strong></p>\r\n\r\n<p>In the regular Git &amp; GitHub workflow, you repeat&nbsp;three types of actions typically.</p>\r\n\r\n<ul>\r\n\t<li><strong>Edit &amp; Commit </strong>codes (register in a Local Repository)</li>\r\n\t<li><strong>Work with Branches</strong> to develop codes simultaniously</li>\r\n\t<li><strong>Remote collaboration</strong>&nbsp;by&nbsp;sharing&nbsp;codes with other team members through a&nbsp;Remote Repository</li>\r\n</ul>\r\n\r\n<p>To master Git &amp;&nbsp;GitHub workflow,&nbsp; you need to learn various&nbsp;<strong>Git commands</strong>&nbsp;and some&nbsp;<strong>GitHub features</strong>. In Chapter 5, 6 and 7, we will go through each command and feature one by one.</p>", "created_at": "2022-03-27T12:09:02.777Z", "updated_at": "2022-03-27T12:09:02.777Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 19, "fields": {"title": "Chapter 3. Git & GitHub Initial Settings", "author": 8, "images": "media/uploads/13.svg", "categories": 4, "only_to_my_page": false, "unique_identifier": 204110131010, "meta_keywords": null, "meta_description": null, "content": "<p>In this chapter, we&rsquo;ll explain how to set up Git and GitHub. This chapter covers&nbsp;the following topics.&nbsp;</p>\r\n\r\n<p>TOPICS</p>\r\n\r\n<ol>\r\n\t<li><strong>Git &amp; GitHub Initial Settings Overview&nbsp;</strong></li>\r\n\t<li><strong>Install Git</strong></li>\r\n\t<li><strong>Git User Settings &mdash; Git Config</strong></li>\r\n\t<li><strong>Create GitHub Account</strong></li>\r\n\t<li><strong>GitHub Access Authentication Settings</strong></li>\r\n\t<li><strong>Generating PAT (Personal Access Token)</strong></li>\r\n\t<li><strong>GitHub SSH Setup</strong></li>\r\n</ol>\r\n\r\n<p>To start learning, go to the next page.</p>", "created_at": "2022-03-27T12:14:22.500Z", "updated_at": "2022-03-27T12:14:22.500Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 20, "fields": {"title": "Git & GitHub Initial Settings Overview", "author": 8, "images": "media/uploads/14.svg", "categories": 4, "only_to_my_page": false, "unique_identifier": 204110131110, "meta_keywords": null, "meta_description": null, "content": "<p><strong>English To Be Reviewed Again</strong></p>\r\n\r\n<p>The goal of this chapter is to help you understand how to set up Git on your local computer and conduct initial settings&nbsp;for GitHub from its website.&nbsp;</p>\r\n\r\n<p>To set up Git &amp; GitHub,&nbsp;you need to take the following&nbsp;<strong>four key&nbsp;steps</strong>.</p>\r\n\r\n<h2>Step 1: Install Git</h2>\r\n\r\n<p>To use Git on your computer, you need to download and install it first. Installation approaches differ by OS (Mac OS, Windows and Linux).</p>\r\n\r\n<h2>Step 2: Git User Settings</h2>\r\n\r\n<p>As Git is a tool to record coding histories including author of edits, you need to register your basic information (i.e., user name and email address). You can also register your preferred text editor which is used when you make commit messages.</p>\r\n\r\n<h2>Step 3: GitHub Signup</h2>\r\n\r\n<p>To use GitHub, you need to sign up for the GitHub service on its website. GitHub provides a free plan. You can start with the free plan for learning purposes.&nbsp;</p>\r\n\r\n<h2>Step 4: GitHub Access Authentication Settings</h2>\r\n\r\n<p>To access GitHub from the command line, you need to have authentication settings. Common authentication approaches for GitHub are HTTPS and SSH. For HTTPS, you need to generate PAT (Personal Access Token) to use it as a password to access a Remote Repository.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T12:15:34.493Z", "updated_at": "2022-03-27T12:15:49.102Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 21, "fields": {"title": "Install Git", "author": 8, "images": "media/uploads/15.svg", "categories": 4, "only_to_my_page": false, "unique_identifier": 204110131210, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;As Git is open source software (OSS), anyone can install and use it.</p>\r\n\r\n<p>Git is available on Git&#39;s official site ( <strong><a href=\"https://git-scm.com/\" target=\"_blank\">https://git-scm.com/</a> </strong>).&nbsp;</p>\r\n\r\n<p>If Git is not installed onto your computer, download a relevant OS version and install it onto your computer.&nbsp;</p>\r\n\r\n<p>For <strong>Mac</strong>:&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Git is typically pre-installed on Mac.</p>\r\n\r\n<p>Check the Git version with the <strong>$ git --version</strong> command.</p>\r\n\r\n<p>If the command line returns a version, Git is already installed onto your computer.</p>\r\n\r\n<p>If Git is not installed, follow the instructions below.</p>\r\n\r\n<p>There are several options to install Git onto your computer.</p>\r\n\r\n<p>The most popular one is Home Brew. Here are the steps to install Git with Home Brew:</p>\r\n\r\n<p><strong>1. Install Home Brew</strong> if you don&rsquo;t have it on your computer.&nbsp;</p>\r\n\r\n<p>You can check if you have Home Brew on your computer by running the&nbsp;<strong>$ brew -- version</strong> command</p>\r\n\r\n<p>If Home Brew is not installed yet, run the following command (copy the code and past it in&nbsp;the command line):</p>\r\n\r\n<pre>\r\n<code>$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</code></pre>\r\n\r\n<p>See more details about Home Brew here: ( <strong><a href=\"https://brew.sh/\" target=\"_blank\">https://brew.sh/</a> </strong>)</p>\r\n\r\n<p><strong>2. Install Git </strong><br />\r\nTo install Git with Home Brew, run the following command</p>\r\n\r\n<pre>\r\n<code>$ brew install git</code></pre>\r\n\r\n<p>To see other options to install Git onto Mac, go to&nbsp;this page: <strong><a href=\"https://git-scm.com/download/mac\">https://git-scm.com/download/mac</a></strong></p>\r\n\r\n<p>For <strong>Windows</strong>:&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>To install Git onto Windows computer, follow the steps below.</p>\r\n\r\n<p>1. Go to this site <strong><a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a></strong></p>\r\n\r\n<p>2. Click Windows. The Git installation package will be downloaded onto your computer.</p>\r\n\r\n<p>3. Open the downloaded .exe file</p>\r\n\r\n<p>4. Follow the installation instructions. Unless you want to change the setting, keep pressing the Next buttom.</p>\r\n\r\n<p>For <strong>Linux</strong>:&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A typical approach to install Git onto Linux computers is through the Linux command line.</p>\r\n\r\n<p>Installation commands differ by Linux distributions. If you are using Debian/Ubuntu, you can use the <strong>apt-get </strong>command.&nbsp;</p>\r\n\r\n<pre>\r\n<code>$ sudo apt-get update \r\n$ sudo apt-get install git</code></pre>\r\n\r\n<p>For other Linux distributions, please refer to the following link.</p>\r\n\r\n<p><strong><a href=\"http://git-scm.com/download/linux\">http://git-scm.com/download/linux</a></strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Check git version</p>\r\n\r\n<p>Run the following command. If Git is installed already, the command line returns a version.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git --version </code></pre>\r\n\r\n<p>If Git is already installed, you can skip the following steps and go to next page. If your Git version is old, you can also reinstall Git with a newer version by following the steps below.</p>\r\n\r\n<p>2. Check if Home Brew is installed</p>\r\n\r\n<p>Run the following command. If Home Brew&nbsp;is installed already, the command line returns a version.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ brew --version </code></pre>\r\n\r\n<p>If Home Brew is already installed, you can skip step 3&nbsp;and go to step 4.</p>\r\n\r\n<p>3. Install Home Brew</p>\r\n\r\n<p>To install Home Brew, copy the following installation command and paste onto terminal.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</code></pre>\r\n\r\n<p>During the installation process, your computer password&nbsp;may be required.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>==&gt; Checking for `sudo` access (which may request your password)...</code></pre>\r\n\r\n<p>Input your computer password.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>Password: YOUR PASSWORD </code></pre>\r\n\r\n<p>Installation starts as&nbsp;follows.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>==&gt; This script will install:\r\n/usr/local/bin/brew</code></pre>\r\n\r\n<p>If permissions are not properly set, you may see the following error message.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Error: Can't create update lock in /usr/local/var/homebrew/locks!\r\nFix permissions by running:\r\n  sudo chown -R $(whoami) /usr/local/var/homebrew\r\nFailed during: /usr/local/bin/brew update --force --quiet</code></pre>\r\n\r\n<p>Following the instruction, run this command</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$sudo chown -R $(whoami) /usr/local/var/homebrew</code></pre>\r\n\r\n<p>Because of this error, the installation process is cancelled.</p>\r\n\r\n<p>In that&nbsp;case, you need to run the same installation command (<strong>$ /bin/bash -c &quot;$(curl... </strong>)&nbsp;again.</p>\r\n\r\n<p>If you finally get the following message, Home Brew is successfully installed onto your computer. You can move on to the next.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>==&gt; Installation successful!</code></pre>\r\n\r\n<p>4. Install Git</p>\r\n\r\n<p>To install Git, run the following command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ brew install git</code></pre>\r\n\r\n<p>or</p>\r\n\r\n<pre>\r\n<code>$ brew reinstall git</code></pre>\r\n\r\n<p>You may get an error message.&nbsp; A typical error&nbsp;is the&nbsp;access permission error. Update permission&nbsp;based on the instructions described in the error message. Then, run the installation command again.</p>\r\n\r\n<p>The following is an example of the command line response when Git is successfully installed or upgraded.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>git 2.33.1_1 is already installed but outdated\r\n==&gt; Downloading https://ghcr.io/v2/homebrew/core/git/manifests/2.34.1\r\nAlready downloaded: /Users/bloovee/Library/Caches/Homebrew/downloads/xxx\r\n==&gt; Downloading https://ghcr.io/v2/homebrew/core/git/blobs/xxxx\r\nAlready downloaded: /Users/bloovee/Library/Caches/Homebrew/downloads/xxx\r\n==&gt; Upgrading git\r\n  2.33.1_1 -&gt; 2.34.1\r\n\r\n    :\r\n\r\nEmacs Lisp files have been installed to:\r\n  /usr/local/share/emacs/site-lisp/git\r\n==&gt; Summary\r\n🍺  /usr/local/Cellar/git/2.34.1: 1,513 files, 42.7MB</code></pre>\r\n\r\n<p>Now your are ready to use Git on your Mac computer.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T12:17:05.005Z", "updated_at": "2022-03-27T12:17:05.005Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 22, "fields": {"title": "Git User Settings — Git Config", "author": 8, "images": "media/uploads/16.svg", "categories": 3, "only_to_my_page": false, "unique_identifier": 204110131310, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;English To Be Reviewed Again</strong></p>\r\n\r\n<p>The next step after Git installation is registering user profiles on Git. On this page, you&#39;ll learn&nbsp;the following five items relating to the Git configulations.</p>\r\n\r\n<ol>\r\n\t<li><strong>Register your user name and email address</strong></li>\r\n\t<li><strong>Register a text editor</strong></li>\r\n\t<li><strong>Check configured settings</strong></li>\r\n\t<li><strong>Clear configured settings</strong></li>\r\n</ol>\r\n\r\n<h3>1. Register username and email address</h3>\r\n\r\n<p>Git tracks who made changes. To track change history with editor information, you need to register your <strong>username</strong> and <strong>email address</strong> first before using Git.</p>\r\n\r\n<p>To register a username, type and run the following code in your command prompt.</p>\r\n\r\n<pre>\r\n<code>$ git config --global user.name [your username]</code></pre>\r\n\r\n<p>To register an email address, run the following code.</p>\r\n\r\n<pre>\r\n<code>$ git config --global user.email [your email address]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>The &quot;--global&quot; option is to apply the&nbsp;settings to&nbsp;the user of the&nbsp;computer. If you don&#39;t use the option, the settings are registered only to the Local Repository you are working on.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>2. Register a text editor</h3>\r\n\r\n<p>When hitting Git commit, you need to add notes in the text editor. The default text editor is normally&nbsp;vim, however, using a more advanced text editor increases your productivity. Some text editors can be integrated with GitHub to build more seamless operations.</p>\r\n\r\n<p>To register your text editor, run the following command.</p>\r\n\r\n<pre>\r\n<code>$ git config --global core.editor “[editor path] --wait”</code></pre>\r\n\r\n<p>In this course, we&#39;ll use Visual Studio Code (VSC).&nbsp;&ldquo;<strong>code</strong>&rdquo; is the editor path of&nbsp;VSC.&nbsp;To use the path, it also needs to be registered on your computer when installing VSC.</p>\r\n\r\n<h3>3. Check user settings</h3>\r\n\r\n<p>&nbsp;To confirm the setting, you need to run the following code.</p>\r\n\r\n<pre>\r\n<code>$ git config --list\r\n</code></pre>\r\n\r\n<h3>4. Unset user settings</h3>\r\n\r\n<p>The settings you made can be modified. Use the --<strong>unset</strong> option to clear your settings, and register new settings. For example, if you want to change your username in the Git configuration, run the following code to unset your username.</p>\r\n\r\n<pre>\r\n<code>$ git config --global —unset user.name</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Register your username and email address</p>\r\n\r\n<p>To register user name and email address, run the following code. Using <em>bloovee</em> account as an example.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git config --global user.name bloovee\r\n$ git config --global user.email bloovee@email.com</code></pre>\r\n\r\n<p>You can see your username and email address are successfully registered by running the <strong>$ git config --list</strong> command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git config --list</code></pre>\r\n\r\n<p>You&rsquo;ll see the status of username and email setting like the one below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>user.name=bloovee\r\nuser.email=bloovee@email.com\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Register your text editor</p>\r\n\r\n<p>Next, register your text editor. In this case, registering Visual Studio Code (VSC). &quot;code&quot; is the editor path of VSC.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git config --global core.editor \"code --wait\"</code></pre>\r\n\r\n<p>Check the status by the <strong>$ git config --list</strong> command, and you&rsquo;ll see that the editor is also registered like the one below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>user.name=bloovee\r\nuser.email=bloovee@email.com\r\ncore.editor=code --wait</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Unset user settings</p>\r\n\r\n<p>Deregister username, email and text editor by runnig the following command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git config --global --unset user.name\r\n$ git config --global --unset user.email\r\n$ git config --global --unset core.editor</code></pre>\r\n\r\n<p>Check the status by the <strong>$ git config --list command</strong>, and you&rsquo;ll see that all the settings are cleared.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T12:18:20.418Z", "updated_at": "2022-03-27T12:18:20.418Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 23, "fields": {"title": "Create GitHub Account", "author": 8, "images": "media/uploads/17.svg", "categories": 4, "only_to_my_page": false, "unique_identifier": 204110131410, "meta_keywords": null, "meta_description": null, "content": "<p>The next step for the initial setup is to create an account on a remote repository service. Here we&rsquo;ll explain how to setup a GitHub account.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>1. Go to the GitHub official site and click &ldquo;Sign up&rdquo; on the top right</strong></p>\r\n\r\n<p><a href=\"https://github.com\" target=\"_blank\">https://github.com</a></p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_1.png\" target=\"_blank\"><img alt=\"IMG1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_1.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>2. Enter your email, password and username</strong></p>\r\n\r\n<p>You&rsquo;ll also need to answer some questions.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_2.png\" target=\"_blank\"><img alt=\"IMG2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_2.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>3. Verify your email account</strong></p>\r\n\r\n<p>After you register username,&nbsp;email address&nbsp;and password, a&nbsp;pass code will be sent to your email address. You will need to enter the pass code on the site.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_3.png\" target=\"_blank\"><img alt=\"IMG3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_3.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>4. Choose your account plan</strong></p>\r\n\r\n<p>Usually, the free plan is enough for learning purposes.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_4.png\" target=\"_blank\"><img alt=\"IMG5\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_4.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>5. Optional: set up your user icon</strong></p>\r\n\r\n<p>User icon is auto-generated as an initial setting. You can replace it with your own icon or picture. To set up your user icon,&nbsp;</p>\r\n\r\n<p>&mdash; select <strong>+</strong> on the menu bar on top</p>\r\n\r\n<p>&mdash; select <strong>Settings</strong></p>\r\n\r\n<p>&mdash; select <strong>Profiles</strong></p>\r\n\r\n<p>&mdash; select <strong>Edit</strong> and click&nbsp;the <strong>Upload a photo</strong> button</p>\r\n\r\n<p>&mdash; select an image from your computer to upload</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_5.png\" target=\"_blank\"><img alt=\"IMG5\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_5.png\" /></a></p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_6.png\" target=\"_blank\"><img alt=\"IMG6\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-14-10_CreateGitHubAccount_IMG_6.png\" /></a></p>\r\n\r\n<p>It may take a few minutes to replace the icon images.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T12:19:43.742Z", "updated_at": "2022-03-27T12:19:43.742Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 24, "fields": {"title": "GitHub Access Authentication Settings", "author": 8, "images": "media/uploads/18.svg", "categories": 4, "only_to_my_page": false, "unique_identifier": 204110131510, "meta_keywords": null, "meta_description": null, "content": "<p>You can access remote repositories on GitHub from the command line in two ways: <strong>HTTPS</strong> and <strong>SSH</strong>. When you clone the repository or establish remote settings, you can choose the method of authentication by your URL choice. Git provides different URLs of a remote repository for HTTPS and SSH.</p>\r\n\r\n<h3><strong>HTTPS</strong></h3>\r\n\r\n<p>HTTPS uses username and <strong>PAT (Personal Access Token)</strong> as an account verification approach. Previously, we used GitHub password instead of PAT. To enhance security, GitHub introduced PAT. You need to generate PAT priort to using HTTPS. HTTPS is considered faster than SSH and you can work with all repositories on GitHub over HTTPS usually, even if you are behind a firewall or proxy. The way to generate PAT is explained on&nbsp;the next page.</p>\r\n\r\n<h3><strong>SSH</strong></h3>\r\n\r\n<p>SSH uses <strong>a pair of secret key and public key</strong>. You need to generate a key pair and upload the public key onto the GitHub account site. SSH can be slower than HTTPS, however, you can add several settings using the&nbsp;config file. Firewalls and proxys might refuse to allow SSH connections. In that case, you need to add proxy&nbsp;server settings in the Git system. The way to add SSH settings in GitHub is explained later.</p>", "created_at": "2022-03-27T12:20:56.945Z", "updated_at": "2022-03-27T12:20:56.945Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 25, "fields": {"title": "Generating PAT (Personal Access Token)", "author": 8, "images": "media/uploads/19.svg", "categories": 4, "only_to_my_page": false, "unique_identifier": 204110131610, "meta_keywords": null, "meta_description": null, "content": "<p>In order to establish HTTPS connection, you&rsquo;ll need PAT (Personal Access Token).</p>\r\n\r\n<p>Here we&rsquo;ll explain how to set up PAT.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>1. Log into GitHub and go to user settings</strong></p>\r\n\r\n<p>Go to GitHub website, click your icon and press the Settings button.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_1.png\" target=\"_blank\"><img alt=\"IMG1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_1.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>2. Move to Developer Settings page</strong></p>\r\n\r\n<p>Go to the the bottom of the page and select <strong>Developer settings</strong></p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_2.png\" target=\"_blank\"><img alt=\"IMG2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_2.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>3. Generate a new token</strong></p>\r\n\r\n<p>Select <strong>Personal access tokens</strong> and press the<strong> Generate new token button.</strong></p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_3.png\"><img alt=\"IMG3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_3.png\" /></a></p>\r\n\r\n<p>Add <strong>Note</strong> (describe what the token is for?) and set <strong>Expiration</strong>. After the&nbsp;token is expired, you need to generate another&nbsp;token.</p>\r\n\r\n<p>In the <strong>Select scopes</strong> section, you need to check <strong>repo</strong> to get access to your private remote repositories. You can add other scopes later when&nbsp;required.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_4.png\" target=\"_blank\"><img alt=\"IMG4\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_4.png\" /></a></p>\r\n\r\n<p>Press the <strong>Generate token</strong> button.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_5.png\" target=\"_blank\"><img alt=\"IMG5\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_5.png\" /></a></p>\r\n\r\n<p>When a new token is successfully generated, you&rsquo;ll see your PAT. Make sure you&rsquo;ll copy it and save it somewhere as it won&#39;t be shown again.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_6.png\" target=\"_blank\"><img alt=\"IMG6\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_6.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>4. Prepare for HTTPS connection</strong></p>\r\n\r\n<p>To establish HTTPS connections going forward, go to your repository on GitHub and press the&nbsp;<strong>Code</strong> button. Make sure to select the&nbsp;<strong>HTTPS</strong> tab to get the&nbsp;URL for HTTPS. (the URL for SSH is different)</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_7.png\" target=\"_blank\"><img alt=\"IMG7\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-16-10_GeneratingPAT(PersonalAccessToken)_IMG_7.png\" /></a></p>\r\n\r\n<p>When you clone, push or pull, you&rsquo;ll be asked your username and password. You need to use PAT instead of GitHub password. Previously, it was GitHub password, however, GitHub changed the rule to strengthen security level. How to establish HTTPS connection will be explained in the later chapters along with the key git commands: <strong>$ git clone</strong>, <strong>$ git remote</strong>, <strong>$ git push </strong>and <strong>$ git pull</strong>.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T12:22:30.686Z", "updated_at": "2022-03-27T12:22:30.686Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 26, "fields": {"title": "GitHub SSH Setup", "author": 8, "images": "media/uploads/20.svg", "categories": 4, "only_to_my_page": false, "unique_identifier": 204110131710, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;To establish SSH connection, you need to do the following four steps</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>1. Generate an SSH key pair</strong></p>\r\n\r\n<p>&nbsp;By running the following command, a key pair (secret key and public key) is generated.&nbsp;</p>\r\n\r\n<pre>\r\n<code>$ ssh-keygen -t rsa -C “your email address”</code></pre>\r\n\r\n<p>When running the command, you&rsquo;ll be asked to set passphrase. Type your passphrase twice. Save the passphrase as the passphrase is used when you establish ssh connection.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p><strong>-t option</strong> is to set security type. Default is <strong>rsa</strong>.</p>\r\n\r\n<p><strong>-C option</strong> is to overwrite a comment in the key. As the default comment is username@hostname, it is good to overwrite to avoid disclosing your hostname. Typically, email address is used for the comment.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>2. Copy the public key</strong></p>\r\n\r\n<p>&nbsp;For Mac, show public key content by running the <strong>$ cat</strong> command. For windows, you can use the <strong>$ type</strong> command.</p>\r\n\r\n<pre>\r\n<code>$ cat file_path</code></pre>\r\n\r\n<p>&nbsp;Copy the public key infomation (begining with ssh-rsa and ending with your email address)</p>\r\n\r\n<p>&nbsp;You can use the <strong>$ pbcopy</strong> command for Mac or the <strong>$ clip </strong>command for windows to directly copy the content of the file.</p>\r\n\r\n<pre>\r\n<code>$ pbcopy file_path</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>3. Upload the public key to GitHub</strong></p>\r\n\r\n<p>You need to upload the copied public key to GitHub account setting page by conducting the following actions.</p>\r\n\r\n<p>&mdash; Go to the <strong>GitHub website</strong></p>\r\n\r\n<p>&mdash; Click <strong>your icon</strong></p>\r\n\r\n<p>&mdash; Press the&nbsp;<strong>Settings </strong>button</p>\r\n\r\n<p>&mdash; Select <strong>SSH and GPG keys </strong>on the left side bar</p>\r\n\r\n<p>&mdash; Press <strong>New SSH key</strong> button</p>\r\n\r\n<p>&mdash; Fill <strong>title </strong>name (any name) and paste the <strong>public key</strong> information</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>4. Test connection with GitHub</strong></p>\r\n\r\n<p>&nbsp;Run the following command and type your passphrase.</p>\r\n\r\n<pre>\r\n<code>$ ssh -T git@github.com</code></pre>\r\n\r\n<p>After entering the&nbsp;passphrase, you can see a&nbsp;message confirming&nbsp;that you&rsquo;ve been&nbsp;successfully authenticated</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Generate an SSH key pair</p>\r\n\r\n<p>Run the <strong>$ ssh-keygen</strong> command</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ ssh-keygen -t rsa -C \"bloovee@example.com\"</code></pre>\r\n\r\n<p>After running the command, you&rsquo;ll be asked the file path to save the key like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Generating public/private rsa key pair.\r\nEnter file in which to save the key (/Users/bloovee/.ssh/id_rsa):\r\n</code></pre>\r\n\r\n<p>Hit the return key&nbsp;(typicaly, it&#39;s saved under the&nbsp;<strong><em>.ssh</em></strong> directory in&nbsp;the indication&nbsp;above).</p>\r\n\r\n<p>Next, you&rsquo;ll be asked to enter a&nbsp;passphrase like below. The&nbsp;passphrase is a&nbsp;password to confirm that the key is owned by you when establishing ssh connection. Ensure that you&rsquo;ll type the same passphrase twice and save&nbsp;it somewhere for future use.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/Interactive_icon_blue.svg\" />&nbsp;Command Line - INTERACTIVE</p>\r\n\r\n<pre>\r\n<code>Enter passphrase (empty for no passphrase): TYPE YOUR PASSPHRASE\r\nEnter same passphrase again: TYPE YOUR PASSPHRASE</code></pre>\r\n\r\n<p>Once the passphrase is set, a key pair is saved under the file path displayed. You&#39;ll see the following response in your command line window.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Your identification has been saved in /Users/bloovee/.ssh/id_rsa.\r\nYour public key has been saved in /Users/bloovee/.ssh/id_rsa.pub.\r\nThe key fingerprint is:\r\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx bloovee@example.com\r\nThe key's randomart image is:\r\n+---[RSA 3072]----+\r\n|     ooo   . =*O=|\r\n|     .. + o =.O+=|\r\n|    E  . + o.= oo|\r\n         :\r\n</code></pre>\r\n\r\n<p>You can confirm that the two files are generated in the <strong>.ssh</strong> directory under your home directory.&nbsp;<strong>.ssh</strong> directory is a hidden directory. If you cannot see it, you need to make hidden directories and files visible by pressing <strong>SHIFT </strong>+<strong> Command </strong>+ <strong>. (period)</strong>.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Copy the public key</p>\r\n\r\n<p>By running the <strong>$ cat </strong>command with the file path of the public key, the public key information is displayed (starting with <em>ssh-rsa</em> and ending with the&nbsp;email address set when you generated the key).</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ cat /Users/bloovee/.ssh/id_rsa.pub\r\n</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>ssh-rsa xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxbloovee@example.com\r\n</code></pre>\r\n\r\n<p>Copy the entire texts and go to the next step. Instead of the <strong>$ cat </strong>command, you can also use the <strong>$ pbcopy</strong> command to directly copy the contents without displaying them.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ pbcopy &lt; /Users/bloovee/.ssh/id_rsa.pub\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Upload the public key to GitHub</p>\r\n\r\n<p>Go to the GitHub website, click <strong>your icon</strong> and press the <strong>Settings</strong> button</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-17-10_GitHubSSHSetup_IMG_1.png\" target=\"_blank\"><img alt=\"IMG1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-17-10_GitHubSSHSetup_IMG_1.png\" /></a></p>\r\n\r\n<p>Select the <strong>SSH and GPG keys</strong> on the left side bar</p>\r\n\r\n<p>Press the <strong>New SSH key</strong> button</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-17-10_GitHubSSHSetup_IMG_2.png\" target=\"_blank\"><img alt=\"IMG2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-17-10_GitHubSSHSetup_IMG_2.png\" /></a></p>\r\n\r\n<p>Fill title name (any name) in the <strong>Title</strong> field&nbsp;and paste the public key information in the <strong>Key</strong> field.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-17-10_GitHubSSHSetup_IMG_3.png\" target=\"_blank\"><img alt=\"IMG3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-17-10_GitHubSSHSetup_IMG_3.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. Test connection with GitHub</p>\r\n\r\n<p>&nbsp;Run the&nbsp;<strong>$ ssh</strong> command with the GitHub url&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ ssh -T git@github.com</code></pre>\r\n\r\n<p>When running the command, you&#39;ll be asked a&nbsp;passphrase. Type your passphrase</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/Interactive_icon_blue.svg\" />&nbsp;Command Line - INTERACTIVE</p>\r\n\r\n<pre>\r\n<code>Enter passphrase for key '/Users/bloovee/.ssh/id_rsa': TYPE YOUR PASSPHRASE</code></pre>\r\n\r\n<p>After entering the passphrase, you can see a message confirming&nbsp;that you&rsquo;ve been&nbsp;successfully authenticated.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Hi bloovee! You've successfully authenticated, but GitHub does not provide shell access.\r\n</code></pre>\r\n\r\n<p>You are ready to access to GitHub by SSH.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>To establish SSH connections going forward, go to your repository on GitHub and press the <strong>Code</strong> button. Make sure to select the <strong>SSH</strong> tab to get the URL for SSH. The&nbsp;URL for HTTPS is different. More details will be provided in the later chapters.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-17-10_GitHubSSHSetup_IMG_4.png\" target=\"_blank\"><img alt=\"IMG4\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-13-17-10_GitHubSSHSetup_IMG_4.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T12:23:41.102Z", "updated_at": "2022-03-27T12:23:41.102Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 27, "fields": {"title": "Chapter 4. Launch Git Project", "author": 8, "images": "media/uploads/21.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110141010, "meta_keywords": null, "meta_description": null, "content": "<p>In this chapter, we&rsquo;ll explain how to launch a Git project. Topics covered in this chapter are the following</p>\r\n\r\n<p>TOPICS</p>\r\n\r\n<ol>\r\n\t<li><strong>Three Cases To Launch Git Project</strong></li>\r\n\t<li><strong>Key Steps To Launch Git Project As Project Initiator</strong></li>\r\n\t<li><strong>Create Local Repository &mdash; Git Init</strong></li>\r\n\t<li><strong>Making The First Commit</strong></li>\r\n\t<li><strong>.gitignore File</strong></li>\r\n\t<li><strong>Set UP Remote Repository&nbsp;&mdash; Create Repository And Grant Access</strong></li>\r\n\t<li><strong>Link Remote Repository With Local Repository &mdash; Git Remote Add</strong></li>\r\n\t<li><strong>Upload Local Repository To Remote Repository &mdash; Git Push</strong></li>\r\n\t<li><strong>How To Work With Remote Repository When Launching Project</strong></li>\r\n\t<li><strong>Case 1. Create Own Repository And Share It With Others</strong></li>\r\n\t<li><strong>Case 2. Get Access To Others&rsquo; Remote Repository As Collaborator</strong></li>\r\n\t<li><strong>Git Clone</strong></li>\r\n\t<li><strong>Case 3. Create Replica Of Remote Repository And Bring It To Local Computer</strong></li>\r\n\t<li><strong>Fork vs. Clone</strong></li>\r\n</ol>\r\n\r\n<p>To start learning, go to the next page.</p>", "created_at": "2022-03-27T13:05:22.893Z", "updated_at": "2022-03-27T13:05:22.894Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 28, "fields": {"title": "Three Cases To Launch Git Project", "author": 8, "images": "media/uploads/22.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110141110, "meta_keywords": null, "meta_description": null, "content": "<p><strong>English To Be Reviewed Again</strong></p>\r\n\r\n<p>Typically, there are&nbsp;three cases to launch a Git project depending on who initiates the project and becomes the owner of the Remote Repository.</p>\r\n\r\n<p>Three Cases of a Git Project Launch</p>\r\n\r\n<p><strong>Case 1.</strong> <strong>Project initiator:</strong> initiates&nbsp;a Git project on the local computer by creating a Local Repository,&nbsp;and set up a Remote Repository to share the project files</p>\r\n\r\n<p><strong>Case 2. Project member:</strong>&nbsp;participates in&nbsp;a Git project through a&nbsp;Remote Repository on GitHub (being a&nbsp;collaobrator of the Remote Repository)</p>\r\n\r\n<p><strong>Case 3.</strong>&nbsp;<strong>Non-project member:&nbsp;</strong>launches a project leveraging existing code in a Remote Repository on GitHub (no collaborator access to the original Remote Repository)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>Case 1.&nbsp;Project initiator (Owner of the Remote Repository)</strong></h2>\r\n\r\n<p>In this case, you launch a new Git project from your local computer by initiating a Local Repository yourself. As the project initiator, you also set up a Remote Repository for the project to share the project files. There are four key steps until the project files are ready to be shared on GitHub.</p>\r\n\r\n<h3><strong>Step 1. Create a Local Repository</strong></h3>\r\n\r\n<p>As a project initiator, first thing you need to do is to initiate a Local Repository for the project. <strong>$ git init</strong> is the&nbsp;command to create a new Local Repository.</p>\r\n\r\n<h3><strong>Step 2. Work with a Local Repository</strong></h3>\r\n\r\n<p>Until you start to store or share files through Remote Repositories on&nbsp;GitGHub, you&nbsp;work&nbsp;on the project&nbsp;with the Git system on your local computer. We&#39;ll explain about typical workflow of Git local operations in the next chapters (Chapter 5: Edit &amp; Commit, Chapter 6: Work with Branches). In this chapter, we&#39;ll cover this step&nbsp;briefly.</p>\r\n\r\n<h3><strong>Step 3. Set up a Remote Repository</strong></h3>\r\n\r\n<p>When&nbsp;you want to store and share your project files on GitHub, you need to create a new Remote Repository on GitHub. Creating a Remote Repository is done through the GitHub website. You can also invite contributors for the project to give&nbsp;them access to your Remote Repository.</p>\r\n\r\n<h3><strong>Step 4. Start sharing project files</strong></h3>\r\n\r\n<p>In this step, we aim to make project files shared&nbsp;through the Remote Repository.&nbsp;Before uploading your project files, you need to establish a link between your Local Repository and your Remote Repository by running the <strong>$ git remote add</strong> command. To upload the committed files, run the <strong>$ git push</strong> command. When the files are successfully uploaded, they are ready to be shared with others.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2><strong>Case 2. Project member (Collaborator of the Remote Repository)</strong></h2>\r\n\r\n<p>In this case, project files and repositories are already prepared by someone. What you need to do to participate in the project are the following two steps.</p>\r\n\r\n<h3><strong>Step 1. Get access to the Remote Repository</strong></h3>\r\n\r\n<p>If your team member or your company have a Remote Repository for the project, you need to get access to the Remote Repository where you can access the project files.</p>\r\n\r\n<h3><strong>Step 2. Clone the Remote Repository</strong></h3>\r\n\r\n<p>Once you get access to the Remote Repository, you can start to download project files by running the <strong>$ git clone</strong> command. The $ git clone command brings the project files onto your local computer and creates&nbsp;the&nbsp;Local Repository. The command also establishes a link between the Local Repository and the Remote Repository so that you can start to interact with the Remote Repository from the command line on your computer.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<h2><strong>Case 3: Non-project member&nbsp;(no collaborator access to the original Remote Repository)</strong></h2>\r\n\r\n<p>In this case, original project files and repositories are already available on the GitHub platform, however, you are not invited to the project as a collaborator. What you need to do to&nbsp;launch a new project based on the existing project files are the following two steps</p>\r\n\r\n<h3>Step 1. <strong>Create a replica of an existing Remote Repository: Fork</strong></h3>\r\n\r\n<p>As GitHub is an open platform, you can access many repositories created by someone else. You may want to leverage an existing repository to start your new project. In this case, you need to <strong>Fork</strong> the existing repository. Fork creates a replica of the existing repository under your GitHub account; the forked repository&#39;s owner becomes&nbsp;you.</p>\r\n\r\n<h3>Step 2. <strong>Clone the Remote Repository</strong></h3>\r\n\r\n<p>As the same as Case 2, you can bring the project files to your local computer by running the $ git clone command.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:06:32.785Z", "updated_at": "2022-03-27T13:06:32.785Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 29, "fields": {"title": "Key Steps To Launch Git Project As Project Initiator", "author": 8, "images": "media/uploads/23.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110141210, "meta_keywords": null, "meta_description": null, "content": "<p><strong>English To Be Reviewed Again</strong></p>\r\n\r\n<p>On this page onwards, we&#39;ll explain about Case 1 on the previou page first as Case 1&nbsp;is the basis&nbsp;for Case 2 and Case 3. As explained, Case 1 is the case for a project initiator who is launching a Git project on&nbsp;the local computer. The target of a Git&nbsp;project launch in Case 1 is to establish the situation where the project files are shared via a GitHub Remote Repository so that developers in Case 2 and Case 3 can access to&nbsp;the project files.</p>\r\n\r\n<p>On the following pages, we&#39;ll explain about the four key steps for Case 1 with the Git key commands.</p>\r\n\r\n<h3><strong>Step 1. Create a Local Repository</strong></h3>\r\n\r\n<ul>\r\n\t<li>By running the <strong>$ git init </strong>command, create a Local Repository in&nbsp;a&nbsp;project directory on the local computer</li>\r\n</ul>\r\n\r\n<h3><strong>Step 2. Work with a Local Repository</strong></h3>\r\n\r\n<ul>\r\n\t<li>Edit project files and make a commit: the four basic key commands (<strong>$ git add</strong>, <strong>$ git commit</strong>, <strong>$ git status</strong>, <strong>$ git log</strong>)</li>\r\n\t<li>Utilize <strong>.gitignore</strong> file: a list of files to be ignored by the Git system)</li>\r\n</ul>\r\n\r\n<h3><strong>Step 3. Set up a Remote Repository</strong></h3>\r\n\r\n<ul>\r\n\t<li>Create a new repository on GitHub</li>\r\n\t<li>Invite collaborators to the Remote Repository on GitHub</li>\r\n</ul>\r\n\r\n<h3><strong>Step 4. Start sharing project files</strong></h3>\r\n\r\n<ul>\r\n\t<li>Establish a link between Remote and Local Repositories by registering a URL of the Remote Repository in the Local Repository: <strong>$ git remote add</strong></li>\r\n\t<li>Upload project files: <strong>$ git push</strong></li>\r\n</ul>\r\n\r\n<p>The first two steps are done on the local computer. If you want to understand the Git operations on the local environment first, you can go through the first two steps and go to Chapter 5 and Chapter 6 to learn more details about the Git local operations.&nbsp;</p>", "created_at": "2022-03-27T13:07:39.633Z", "updated_at": "2022-03-27T13:07:39.633Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 30, "fields": {"title": "Create Local Repository — Git Init", "author": 8, "images": "media/uploads/24.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110141310, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;The first&nbsp;step&nbsp;to launch a Git project is run the <strong>$ git init</strong> command. The command will create a Local Repository in the current directory.</p>\r\n\r\n<p>This command doesn&#39;t require any options or parameters. You need to simply run the following command in the directory where you want to generate a new project.</p>\r\n\r\n<pre>\r\n<code>$ git init</code></pre>\r\n\r\n<p>After running the command, a Local Repository is created under a hidden directory named&nbsp;.<strong>git</strong>. If you cannot see it, you need to make hidden directories and files visible by pressing&nbsp;<strong>SHIFT&nbsp;</strong>+<strong>&nbsp;Command&nbsp;</strong>+&nbsp;<strong>. (period)</strong>.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Prepare a directory and a file for this new git project</p>\r\n\r\n<p>To launch a project, create a project directory and a file for a practice purpose. Here we&#39;ll create a&nbsp;<em><strong>git_practice </strong></em>directory and <strong><em>git_practice.html</em></strong> file&nbsp;</p>\r\n\r\n<p>Run the following command to create them.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ mkdir git_practice\r\n$ cd git_practice\r\n$ touch git_practice.html\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Create a Local Repository</p>\r\n\r\n<p>To create a Local Repository, run the <strong>$ git init </strong>command in&nbsp;the&nbsp;<em>git_practice</em>&nbsp;directory</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git init\r\n</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Initialized empty Git repository in /Users/bloovee/Desktop/git_practice/.git/\r\n</code></pre>\r\n\r\n<p>After running the command, you can see one hidden directory&nbsp;named <strong>.git</strong> is created. This is the place where the Local Repository is created.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-13-10_CreateALocalRepository--GitInit_IMG_1.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:09:19.865Z", "updated_at": "2022-03-27T13:09:19.866Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 31, "fields": {"title": "Making The First Commit", "author": 8, "images": "media/uploads/25.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110141410, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;Although we&rsquo;ll provide more details about Git operations on the local computer in the next chapter, in this chapter, we&rsquo;ll briefly explain the four key commands that will help launch&nbsp;a project and make the first commit.</p>\r\n\r\n<ul>\r\n\t<li><strong>$ git add</strong>: with this command, you can add files to the Staging Area, where you can prepare and check files to register in your local repository.&nbsp;</li>\r\n\t<li><strong>$ git commit</strong>: with this command, you can register files in your Local Repository. Once the files are registered by this&nbsp;commit command, you can retrieve the saved version of the set of files anytime.</li>\r\n\t<li><strong>$ git status</strong>: with this command, you can see the status of the Working Tree and the Staging Area. This status lets you see which changes have been staged, which haven&#39;t, and which files aren&#39;t being tracked by Git.&nbsp;</li>\r\n\t<li><strong>$ git log</strong>: with this command, you can see commit histories in a local repository.&nbsp;</li>\r\n</ul>\r\n\r\n<p>The following practice helps you understand the four key commands.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Prepare a file for this practice</p>\r\n\r\n<p>On the previous page, we already set up a Local Repository, however, nothing is recorded in the repository yet.&nbsp;</p>\r\n\r\n<p>Here, we&rsquo;ll make a record of the html file (<em>git_practice.html</em>) created on&nbsp;the previous page. As we haven&#39;t edited the file yet, let&#39;s prepare a&nbsp;dummy code. We&#39;ll also use this&nbsp;file in the following pages.</p>\r\n\r\n<p>Open the file with a text editor and edit the html file like the following, and save the file.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!doctype html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n &lt;style&gt;\r\n h1 {\r\n  color:red;\r\n  font-size:80px\r\n }\r\n &lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n &lt;h1&gt;Hello World!&lt;/h1&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>2. Check how the file is tracked by the Git system</p>\r\n\r\n<p>Although the file is saved under the&nbsp;<em>git_practice</em> directory. It is still NOT recorded under the Git repository yet. To check the status, you can run the <strong>$ git log</strong> command.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code> $ git log </code></pre>\r\n\r\n<p>You can see the message explaining that nothing has been committed yet like the one below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>fatal: your current branch 'master' does not have any commits yet\r\nAlso, if you run the $ git status command, you can see that there is an untracked files. \r\n</code></pre>\r\n\r\n<p>Also, if you run the <strong>$ git status</strong> command, you can see that there are&nbsp;untracked files.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git status </code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>No commits yet\r\nUntracked files:\r\n  (use \"git add ...\" to include in what will be committed)\r\n        .gitignore\r\n        git_practice.html\r\nnothing added to commit but untracked files present (use \"git add\" to track)</code></pre>\r\n\r\n<p>This means the file exists&nbsp;in the Working Tree, however, it&#39;s not registered in the Local Repository or the Staging Area.&nbsp;</p>\r\n\r\n<p>3. Register files in&nbsp;the Staging Area</p>\r\n\r\n<p>To register the file in&nbsp;the Local Repository, first&nbsp;run the <strong>$ git add</strong> command. Make sure you are in the&nbsp;<em>git_practice </em>directory in your command line, and use &quot;.&quot; to add all the files under the Current directory.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git add .</code></pre>\r\n\r\n<p>At this stage, the files are not registered in the Local Repository yet. Check how the file is tracked by the Git system by running the <strong>$ git status</strong> command.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git status</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>On branch master\r\nNo commits yet\r\nChanges to be committed:\r\n  (use \"git rm --cached ...\" to unstage)\r\n        new file:   .gitignore\r\n        new file:   git_practice.html\r\n</code></pre>\r\n\r\n<p>4. Register files in&nbsp;the Local Repository</p>\r\n\r\n<p>Run the <strong>$ git commit -m <em>&ldquo;the first commit&rdquo;</em></strong> command to register the files in the Local Repository. You can add comments to the commit&nbsp;using the&nbsp;<strong>-m</strong>&nbsp;option.&nbsp;</p>\r\n\r\n<p>If you don&rsquo;t put this&nbsp;option, a text editor is launched to add comments. In that case, you need to type your comments in&nbsp;the text editor and save it. After closing the editor, you can come back to the command line.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -m “the first commit”</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>[master (root-commit) af14aa0] the first commit\r\n 2 files changed, 10 insertions(+)\r\n create mode 100644 .gitignore\r\n create mode 100644 git_practice.html\r\n</code></pre>\r\n\r\n<p>Run the&nbsp;<strong>$ git log</strong> command again to check the commit status. Now you can see that the html file is registered in the Local Repository.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git log</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>commit af14aa0387171f8b70d06cb31f84e57648ae2c78 (HEAD -&gt; master)\r\nAuthor: bloovee &lt;bloovee@example.com&gt;\r\nDate:   XXXXXXXXX\r\n\r\n    the first commit</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>TIPS</p>\r\n\r\n<p>You may not&nbsp;want Git system to track all your files in the project directory.&nbsp;<strong>.gitignore file</strong>&nbsp;is a useful tool. The documents or directories listed in the file will be ignored by the Git system. We&#39;ll explain about .gitignore file in the next page.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:10:28.274Z", "updated_at": "2022-03-27T13:10:28.274Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 32, "fields": {"title": ".gitignore File", "author": 8, "images": "media/uploads/26.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110141510, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;One of the key values of Git is sharing files. There are files or directories which you may not want to share or you don&#39;t need to share. For example, environment files may contain a password. If you keep it in your project directory, Git detects the file and it will be stored in the remote repository when you push the project directory into the remote repository. If you are a Mac user, you may see the&nbsp;<em>.DS_Store</em> file as a hidden file in each directory. This file is used&nbsp;to store custom attributes of the folder on your computer, such as the position of icons or the choice of a background image. This file is also not necessary for a coding project and doesn&rsquo;t require sharing&nbsp;with other developers.</p>\r\n\r\n<p>To exclude those files from the Git version control system, Git uses the&nbsp;<strong>.gitignore</strong> file. The files and directories written in the&nbsp;.gitignore file are excluded from&nbsp;the Git version control system.</p>\r\n\r\n<p>Besides the .<em>env</em> file and OS specific files, log files and package files are also typically written&nbsp;in the&nbsp;.gitignore file.</p>\r\n\r\n<p>Executing this is very simple. You just need to do the following actions.</p>\r\n\r\n<ol>\r\n\t<li>Create <strong>.gitignore</strong> file right under the project main directory (the same level as <strong>.git</strong> directory)</li>\r\n\t<li>In the <strong>.gitignore</strong> file, list up files or directories you want to exclude from the Git version control system, and save the <strong>.gitignore</strong> file</li>\r\n</ol>\r\n\r\n<p>To understand the concept more clearly, please go through the practice section below.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Prepare a test file</p>\r\n\r\n<p>Create <em>.env</em> file and run the&nbsp;<strong>$ git status&nbsp;</strong>command. The <strong>$ git status</strong> command gives you the status of the files which are recognized by the Git system.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ touch .env\r\n$ git status\r\n</code></pre>\r\n\r\n<p>You can see that the&nbsp;<em>.env</em> file is recognized by the Git system like below. The response says &quot;untracked&quot; but these files are already recognized by the Git version control system. The status is telling that those files are not added to the Staging Area, which will be explained in more detail later.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>On branch master\r\nNo commits yet\r\nUntracked files:\r\n  (use \"git add ...\" to include in what will be committed)\r\n\t.DS_Store\r\n\t.env\r\n\tgit_practice.html\r\nnothing added to commit but untracked files present (use \"git add\" to track)\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Create and edit the .gitignore file</p>\r\n\r\n<p>Create the&nbsp;<strong>.gitignore</strong> file and launch a text editor. The first command is used to create .gitignore file. The <strong>$ code .</strong> command is used to launch <em>Visual Studio Code </em>from the terminal.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ touch .gitignore\r\n$ code .\r\n</code></pre>\r\n\r\n<p>Edit the <strong>.gitignore</strong> file like below (simply add the 2 lines: <em>.env</em> and <em>.DS_Store</em>.)&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>.env\r\n.DS_Store\r\n</code></pre>\r\n\r\n<p>Make sure that you&nbsp;save the file.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Check that the selected files are ignored&nbsp;</p>\r\n\r\n<p>Run the <strong>$ git status</strong> command to check the files recognized by the Git system</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git status\r\n</code></pre>\r\n\r\n<p>You can see that the&nbsp;<em>.env file</em> and <em>.DS_Store</em> file are no longer recognized by the Git system as shown below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>On branch master\r\nNo commits yet\r\nUntracked files:\r\n  (use \"git add ...\" to include in what will be committed)\r\n\t.gitignore\r\n\tgit_practice.html\r\nnothing added to commit but untracked files present (use \"git add\" to track)\r\n</code></pre>\r\n\r\n<p>Delete the&nbsp;<em>.env file</em> as it will not be used in the following sections.</p>\r\n\r\n<p>(As the .DS_Store file is an auto generated file, you don&rsquo;t need to delete it. Even if you delete it, it will be automatically generated again.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>TIPS</p>\r\n\r\n<p>There are some useful writing rules.</p>\r\n\r\n<p>If you want to exclude all the files with specific extension, you can put <strong>*</strong> right before the extension like <em>*exe</em>.&nbsp;</p>\r\n\r\n<p>If you want to exclude all the files under one directory, you can put <strong>/</strong> right after the directory name like <em>bin/</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:11:30.374Z", "updated_at": "2022-03-27T13:11:30.374Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 33, "fields": {"title": "Set UP Remote Repository — Create Repository And Grant Access", "author": 8, "images": "media/uploads/27.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110141610, "meta_keywords": null, "meta_description": null, "content": "<p><strong>English To Be Reviewed</strong></p>\r\n\r\n<p>When&nbsp;you want to store and share your project files on GitHub, you need to create a new Remote Repository on GitHub. You also need to grant&nbsp;access to the Remote Repository if you want to work with collaborators for the project.&nbsp;Creating a Remote Repository and granting access&nbsp;is done through the GitHub website. We&#39;ll explain detail steps with screenshots of the GitHub website in the Case 1&nbsp;case study later. The following is a simple explanation&nbsp;of key action items.</p>\r\n\r\n<h3><strong>1. Create Remote Repository</strong></h3>\r\n\r\n<ul>\r\n\t<li>Go to the GitHub website and sign-in to the account.</li>\r\n\t<li>On the main page, you can click right top&nbsp;<strong>+</strong>&nbsp;mark and select &ldquo;<strong>New repository</strong>&rdquo; or press the green&nbsp;<strong>New</strong>&nbsp;button on&nbsp;the left.</li>\r\n\t<li>On the &ldquo;Create a new repository&rdquo; page, you need to add a repository name, select public or private, and press the&nbsp;<strong>Create repository</strong>&nbsp;button.</li>\r\n</ul>\r\n\r\n<h3><strong>2. Grant Access to Repository</strong></h3>\r\n\r\n<ul>\r\n\t<li>Go to the&nbsp;<strong>Settings</strong>&nbsp;page and select&nbsp;<strong>Manage access</strong>. Press the&nbsp;<strong>Add people</strong>&nbsp;button.</li>\r\n\t<li>You can type the&nbsp;GitHub account or email address of the person who you want to collaborate with. If you input the&nbsp;GitHub account, the website will look&nbsp;up the existing GitHub accounts.&nbsp;</li>\r\n\t<li>When you find the&nbsp;right account, click the green button. The account owner will receive an invitation and they can decide either to accept the invitation or to decline the invitation.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:13:25.420Z", "updated_at": "2022-03-27T13:13:25.420Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 34, "fields": {"title": "Link Remote Repository With Local Repository — Git Remote Add", "author": 8, "images": "media/uploads/28.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110141710, "meta_keywords": null, "meta_description": null, "content": "<p>To upload your code from your Local Repository to your Remote Repository, first, you need to create a link between your Local Repository and a Remote Repository.&nbsp;<strong>$ git remote add </strong>is the command used to establish the link.</p>\r\n\r\n<p>For the&nbsp;URL, you can choose <strong>HTTPS</strong> or <strong>SSH</strong> depending on which protocol you want to use. You can find the URL of a Remote Repository on the &quot;<strong>&lt; &gt; Code</strong>&quot; page. Click the green Code button to see URLs like the ones below.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-18-10_LinkARemoteRepositoryWithALocalRepository%E2%80%94GitRemoteAdd_IMG_1.png\" target=\"_blank\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-18-10_LinkARemoteRepositoryWithALocalRepository%E2%80%94GitRemoteAdd_IMG_1.svg\" /></a></p>\r\n\r\n<p>The URL structures are like the examples below.&nbsp;The initial parts of URLs are different.&nbsp;However,&nbsp;the latter parts are&nbsp;the same: GitHub Account Name and Remote Repository Name.&nbsp;<strong>origin</strong> is typically used for&nbsp;the Remote Repository name.</p>\r\n\r\n<ul>\r\n\t<li><strong>HTTPS</strong>:&nbsp;https://github.com/<em>GitHub Account Name</em>/<em>Remote Repository Name</em>.git</li>\r\n\t<li><strong>SSH</strong>:&nbsp;git@github.com:<em>GitHub Account Name</em>/<em>Remote Repository Name</em>.git</li>\r\n</ul>\r\n\r\n<p>You can check the Remote Repository URL setting status by running the <strong>$ git remote -v</strong>.</p>\r\n\r\n<p>There are other <strong>$ git remote</strong> commands, which will be explained in Chapter 7 Remote Collaboration.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:14:41.963Z", "updated_at": "2022-03-27T13:14:41.963Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 35, "fields": {"title": "Upload Local Repository To Remote Repository — Git Push", "author": 8, "images": "media/uploads/29.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110141810, "meta_keywords": null, "meta_description": null, "content": "<p><strong>English To Be Reviewed Again</strong></p>\r\n\r\n<p>To share your project files through Git Remote Repositories,&nbsp;you need to upload your project directory. <strong>Push</strong> is an action used to upload your project directory or code&nbsp;from your Local Repository to a Remote Repository. <strong>$ git push</strong> is the command for&nbsp;pushing codes. When you run the command, you need to specify&nbsp;a Remote Repository name and a branch name which you want to upload.</p>\r\n\r\n<p>For a simple Git operation, you should memorize the&nbsp;<strong>$ git push origin master </strong>command.&nbsp;<strong>origin</strong> is a&nbsp;typical name for a&nbsp;remote repository.&nbsp;<strong>master</strong> is the default&nbsp;branch name. Unless you created another branch, <strong>master</strong> is the only branch.</p>\r\n\r\n<p>More details about&nbsp;the push command will be provided in Chapter 7.</p>", "created_at": "2022-03-27T13:16:04.922Z", "updated_at": "2022-03-27T13:16:04.922Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 36, "fields": {"title": "How To Work With Remote Repository When Launching Project", "author": 8, "images": "media/uploads/30.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110141910, "meta_keywords": null, "meta_description": null, "content": "<p><strong>1st paragraph English To Be Reviewed Again</strong></p>\r\n\r\n<p>From this page onwards, we&rsquo;ll explain how to work with&nbsp;a Remote Repository in a project launch context. The focuses of this page onwards are Case 2 and Case 3 for&nbsp;the project launch actions, however, we&#39;ll also cover the latter part of Case 1 to give a more comprehensive views on how the project files are shared with some case examples.</p>\r\n\r\n<h3>Different stating points</h3>\r\n\r\n<p>As explained in the beginning of this chapter, when you launch a new Git project, the&nbsp;starting point can be different depending on your situation.&nbsp;</p>\r\n\r\n<p>Here, we&rsquo;ll illustrate this with three types of developers.</p>\r\n\r\n<p><strong><em>Developer A</em>:</strong> The original initiator of the project</p>\r\n\r\n<p><em><strong>Developer B</strong>:</em> A team member (collaborator) supporting&nbsp;<em>Developer A</em>&nbsp;on&nbsp;the project</p>\r\n\r\n<p><strong><em>Developer C</em></strong>: An independent developer who wants to leverage existing codes&nbsp;to launch a new project&nbsp;</p>\r\n\r\n<p>The following explanation assumes that all developers already have a GitHub account and a Local Repository is already initiated for this project.</p>\r\n\r\n<h3><strong>Key Processes for&nbsp;<em>Developer A</em>:&nbsp;</strong></h3>\r\n\r\n<p>&nbsp; &nbsp; Create own repository and share it with others (<strong>Case 1</strong>)</p>\r\n\r\n<p>The objective of <em>Developer A</em> is to start to collaborate with <em>Developer B</em> for the project. He needs to upload his code to his Remote Repository and share it with <em>Developer B</em>.</p>\r\n\r\n<p>Here are some&nbsp;<em>Developer A&#39;s scenarios.</em></p>\r\n\r\n<p>1. <em>Developer A</em> already has some lines of code&nbsp;to initiate the project, which are already committed in the Local Repository</p>\r\n\r\n<p>2. First, <em>Developer A</em> creates a Remote Repository under his GitHub account.</p>\r\n\r\n<p>3. To upload his codes in the Local Repository, he needs to establish a link between the Local Repository and the Remote Repository by running the <strong>$ git remote add</strong> command.</p>\r\n\r\n<p>4. Once the Remote Repository and the Local Repository are linked, he can upload his code by running the <strong>$ git push </strong>command.</p>\r\n\r\n<p>5. Finally, he needs to allow <em>Developer B</em> to access his Remote Repository. The operation is made on the GitHub website.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>Key Processes for&nbsp;<em>Developer B:</em></strong></h3>\r\n\r\n<p>&nbsp; &nbsp; Get access to others&rsquo; Remote Repository as a collaborator (<strong>Case 2</strong>)</p>\r\n\r\n<p>The objective of <em>Developer B</em> is to get&nbsp;access to <em>Developer A</em>&rsquo;s Remote Repository for the project and bring the project directory to her local computer to start the project.</p>\r\n\r\n<p>1. When <em>Developer A </em>gives&nbsp;<em>Developer B </em>permission to access to his Remote Repository, an email is sent by GitHub. What <em>Developer B</em> needs to do first is to accept accessing the Remote Repository.</p>\r\n\r\n<p>2. Next, she needs to&nbsp;link the Remote Repository with her Local Repository and bring the project directory to her local computer by running the <strong>$ git clone</strong> command. After cloning the repository, she is ready to collaborate with <em>Developer A</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>Key Processes for&nbsp;<em>Developer C</em></strong></h3>\r\n\r\n<p>&nbsp; &nbsp; Create a replica of a Remote Repository and bring it to local computer (<strong>Case 3</strong>)</p>\r\n\r\n<p>The objective of <em>Developer C </em>is to launch a project based on <em>Developer A</em>&rsquo;s existing work. Here we assume that <em>Developer A</em>&rsquo;s Remote Repository is a public repository.&nbsp;</p>\r\n\r\n<p>1. The first thing&nbsp;<em>Developer C</em> needs to do is to&nbsp;<strong>Fork</strong> the Repository. Fork creates&nbsp;a replica of an existing repository, however, it is no longer linked with the original repository. Fork operation is done though the GitHub website GUI (Graphic User Interface). Once he created a new Remote Repository by Fork, the new repository is owned by him and he can freely edit the code&nbsp;in his&nbsp;repository</p>\r\n\r\n<p>2. To edit the code, he needs to bring the project directory to his local computer by running the <strong>$ git clone</strong> command</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Practice Setting</strong></p>\r\n\r\n<p>In this section, we&rsquo;ll use three GitHub accounts to make each role clear. Until the previous section, we were using the&nbsp;<em>bloovee</em> account as the default user. Please pay attention to the usernames and icons to fully understand each context.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-15-10_SetUpARemoteRepositoryAndLinkWithLocalRepository_IMG_1.svg\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-15-10_SetUpARemoteRepositoryAndLinkWithALocalRepository_IMG_1.svg\" /></a></p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:17:26.471Z", "updated_at": "2022-03-27T13:17:26.471Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 37, "fields": {"title": "Case 1. Create Own Repository And Share It With Others", "author": 8, "images": "media/uploads/31.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110142010, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;On this page, we&#39;ll explain<strong>&nbsp;</strong>Case 1. In Case 1, you are&nbsp;the owner of the Remote Repository. As the&nbsp;owner, you need to create a Remote Repository yourself and&nbsp;upload your code. You can also give access to the repository to your team members.</p>\r\n\r\n<p>There are four key steps for Case 1.</p>\r\n\r\n<ol>\r\n\t<li><strong>Create a Remote Repository</strong> under your&nbsp;GitHub account as the owner.</li>\r\n\t<li><strong>Establish a link between the Local Repository and the Remote Repository</strong> by running the <strong>$ git remote add</strong> command.</li>\r\n\t<li><strong>Upload your project directory</strong>&nbsp;by running the <strong>$ git push</strong> command.</li>\r\n\t<li><strong>Give permission </strong>to access the&nbsp;Remote Repository to&nbsp;your team members (collaborators).</li>\r\n</ol>\r\n\r\n<p>After you&nbsp;complete&nbsp;these four&nbsp;actions, collaborators will receive an invitation to access your repository, and they will be&nbsp;ready to transfer&nbsp;the code saved in&nbsp;the Remote repository to their Local Repository. The collaborator&#39;s actions will be explained in Case 2 later.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>On the previous pages, we already created a Local Repository and an html file to be managed by Git. The&nbsp;<strong>.gitignore</strong> file is also saved in the project main directory (<strong><em>git_practice</em></strong>).</p>\r\n\r\n<p>Before going through the four steps, let&#39;s check the current project directory structure. If you have the <strong>$ tree</strong> command installed onto your computer, you can run <strong>$ tree -a -L 1</strong> to check your current directory tree. If the <strong>$ tree command</strong> is not installed yet, you can simply check the directory by&nbsp;viewing&nbsp;hidden files (Press Shift + Command + Period &quot;.&quot; to show hidden files for Mac).</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ tree -a -L 1</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>.\r\n├── .DS_Store\r\n├── .env\r\n├── .git\r\n├── .gitignore\r\n└── git_practice.html\r\n</code></pre>\r\n\r\n<p>In this practice, we&rsquo;ll go through how <em>Developer A </em>can share his project directory with&nbsp;<em>Developer B </em>(sky-blue2022) via a&nbsp;GitHub Remote Repository.</p>\r\n\r\n<p>1. Create a Remote Repository under your&nbsp;GitHub account</p>\r\n\r\n<p>Go to the GitHub website and sign-in to the account.&nbsp;On the main page, you can click right top <strong>+</strong> mark and select &ldquo;<strong>New repository</strong>&rdquo; or press the green <strong>New</strong> button on&nbsp;the left.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-17-10_Case1.CreateOwnRepositoryAndShareItWithOthers_IMG_1.svg\" /></p>\r\n\r\n<p>On the &ldquo;Create a new repository&rdquo; page, you need to add a repository name, select public or private, and press the <strong>Create repository</strong> button. In this demo, we&rsquo;ll use the same name as the project.&nbsp;There are some options to create additional documents. You can skip them for this practice.</p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-17-10_Case1.CreateOwnRepositoryAndShareItWithOthers_IMG_2.svg\" /></p>\r\n\r\n<p>Once you successfully made the new Remote Repository, you can see the page like the one below. Copy the URL for the next action. You can choose HTTPS or SSH depending on which security protocol you want to use.</p>\r\n\r\n<p><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-17-10_Case1.CreateOwnRepositoryAndShareItWithOthers_IMG_3.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Establish a link between the Local Repository and the Remote Repository</p>\r\n\r\n<p>Run the following&nbsp;<strong>$ git remote</strong> command to establish a link between the Local Repository and the Remote Repository.&nbsp;<strong>origin</strong> is a standard name&nbsp;for the Remote Repository. (When you clone a Remote Repository, the default name of the Remote Repository on your local computer is also origin.) For the URL, you can use the URL from your Remote Repository.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git remote add origin https://github.com/bloovee/git_practice.git (for HTTPS)</code></pre>\r\n\r\n<p>Or</p>\r\n\r\n<pre>\r\n<code>$ git remote add origin git@github.com:bloovee/git_practice.git (for SSH)</code></pre>\r\n\r\n<p>After running the $ git remote add command, there is no command line response. To confirm what you have done, you need to&nbsp;check the Remote Repository URL status by running&nbsp;<strong>$ git remote -v</strong>.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git remote -v</code></pre>\r\n\r\n<p>For HTTPS case, you&#39;ll see the following response.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>origin  https://github.com/bloovee/git_practice.git (fetch)\r\norigin  https://github.com/bloovee/git_practice.git (push)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Upload the codes from the Local Repository to the Remote Repository</p>\r\n\r\n<p>Run the following command to upload the code from the Local Repository to the Remote Repository. The command line response will be different for&nbsp;HTTPS and SSH.&nbsp;</p>\r\n\r\n<p>In the HTTPS case, the command line will ask for a username and password to&nbsp;the GitHub account. This password that is asked for is actually not the password of the GitHub account. You need to input the PAT (Personal Acccess Token)&nbsp;generated before.&nbsp;</p>\r\n\r\n<p>In the SSH case, the command line will ask for your SSH passphrase.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git push origin master</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/Interactive_icon_blue.svg\" />&nbsp;Command Line - INTERACTIVE - HTTPS case</p>\r\n\r\n<pre>\r\n<code>Username for 'https://github.com': bloovee\r\nPassword for 'https://bloovee@github.com': ■■■■■PAT■■■■■■\r\nEnumerating objects: 4, done.\r\nCounting objects: 100% (4/4), done.\r\nDelta compression using up to 8 threads\r\nCompressing objects: 100% (3/3), done.\r\nWriting objects: 100% (4/4), 388 bytes | 194.00 KiB/s, done.\r\nTotal 4 (delta 0), reused 0 (delta 0)\r\nTo https://github.com/bloovee/git_practice.git\r\n * [new branch]      master -&gt; master</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/Interactive_icon_blue.svg\" />&nbsp;Command Line - INTERACTIVE - SSH case</p>\r\n\r\n<pre>\r\n<code>Enter passphrase for key '/Users/bloovee/.ssh/id_rsa': ■■■■■Passphrase■■■■■■\r\nEnumerating objects: 4, done.\r\nCounting objects: 100% (4/4), done.\r\nDelta compression using up to 8 threads\r\nCompressing objects: 100% (3/3), done.\r\nWriting objects: 100% (4/4), 388 bytes | 388.00 KiB/s, done.\r\nTotal 4 (delta 0), reused 0 (delta 0), pack-reused 0\r\nTo github.com:bloovee/git_practice.git\r\n * [new branch]      master -&gt; master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. Allow Developer B to access to her Remote Repository</p>\r\n\r\n<p>Managing GitHub Repository will be done on the GitHub website. Go to the <strong>Settings</strong> page and select <strong>Manage access</strong>. Press the <strong>Add people</strong> button.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-17-10_Case1.CreateOwnRepositoryAndShareItWithOthers_IMG_4.svg\" target=\"_blank\"><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-17-10_Case1.CreateOwnRepositoryAndShareItWithOthers_IMG_4.svg\" /></a></p>\r\n\r\n<p>You can type the&nbsp;GitHub account or email address of the person who you want to collaborate with. If you input the&nbsp;GitHub account, the website will look&nbsp;up the existing GitHub accounts as shown&nbsp;below.&nbsp;</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-17-10_Case1.CreateOwnRepositoryAndShareItWithOthers_IMG_5.svg\" target=\"_blank\"><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-17-10_Case1.CreateOwnRepositoryAndShareItWithOthers_IMG_5.svg\" /></a></p>\r\n\r\n<p>When you find the&nbsp;right account, click the green button. The account owner will receive an invitation and they can decide either to accept the invitation or to decline the invitation. Go to the Case 2 page to see the&nbsp;<em>Developer B</em> side of operations.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-17-10_Case1.CreateOwnRepositoryAndShareItWithOthers_IMG_5.svg\" target=\"_blank\"><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-17-10_Case1.CreateOwnRepositoryAndShareItWithOthers_IMG_6.svg\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:19:20.145Z", "updated_at": "2022-03-27T13:19:20.145Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 38, "fields": {"title": "Case 2. Get Access To Others’ Remote Repository As Collaborator", "author": 8, "images": "media/uploads/32.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110142110, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;English (red part) To Be Reviewed</strong></p>\r\n\r\n<p>On this page, we&#39;ll explain&nbsp;Case 2. In Case 2, you are a team member of a coding project.&nbsp;To start the project, you&nbsp;need to get access to another developer&#39;s Remote Repository and bring the project files onto your computer.&nbsp;</p>\r\n\r\n<p>There are two key steps for Case 2.&nbsp;</p>\r\n\r\n<ol>\r\n\t<li><strong>Obtain the Remote Repository access</strong> from the owner of the Remote Repository&nbsp;First, the owner of the Remote Repository needs to invite you to collaborate in the Remote Repository. The invitation&nbsp;will be sent to your email. By accepting the inivitaion, you&#39;ll get access to the Remote Repository.</li>\r\n\t<li><strong>Create a copy of the project files in the&nbsp;Remote Repository</strong>&nbsp;on your local computer.&nbsp;When your team gives&nbsp;you access to the Remote Repository, you can bring the project directories and files&nbsp;in the Remote Repository to your local computer&nbsp;by running the <strong>$ git clone</strong> command.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Accept the Remote Repository access invitation</p>\r\n\r\n<p>When your team gives&nbsp;access to the Remote Repository, you can bring the files and directories in the Remote Repository to the Local Repository and your working directory on your computer by running the <strong>$ git clone</strong> command.</p>\r\n\r\n<p>In Case 1, <em>Developer A</em> has already sent an invitation to <em>Developer B</em> for his Remote Repository. In this practice, we&#39;ll explain from the <em>Developer B</em>&#39;s point of view.</p>\r\n\r\n<p>After the invitation is sent out, <em>Developer B</em> gets an email like the one below.&nbsp;</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-20-10_Case2.GetAccessToOthers%E2%80%99RemoteRepository_IMG_1.png\" target=\"_blank\"><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-20-10_Case2.GetAccessToOthers%E2%80%99RemoteRepository_IMG_1.png\" /></a></p>\r\n\r\n<p>Click the <strong>View invitatioon</strong> button to see the invitation, and accept the invitation by pressing the <strong>Accept invitation</strong> button.&nbsp;</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-20-10_Case2.GetAccessToOthers%E2%80%99RemoteRepository_IMG_2.png\" target=\"_blank\"><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-20-10_Case2.GetAccessToOthers%E2%80%99RemoteRepository_IMG_2.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Run the <strong>$ git clone</strong> command</p>\r\n\r\n<p>Move the directory to create a new project and run the&nbsp;<strong>$ git clone [ Remote Repository URL ]</strong> command to copy&nbsp;the project files in the&nbsp;Remote Repository onto your local computer.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git clone https://github.com/bloovee/git_practice.git (for HTTPS)</code></pre>\r\n\r\n<p>Or</p>\r\n\r\n<pre>\r\n<code>$ git clone git@github.com:bloovee/git_practice.git (for SSH)</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Cloning into 'git_practice'...\r\nremote: Enumerating objects: 4, done.\r\nremote: Counting objects: 100% (4/4), done.\r\nremote: Compressing objects: 100% (3/3), done.\r\nremote: Total 4 (delta 0), reused 4 (delta 0), pack-reused 0\r\nReceiving objects: 100% (4/4), done.</code></pre>\r\n\r\n<p>After this, you can see that the&nbsp;<em>git_practice</em> directory is generated under the current directory.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:20:44.900Z", "updated_at": "2022-03-27T13:20:44.900Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 39, "fields": {"title": "Git Clone", "author": 8, "images": "media/uploads/33.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110142210, "meta_keywords": null, "meta_description": null, "content": "<p>The <strong>$ git clone</strong> command is used to create a link with a Remote Repository and bring the project directory from the remote repository&nbsp;with commit histories to your local computer.</p>\r\n\r\n<p>This command is used only the first time you&nbsp;bring the project directory to your local computer. The <strong>$ git clone</strong> command establishes a connection between the Remote Repository and your local computer by registering the URL to define the location of the Remote Repository onto your computer. Once the connection is established, you can <strong>Pull</strong> or <strong>Fetch</strong> the Remote Repository.</p>\r\n\r\n<p>Pull and Fetch will be explained in Chapter 7.</p>\r\n\r\n<p>When you run the clone command, you need to designate the URL of the Remote Repository which you want to clone. The URLs for HTTPS and SSH are different. As we saw in Chapter 2, you can choose one of them. You can find the URL of the Remote Repository on the &quot;<strong>&lt; &gt; Code</strong>&quot; page on GitHub. You can see the URLs after clicking the green Code button like shown&nbsp;below.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-21-10_GitClone_IMG_1.png\" target=\"_blank\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-21-10_GitClone_IMG_1.png\" /></a></p>\r\n\r\n<p>When you clone a Remote Repository, the default name of the Remote Repository on your local computer is <strong>origin</strong>. You&rsquo;ll use&nbsp;the name&nbsp;&quot;origin&quot; quite often in the Git operation. After you clone a Remote Repository, you can check the Remote Repository&nbsp;name and URL on your computer by running&nbsp;<strong>$ git remote -v</strong>.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:22:23.459Z", "updated_at": "2022-03-27T13:22:23.459Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 40, "fields": {"title": "Case 3. Create Replica Of Remote Repository And Bring It To Local Computer", "author": 8, "images": "media/uploads/34.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110142310, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;On this page, we&#39;ll explain&nbsp;Case 3. As GitHub is an open platform, you can access many repositories created by someone else. You may want to leverage an existing repository to start your new coding project.&nbsp;</p>\r\n\r\n<p>In Case 3, you&#39;ll create a replica of an existing Remote Repository (but it will be an independent project from the original one). This case is also a quite common approach when you learn from an existing project on GitHub public repositories.</p>\r\n\r\n<p>There are two key steps for Case 3.</p>\r\n\r\n<ol>\r\n\t<li><strong>Create a replica of an existing Remote Repository</strong>. Find a repository which you want to start a project on top of. On the Remote Repository page on GitHub, find the&nbsp;<strong>Fork</strong>&nbsp;button to create a replica and bring it to your GitHub account page.&nbsp;</li>\r\n\t<li><strong>Clone the Remote Repository</strong>. To start a project, you need to bring the project directories and files under the Remote Repository onto your computer by running the&nbsp;<strong>$ git clone</strong> command.&nbsp;</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Create a replica of an existing Remote Repository - Fork</p>\r\n\r\n<p>Login to your GitHub account. Here we&#39;ll explain&nbsp;<em>Developer C</em>&#39;s GitHub account:&nbsp;<em>ocean-blue2022</em>. In the image blow, you can see that <em>Developer C</em>&nbsp;signed in&nbsp;<em>as ocean-blue2022</em>.&nbsp;</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-22-10_Case3.CreateAReplicaOfARemoteRepositryAndBringItToLocal_IMG_1.png\" target=\"_blank\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-22-10_Case3.CreateAReplicaOfARemoteRepositryAndBringItToLocal_IMG_1.png\" /></a></p>\r\n\r\n<p>For practice purposes,&nbsp;we changed the <em>git_practice</em> repository owned by <em>Developer A</em> (account name: <em>bloovee</em>)&nbsp;from a private repository to a public repository. In this practice exercise, <em>Developer C</em> will Fork the repository.&nbsp;</p>\r\n\r\n<p>To go to the repository, search the repository using the search box. In this case, <em>Developer C</em>&nbsp;found the&nbsp;<em>bloovee/git_practice</em> public repository. To <strong>Fork</strong> the repository, press the Fork button on the top right.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-22-10_Case3.CreateAReplicaOfARemoteRepositryAndBringItToLocal_IMG_2.png\" target=\"_blank\"><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-22-10_Case3.CreateAReplicaOfARemoteRepositryAndBringItToLocal_IMG_2.png\" /></a></p>\r\n\r\n<p>Now you can see that&nbsp;the <em>git_practice</em> repository is created under the <em>ocean-blue2022</em> account as shown&nbsp;below.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-22-10_Case3.CreateAReplicaOfARemoteRepositryAndBringItToLocal_IMG_3.png\" target=\"_blank\"><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-14-22-10_Case3.CreateAReplicaOfARemoteRepositryAndBringItToLocal_IMG_3.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Bring the project file in the Remote Repository to the local computer - Clone</p>\r\n\r\n<p>After you Fork the repository on GitHub, the next step is the same as in Case 2. You need to run the <strong>$ git clone</strong> command to bring the project directory onto your computer.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git clone https://github.com/bloovee/git_practice.git (for HTTPS)</code></pre>\r\n\r\n<p>Or</p>\r\n\r\n<pre>\r\n<code>$ git clone git@github.com:bloovee/git_practice.git (for SSH)</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Cloning into 'git_practice'...\r\nremote: Enumerating objects: 4, done.\r\nremote: Counting objects: 100% (4/4), done.\r\nremote: Compressing objects: 100% (3/3), done.\r\nremote: Total 4 (delta 0), reused 4 (delta 0), pack-reused 0\r\nReceiving objects: 100% (4/4), done.</code></pre>\r\n\r\n<p>After this, the&nbsp;<em>git_practice</em> directory will be generated under the directory in which you run the command.&nbsp;</p>\r\n\r\n<p>The final status seems the same as in Case 2. However, there is a significant difference between Case 2 and Case 3.&nbsp;In Case 2, you are still collaborating with the owner of the original Remote Repository. In Case 3, you completely separate&nbsp;the Remote Repository. The forked repository no longer belongs&nbsp;to the original owner of the repository.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:23:56.158Z", "updated_at": "2022-03-27T13:23:56.158Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 41, "fields": {"title": "Fork vs. Clone", "author": 8, "images": "media/uploads/35.svg", "categories": 5, "only_to_my_page": false, "unique_identifier": 204110142410, "meta_keywords": null, "meta_description": null, "content": "<p>Fork and Clone are often confused with each other. Here we&rsquo;ll give a quick summary of those two concepts.</p>\r\n\r\n<p><strong>Fork</strong> is a feature provided by GitHub&nbsp;used to create a replica of a Remote Repository on GitHub. After implementing Fork, the replicated repository will be separated from the original repository. You can modify codes in the replicated repository on your own without permission from the owners of the original repository (within the software license agreement, if any). Fork is not a git command. It is executed on the GitHub website. Go to the GitHub site and find the repository which you want to create a replica of. There is a Fork button on the Remote Repository page. Press the Fork button to implement Fork.</p>\r\n\r\n<p><strong>Clone</strong> is used to make a link with a Remote Repository and bring the project directory from the Remote Repository to your local computer&nbsp;for the first time.&nbsp; To implement Clone, you need to run &ldquo;<strong>$ git clone</strong>&rdquo; with the Remote Repository name and&nbsp;the URL of the Remote Repository.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:25:23.422Z", "updated_at": "2022-03-27T13:25:23.422Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 42, "fields": {"title": "Chapter 5. Edit & Commit", "author": 8, "images": "media/uploads/36.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110151010, "meta_keywords": null, "meta_description": null, "content": "<p>In this chapter, we&rsquo;ll explain key Git commands used in&nbsp;the cycle of editing and recording code&nbsp;(creating version histories). The following topics are covered in this chapter.</p>\r\n\r\n<p>TOPICS</p>\r\n\r\n<ol>\r\n\t<li><strong>Git Regular Workflow &mdash; Edit &amp; Commit</strong></li>\r\n\t<li><strong>Edit and Commit Codes Overveiw (1)</strong></li>\r\n\t<li><strong>Edit and Commit Codes Overveiw (2)</strong></li>\r\n\t<li><strong>Add Files To Staging Area &mdash; Git Add</strong></li>\r\n\t<li><strong>Check Status Of Working Tree And Staging Area &mdash; Git Status</strong></li>\r\n\t<li><strong>Commit Files &mdash; Git Commit</strong></li>\r\n\t<li><strong>Check Commit Histories &mdash; Git Log</strong></li>\r\n\t<li><strong>Check Differences &mdash; Git Diff</strong></li>\r\n\t<li><strong>Restore Files To Working Tree &mdash; Git Restore</strong></li>\r\n\t<li><strong>Delete Files &mdash; Git Rm</strong></li>\r\n\t<li><strong>Undo Changes &mdash; Git Reset</strong></li>\r\n</ol>\r\n\r\n<p>To start learning, go to the next page.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:27:05.469Z", "updated_at": "2022-03-27T13:27:05.469Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 43, "fields": {"title": "Git Regular Workflow — Edit & Commit", "author": 8, "images": "media/uploads/37.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110151110, "meta_keywords": null, "meta_description": null, "content": "<p>The goal of this section is to master the basic cycle of editing and recording code&nbsp;(creating version histories) with key Git commands.</p>\r\n\r\n<p>There are 8 key Git commands you will learn in this section.</p>\r\n\r\n<ul>\r\n\t<li><strong>$ git add</strong>: with this command, you can add files to the Staging Area (INDEX), where you can prepare and check files to register in your Local Repository.&nbsp;</li>\r\n\t<li><strong>$ git status</strong>: with this command, you can see the status of the Working Tree (working directory) and the Staging Area (INDEX). This status lets you see which changes have been staged, which haven&#39;t, and which files aren&#39;t being tracked by Git.&nbsp;</li>\r\n\t<li><strong>$ git commit</strong>: with this command, you can register files in your Local Repository. Once the files are registered by this&nbsp;command, you can retrieve the saved version of the set of files anytime.</li>\r\n\t<li><strong>$ git log</strong>: with this command, you can check the infomation of the commit history of the repository</li>\r\n\t<li><strong>$ git diff:</strong> with this command, you can check differences&nbsp;among&nbsp;the Working Tree, Staging Area (INDEX) and&nbsp;commit histories.</li>\r\n\t<li><strong>$ git restore</strong>: with this command, you can bring your working tree back to the latest commit or a specific commit. This command is useful when you want to clear your edits and go back to a cleaner version.</li>\r\n\t<li><strong>$ git rm</strong>: with this command, you can delete files or directories under the Working Tree and the Staging Area (INDEX). When you want to reflect the deleted status as a formal version, you need to create another commit.&nbsp;</li>\r\n\t<li><strong>$ git reset</strong>: with this command, you can reset the Staging Area (INDEX) or change commit histories&nbsp;with or without changing the contents of your local files.&nbsp;</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:28:44.126Z", "updated_at": "2022-03-27T13:28:44.126Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 44, "fields": {"title": "Edit and Commit Overveiw (1)", "author": 8, "images": "media/uploads/38.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110151210, "meta_keywords": null, "meta_description": null, "content": "<p>As already explained in Chapter 1, you&rsquo;ll manage the following three areas in the Git operation.</p>\r\n\r\n<p><strong>Working Tree</strong>&nbsp;(or Working Directory) is the area where you can edit code or files.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-15-12-10_EditAndCommitCodesOverveiw(1)_IMG_1.svg\" />&nbsp;</p>\r\n\r\n<p>If you haven&rsquo;t run any git commands, the files are not tracked by the Git system. By running the <strong>$ git add </strong>command, you can bring the files into the Staging Area.&nbsp;</p>\r\n\r\n<hr />\r\n<p><strong>Staging Area</strong>, also&nbsp;called <strong>INDEX</strong>, is an area to store changes before committing them (creating a new version of a coding history). This area is often used to review changes before finalizing&nbsp;a new version.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-15-12-10_EditAndCommitCodesOverveiw(1)_IMG_2.svg\" /></p>\r\n\r\n<p>By running the <strong>$ git commit</strong> command, files under the Stating Area are registered in the Local Repository.</p>\r\n\r\n<hr />\r\n<p><strong>Local Repository</strong>&nbsp;is the area for&nbsp;keeping record of coding histories: committed files.</p>\r\n\r\n<p><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-15-12-10_EditAndCommitCodesOverveiw(1)_IMG_3.svg\" /></p>\r\n\r\n<p>By running the <strong>$ git log</strong> command, you can see the histories of your code.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A typical cycle of editing and managing commits</p>\r\n\r\n<ol>\r\n\t<li>Edit&nbsp;the code&nbsp;in your project Working Tree (e.g., adding a new feature in a program)</li>\r\n\t<li>Once the code&nbsp;is updated, bring the files to the Staging Area by the <strong>$ git add</strong> command</li>\r\n\t<li>If you want to make a snapshot of the project files, commit the files and save&nbsp;the version&nbsp;in&nbsp;the Local Repository by the&nbsp;<strong>$ git commit</strong> command</li>\r\n\t<li>Check the status of the Working Tree and the Staging Area by running the <strong>$ git status</strong> command. If the commit is successfully done, you&rsquo;ll see a message saying &ldquo;nothing to commit&rdquo;</li>\r\n\t<li>Then, you can start further edits to add another feature in the Workng Tree. In the Git operation, you repeat this cycle.</li>\r\n\t<li>If you see errors in the files already in the Staging Area, you can clear the files in the Staging Area by running the <strong>$ git reset</strong> command.</li>\r\n\t<li>If you want to reverse your&nbsp;recent edits in the&nbsp;Working Tree and bring the latest saved version (latest commit) back to the&nbsp;Working Tree, you can run the <strong>$ git restore</strong> command.</li>\r\n\t<li>When you want to delete files or directories from the&nbsp;Working Tree or Staging Area, you can run the <strong>$ git rm</strong> command. After running the $ git rm command, you need to run the <strong>$ git commit</strong> command to reflect the deleted status in the commit histories.</li>\r\n\t<li><strong>$ git reset</strong> is also useful when you want to change version histories. By designating a specific commit name when you run the command, you can erase all the commit histories after the designated commit.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:30:00.416Z", "updated_at": "2022-03-27T13:30:00.416Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 45, "fields": {"title": "Edit and Commit Overveiw (2)", "author": 8, "images": "media/uploads/39.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110151310, "meta_keywords": null, "meta_description": null, "content": "<p>We also want to introduce another diagram to explain the same concept as the one on the previous page. This illustration will help understand how&nbsp;Git works with branches, which will the focus of Chapter 6. The following is&nbsp;the explanation of key icons.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/WorkingTree.svg\" />&nbsp; <strong>Working Tree </strong>or Working Directory, which you see on your local computer for daily editing.</p>\r\n\r\n<p><img alt=\"IMG2\" src=\"https://s3.amazonaws.com/test.bloovee.com/StagingArea.svg\" />&nbsp; <strong>Staging Area</strong>&nbsp;or INDEX.&nbsp;If the Working Tree is inside this dotted circle, the edit status&nbsp;of the Working Tree and the Staging Area are the same.</p>\r\n\r\n<p><img alt=\"IMG3\" src=\"https://s3.amazonaws.com/test.bloovee.com/Commit.svg\" />&nbsp; <strong>Commit</strong>. If the Working Tree is inside this bold circle, the edit status of the Working Tree and the commit&nbsp;are the same.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>In this diagram, you can see the progress of coding horizontally. If icons are on the same status column (e.g., Status B), the files or directories are the same.&nbsp;</p>\r\n\r\n<p>We&#39;ll explain the flow step by step in the diagram.</p>\r\n\r\n<ol>\r\n\t<li>First, the Working Tree and the latest Commit are under the same status (Status B in the diagram).</li>\r\n\t<li>When you edit files under the Working Tree, the Working Tree status changes&nbsp;from Status B to Status C.</li>\r\n\t<li>By running the <strong>$ git add</strong> command, the Working Tree status (e.g., edited files) is reflected in&nbsp;the Staging Area. At this point, both the Working Tree and the Staging Area are in Status C.</li>\r\n\t<li>If your edited code has&nbsp;an error and you want to reverse it (clear it from the Staging Area), you can run the <strong>$ git reset</strong> command.</li>\r\n\t<li>If you want to make a record of the version of the staged files, you can run the <strong>$ git commit</strong> command.</li>\r\n\t<li>After the commit action, you can continue to edit and move the Working Tree forward to Status D.</li>\r\n\t<li>However, you may find an error in the committed files. If that is the case, you can restore the files from the latest commit by running the <strong>$ git restore</strong> command (the Working Tree is back to Status C).</li>\r\n\t<li>If you find another error in a committed file, you can also reverse the committed history by running the<strong> $ git reset </strong>command. For this purpose, you need to designate a commit name to specify to which commit you want to go back.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:31:12.300Z", "updated_at": "2022-03-27T13:31:12.301Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 46, "fields": {"title": "HEAD", "author": 8, "images": "media/uploads/40.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110151410, "meta_keywords": null, "meta_description": null, "content": "<p>When you are working with Git, you&#39;ll see the terms HEAD and INDEX frequently. As explained, INDEX is another term for&nbsp;Staging Area.</p>\r\n\r\n<p>Local Repository is the place to store all version histories. Version histories are stored as commits. The latest commit (the latest version) is called <strong>HEAD</strong>.&nbsp;</p>\r\n\r\n<p>The concept of Head is important to understand Git operation. The concept is also useful to understand branch workflow.</p>\r\n\r\n<p>To indicate one commit before HEAD, you can use HEAD~ (tilde) or HEAD^ (Caret) . The meaning of ~ and ^ will be different in a multi-branch context. It&nbsp;will be explained in Chapter 6.</p>", "created_at": "2022-03-27T13:32:19.375Z", "updated_at": "2022-03-27T13:32:19.376Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 47, "fields": {"title": "Add Files To Staging Area — Git Add", "author": 8, "images": "media/uploads/41.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110151510, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;$ git add</strong>&nbsp;is the command used when you want to add files to the Staging Area, where you can prepare and check files to register in your Local Repository.</p>\r\n\r\n<p>When running the command, you need to indicate which files or directories to add to the Staging Area.&nbsp;</p>\r\n\r\n<p>When you want to stage a specific file or directory, you can write the file path or directory path like below.</p>\r\n\r\n<pre>\r\n<code>$ git add [directory or file path]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Add all files under the current directory</strong></p>\r\n\r\n<p>When you want to stage all the files and directories&nbsp;under your current directory, you can use period &quot;<strong>.</strong>&quot; like below.</p>\r\n\r\n<pre>\r\n<code>$ git add .\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Add all changes under the Working Tree</strong></p>\r\n\r\n<p>&nbsp;When you want to stage only the files changed from the latest commit (HEAD), you can use the &quot;<strong>-A</strong>&quot; option like&nbsp;below.</p>\r\n\r\n<pre>\r\n<code>$ git add -A</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:33:28.568Z", "updated_at": "2022-03-27T13:33:28.568Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 48, "fields": {"title": "Check Status Of Working Tree And Staging Area — Git Status", "author": 8, "images": "media/uploads/42.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110151610, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;$ git status</strong>&nbsp;is the&nbsp;command when&nbsp;you want to see the status of the Working Tree and the Staging Area. This status lets you see which changes have been staged, which haven&#39;t, and which files aren&#39;t being tracked by Git.&nbsp;</p>\r\n\r\n<p>There are two types of information which the <strong>$ git status </strong>command provides</p>\r\n\r\n<p>Information provided by $ git status</p>\r\n\r\n<p><strong>1. Branch status</strong>: which branch you are located in (the branch concept will be explained in the next chapter)</p>\r\n\r\n<p><strong>2. Commit status</strong> mainly&nbsp;covers the following status</p>\r\n\r\n<ul>\r\n\t<li>Existence of untracked files (\r\n\t<p>1</p>\r\n\t)</li>\r\n\t<li>Files in the Staging Area but not commited yet (\r\n\t<p>2</p>\r\n\t)</li>\r\n\t<li>All files are tracked and committed (\r\n\t<p>3</p>\r\n\t)</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The following gives some&nbsp;more detail examples of a typical <strong>$ git status </strong>response.</p>\r\n\r\n<p>1</p>\r\n\r\n<p><strong>Existence of untracked files</strong>. When you haven&#39;t run&nbsp;commit before and haven&#39;t staged any files, you&#39;ll see a&nbsp;message like below. In this case, two untracked files exist in the Git system.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>On branch master\r\nNo commits yet\r\nUntracked files:\r\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\r\n        .gitignore\r\n        git_practice.html</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2</p>\r\n\r\n<p><strong>Files in the Staging Area but not commited yet</strong>. If you staged some files but not commited them yet, you&#39;ll see a message like below. This example shows the status after you added the two untracked files into the Staging Area by running the <strong>$ git add</strong> command.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>On branch master\r\nNo commits yet\r\nChanges to be committed:\r\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\r\n        new file:   .gitignore\r\n        new file:   git_practice.html</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3</p>\r\n\r\n<p><strong>All files are tracked and committed</strong>. If you already commited all the files, you&#39;ll see the message like below.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>On branch master\r\nnothing to commit, working tree clean</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Different files with different status</strong></p>\r\n\r\n<p>The status can differ&nbsp;by file. If there are three files like in the illustration (File 1, 2 and 3), you&#39;ll see a&nbsp;message like below.</p>\r\n\r\n<pre>\r\n<code>On branch master\r\nChanges to be committed:\r\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\r\n        new file:   File_2\r\n\r\nUntracked files:\r\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\r\n        File_3</code></pre>\r\n\r\n<p>In this case, <em>File_1</em> is already committed and it is not shown in the message. <em>File_2</em> is already added in the Staging Area but not committed. <em>File_3</em> is&nbsp;already created in the Working Tree but&nbsp;it is&nbsp;not added to the Staging Area.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:34:36.004Z", "updated_at": "2022-03-27T13:34:36.004Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 49, "fields": {"title": "Commit Files — Git Commit", "author": 8, "images": "media/uploads/43.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110151710, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;$ git commit&nbsp;</strong>is the command when&nbsp;you want to&nbsp;register files in your Local Repository. Once the files are registered with the $ git commit command, you can retrieve the saved version of the set of files anytime.</p>\r\n\r\n<p>When you commit files, you need to write some messages about the commit. The messages are recorded along with the code.&nbsp;Typically, you describe what is the changes are about.</p>\r\n\r\n<p>There are some frequently used short-cut options for this command.</p>\r\n\r\n<h3><strong>1. &quot;-m&quot; option: directly add a commit message with the command</strong></h3>\r\n\r\n<p>The &quot;<strong>-m</strong>&quot; option is used to describe a&nbsp;commit message directly in the command. If you don&#39;t use this option, a registered text editor is launched automatically. In that case, you need to write a commit message on the text editor, save it and close the text editor. The &quot;-m&quot; option is useful to shorten the operation.</p>\r\n\r\n<h3><strong>2. &quot;-a&quot; option: directly make a commit (skip the Staging Area)</strong></h3>\r\n\r\n<p>Another option frequently used is the &quot;<strong>-a</strong>&quot; or &quot;<strong>--all</strong>&quot; option. To commit a modifiled or deleted file, you need to add the status&nbsp;to the Staging Area by running the <strong>$ git add</strong> command. The &quot;-a&quot; or &quot;--all&quot; option enables you to skip the process. This option is not applicable for untracked files. For example, when you create a new file from the last commit, the file needs to be added to the Staging Area by running the $ git add command.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>You can use these two options together. For example, if you modified some files for fixing a bug and you want to commit the status, you can run the following command.</p>\r\n\r\n<pre>\r\n<code>$ git commit -a -m \"Fixed Bugs\"</code></pre>\r\n\r\n<p>Or</p>\r\n\r\n<pre>\r\n<code>$ git commit -am \"Fixed Bugs\"</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Another note for the&nbsp;$ git commit command is that you don&#39;t need to designate a file or directory path different from the $ git add command.&nbsp;The Git system already tracks the files in the Working Tree and Staging Area, the $ git commit command automatically detects what files need to be committed.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:35:42.626Z", "updated_at": "2022-03-27T13:35:42.627Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 50, "fields": {"title": "Check Commit Histories — Git Log", "author": 8, "images": "media/uploads/44.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110151810, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;$ git log </strong>is the command used when you want to&nbsp;get&nbsp;the commit history information of the repository.</p>\r\n\r\n<p>For example, when you run this command after the first commit, you&#39;ll see a message like the one&nbsp;below.</p>\r\n\r\n<pre>\r\n<code>commit f0b40317a525defbe09bd14de23d9f85e1827e01 (HEAD -&gt; master)\r\nAuthor: bloovee &lt;bloovee@example.com&gt;\r\nDate:   Sat Dec 18 16:16:04 2021 +0800\r\n\r\n    The first commit</code></pre>\r\n\r\n<p>The first line is <strong>Commit Hash</strong>. Commit Hash is a unique ID of each&nbsp;commit. When you want to retrieve a&nbsp;commit, you need this hash.</p>\r\n\r\n<p>The second line is the ername and email address of the author of the commit.</p>\r\n\r\n<p>The third line is the data and time of the commit.</p>\r\n\r\n<p>The last line is the message described when the commit is made.&nbsp;</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-15-18-10_CheckCommitHistories%E2%80%94GitLog_IMG_1.svg\" target=\"_blank\"><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-15-18-10_CheckCommitHistories%E2%80%94GitLog_IMG_1.svg\" /></a></p>\r\n\r\n<p>The Git system tracks histories of commits. For example, if you make another&nbsp;commit with a message of &quot;Modified&quot;, the new commit is recorded like below. You can still see the record of &quot;The first commit&quot; after the record of &quot;Modified&quot;.</p>\r\n\r\n<pre>\r\n<code>commit 5ef9182e83895ed3c25ded5e89d1bb7e957a1e2f (HEAD -&gt; master)\r\nAuthor: bloovee &lt;bloovee2021@gmail.com&gt;\r\nDate:   Sat Dec 18 16:41:07 2021 +0800\r\n\r\n    Modified\r\n\r\ncommit a2613ec4fb8a280f79f6b59331172052f9911bac\r\nAuthor: bloovee &lt;bloovee2021@gmail.com&gt;\r\nDate:   Sat Dec 18 16:39:26 2021 +0800\r\n\r\n    The first commit</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Key options of the $ git log command</strong></p>\r\n\r\n<p><strong>&quot;--oneline&quot; option: display each&nbsp;commit in oneline</strong></p>\r\n\r\n<p>When commit histories become long, you may want to skip some items to display. The &quot;<strong>--oneline</strong>&quot; option is useful to shorten the descriptions. With this option, each commit history is shown with one line.</p>\r\n\r\n<pre>\r\n<code>5ef9182 (HEAD -&gt; master) Modified\r\na2613ec The first commit</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>&quot;--graph&quot; option: display commits with a graph</strong></p>\r\n\r\n<p>With the &quot;--graph&quot; option, you can see the branch diversion or integration history visually. It is effective when commit histories are more complicated with multiple branches. The branch concept&nbsp;will be&nbsp;explained&nbsp;in Chapter 6. The following is an example of&nbsp;running $ git log with the &quot;--graph&quot; and &quot;--oneline&quot; option.&nbsp;</p>\r\n\r\n<pre>\r\n<code>*   b5105dc Merged branch A\r\n|\\  \r\n| *   8fef9f1 (Branch_A) Merged branch B\r\n| |\\  \r\n| | * 3ab0477 (Branch_B) Edit 5 on branch B\r\n| |/  \r\n| * e83087e Edit 4 on branch A\r\n| * 8fcc58c Edit 3 on branch A\r\n* | a815b57 Edit 2 on master branch\r\n* | 931aef2 Edit 1 on master branch\r\n|/  \r\n* 5c1fd7a First Commit</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>TIPS</p>\r\n\r\n<ol>\r\n\t<li>When you run the <strong>$ git log </strong>command, the command line switches to a different display mode in which you cannot type.</li>\r\n\t<li>To go back to the original mode, you need to press the &quot;q&quot; key. &quot;q&quot; means quit.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:37:02.136Z", "updated_at": "2022-03-27T13:37:02.136Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 51, "fields": {"title": "Check Differences — Git Diff", "author": 8, "images": "media/uploads/45.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110151910, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;$ git diff</strong>&nbsp;is the command used when you want to&nbsp;get differences among&nbsp;the Working Tree, the Staging Area (INDEX) and&nbsp;commit histories.</p>\r\n\r\n<p>There are four types of differences you can get with the command.</p>\r\n\r\n<ol>\r\n\t<li><strong>Difference between the Working Tree and INDEX</strong>; when you simply run <strong>$ git diff</strong>, you&#39;ll see this&nbsp;difference.</li>\r\n\t<li><strong>Difference between the Working Tree and one of commit histories</strong>; to see this difference, you need to indicate a Commit Hash after <strong>$ git diff</strong>.</li>\r\n\t<li><strong>Difference between INDEX and HEAD</strong> (the latest commit); the &quot;<strong>--cached</strong>&quot; option enables you to see the difference between INDEX and one of commit histories. When you don&#39;t designate&nbsp;a specific commit, the command gives you the&nbsp;difference between INDEX and&nbsp;HEAD (the latest commit)</li>\r\n\t<li><strong>Difference between INDEX and one of commit histories</strong>; when you see this difference, you need to designate&nbsp;a&nbsp;Comit Hash after the &quot;<strong>--cached</strong>&quot; option.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>To help you understand this more clearly, we&#39;ll provide&nbsp;more examples.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1.File and Commit History Preparation</p>\r\n\r\n<p>In this practice, we&#39;ll use the same practice file that was used before: <em>git_practice.html</em>. The initial file contents is shown below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!doctype html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n &lt;style&gt;\r\n h1 {\r\n  color:blue;\r\n  font-size:80px\r\n }\r\n &lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n &lt;h1&gt;Hello World!&lt;/h1&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>First, confirm that the color part is&nbsp; blue &nbsp;which we&#39;ll change later. Then, commit this file&nbsp;by running the following command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -a -m \"The first commit\"</code></pre>\r\n\r\n<p>Next, change the color part of the file to&nbsp;&nbsp;<em>green&nbsp;</em>&nbsp;like shown below. Keep the rest of&nbsp;code the same and save the file.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>h1 {\r\n  color:green;\r\n  font-size:80px\r\n }</code></pre>\r\n\r\n<p>Then, run the next commit with the following command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -a -m \"Modified commit\"</code></pre>\r\n\r\n<p>Further change the color part to&nbsp;&nbsp;<em>yellow&nbsp;</em>. After the file is saved,&nbsp;stage the file by running the following command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git add -A</code></pre>\r\n\r\n<p>Lastly, change the color part to&nbsp;&nbsp;<em>red&nbsp;</em>&nbsp;and save the file.</p>\r\n\r\n<p>To check the commit status and Commit Hash, run the <strong>$ git log</strong> command with the &quot;<strong>--oneline</strong>&quot; option like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git log --oneline</code></pre>\r\n\r\n<p>The command line returns the following commit log with a short version of&nbsp;Commit Hash.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>d29bfa5 (HEAD -&gt; master) Modified commit\r\n962ec56 The first commit</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>By now, the status of your&nbsp;<em>git_practice.html </em>file&#39;s commits, INDEX and Working Tree becomes the following.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-15-19-10_CheckDifferences%E2%80%94GitDiff_IMG_1.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Check for differences</p>\r\n\r\n<p>Using the information above, let&#39;s confirm the&nbsp;differences with several combinations.</p>\r\n\r\n<p><strong>1. Difference between Working Tree and Staging Area</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git diff</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>diff --git a/git_practice.html b/git_practice.html\r\nindex 6f83671..2f90dec 100644\r\n--- a/git_practice.html\r\n+++ b/git_practice.html\r\n@@ -3,7 +3,7 @@\r\n &lt;head&gt;\r\n  &lt;style&gt;\r\n  h1 {\r\n-  color:yellow;\r\n+  color:red;\r\n   font-size:80px\r\n  }\r\n  &lt;/style&gt;</code></pre>\r\n\r\n<p>You can see a record showing that the color part is changed from&nbsp;&nbsp;<em>yellow&nbsp;</em> to&nbsp;&nbsp;<em>red&nbsp;</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>2. Difference between Working Tree and HEAD.</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git diff Head</code></pre>\r\n\r\n<p>Or</p>\r\n\r\n<pre>\r\n<code>$ git diff ​d29bfa5</code></pre>\r\n\r\n<p>Note: <em>d29bfa5</em> is the Commit Hash of the HEAD.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>-  color:green;\r\n+  color:red;</code></pre>\r\n\r\n<p>You can see a record showing that color part has changed from&nbsp;&nbsp;<em>green&nbsp;</em> to&nbsp;&nbsp;<em>red&nbsp;</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>3. Difference between Staging Area and Head</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git diff --cached</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>-  color:green;\r\n+  color:yellow;</code></pre>\r\n\r\n<p>You can see a record showing that the color part has changed from&nbsp;&nbsp;<em>green&nbsp;</em> to&nbsp;&nbsp;<em>yellow&nbsp;</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>4. Difference between Staging Area and The first commit</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git diff --cached 962ec56</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>-  color:blue;\r\n+  color:yellow;</code></pre>\r\n\r\n<p>You can see a record showing that the color part has&nbsp;changed from&nbsp;&nbsp;<em>blue&nbsp;</em> to&nbsp;&nbsp;<em>yellow&nbsp;</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>The $ git diff command can be used for checking differences between branches. If you want to see the differences between Branch_1 and Branch_2, run the following command.&nbsp;</p>\r\n\r\n<pre>\r\n<code>git diff [Branch_1]..[Branch_2]</code></pre>\r\n\r\n<p>The differences are shown after + or -. + means that the lines of code were&nbsp;added in Branch_2 from the point of view of Branch_1. - means that the lines of code were deleted in Branch_2 from the point of view of&nbsp;Branch_1.</p>\r\n\r\n<pre>\r\n<code>+ code added\r\n- code deleted</code></pre>\r\n\r\n<p>Branch operations will be explained in more detail in Chapter 6.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:38:30.155Z", "updated_at": "2022-03-27T13:38:30.155Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 52, "fields": {"title": "Restore Committed Files To Working Tree — Git Restore", "author": 8, "images": "media/uploads/46.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110152010, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;$ git restore&nbsp;</strong>is the command when you want to&nbsp;bring your Working Tree back to the latest commit or a specific commit. This command is useful when you want to clear your edits and go back to a cleaner version. There are typically two approaches when you use this command. One is without option and another is with &quot;-s&quot; option.&nbsp;&nbsp;By using the &quot;<strong>-s</strong>&quot; option, you can designate&nbsp;a commit which you want to retrieve.</p>\r\n\r\n<h3><strong>1.&nbsp;No option</strong></h3>\r\n\r\n<p>When running the following command, you&#39;ll see two different results depending on the status of the Stating Area.</p>\r\n\r\n<pre>\r\n<code>$ git restore [ file path or directory path ]</code></pre>\r\n\r\n<ul>\r\n\t<li><strong>When there is any staged file</strong>: the Working Tree goes back to the same status as the Staging Area</li>\r\n\t<li><strong>When there is no staged file</strong>: the Working Tree goes back to the same status as the&nbsp;latest commit (HEAD)</li>\r\n</ul>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p><strong>$ git checkout [directory or file path]</strong>&nbsp;also gives the same results as this command.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>2. &quot;-s&quot; option: restore files or directories from a specific commit</strong></h3>\r\n\r\n<p>You can restore files or directories from a specific commit by running the following command.</p>\r\n\r\n<pre>\r\n<code>$ git restore [file path or directory path] -s [Commit Hash]</code></pre>\r\n\r\n<p>&nbsp;You can designate <strong>Head</strong> instead of a Commit Hash if you want to go back to the latest commit version.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>TIPS</p>\r\n\r\n<p>If you use &quot;<strong>.</strong>&quot; as a directory path, all the files and directories under the current directory will be restored.&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please read the following practice.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. File and Commit History Preparation</p>\r\n\r\n<p>In this practice, we&#39;ll use the same example as the previou page. Please review the practice section of the&nbsp;previou page if you haven&#39;t gone through. The practice file named &quot;<em>git_practice.html</em>&quot; has the following commit histories, INDEX&nbsp;and the Working Tree.&nbsp;Commit Hash is an unique number generated for each commit. When you demonstrate, you see different numbers. For your practice, use the Hash generated on your computer.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-15-20-10_RestoreFilesToWorkingTree%E2%80%94GitRestore_IMG_1.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Restore files from different versions</p>\r\n\r\n<p>There are three types of approaches to restore files. The following diagram illustrates which version of files you can restore.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-15-20-10_RestoreFilesToWorkingTree%E2%80%94GitRestore_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>1</p>\r\n\r\n<p>Restore a file from INDEX</p>\r\n\r\n<p>By running the following command, you can bring the file status back to the status in the Staging Area.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git restore git_practice.html</code></pre>\r\n\r\n<p>Check the file. You can see the color part is changed to <em>&nbsp;yellow&nbsp;</em> from&nbsp;&nbsp;<em>&nbsp;red&nbsp;</em>. This means that the file is back to the version under the Staging Area.If you run the <strong>$ git diff</strong> command, there is no response as the file status between the Staging Area and the Working Tree became the same.</p>\r\n\r\n<p>If there is no version of the file in the Staging Area, the <strong>$ git restore </strong>command bring back to the latest commit (Head). We&#39;ll test it later.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2</p>\r\n\r\n<p>Restore a file from a specific commit</p>\r\n\r\n<p>By running the following command, you can bring the file status to the same as &quot;The first commit&quot; status.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git restore git_practice.html -s 962ec56</code></pre>\r\n\r\n<p>Check the file. You can see that the color part is changed to&nbsp; <em>blue</em>&nbsp;&nbsp;from&nbsp;&nbsp;<em>yellow&nbsp;</em>. This means that the file is back to &quot;The first commit&quot; version.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3</p>\r\n\r\n<p>Restore a file from Head</p>\r\n\r\n<p>If you want to back to the latest commit, you can designate&nbsp;<strong>Head</strong> instead of the commit hash like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git restore git_practice.html -s Head</code></pre>\r\n\r\n<p>After running the command, you can see that the color changed into&nbsp;&nbsp;<em>green&nbsp;</em>.</p>\r\n\r\n<p>When there is no version of the file in the Staging Area, the <strong>$ git restore</strong> command without option will also bring your file status to Head. To confirm this, try the following steps.</p>\r\n\r\n<p>First, change the color part into&nbsp;&nbsp;<em>red&nbsp;</em>, which is the default&nbsp;setting of the Working Tree in this practice,&nbsp;and save the file. To clear the file in the Staging Area, run <strong>$ git reset </strong>command first. Then, run <strong>$ git restore</strong> command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git reset\r\n$ git restore git_practice.html</code></pre>\r\n\r\n<p>Check the file. You can see that the color part is changed to&nbsp;&nbsp;<em>green&nbsp;</em>&nbsp;from&nbsp;&nbsp;<em>red&nbsp;</em>.&nbsp;We ran the same command in the begining of the practice. At that time, the color was changed to&nbsp;&nbsp;<em>yellow&nbsp;</em> which is the same status in the Staging Area. As the file under the Staging Area was&nbsp;unstaged, the color was changed to the latest commit status, which is&nbsp;&nbsp;<em>green&nbsp;</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:39:55.844Z", "updated_at": "2022-03-27T13:39:55.845Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 53, "fields": {"title": "Delete Files From Staging Area — Git Rm", "author": 8, "images": "media/uploads/47.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110152110, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;The <strong>$ git rm </strong>command can delete a file&nbsp;in the Working Tree and register the status in the Staging Area. To reflect it in a commit history, you need to run the<strong> $ git commit</strong> command afterwards.&nbsp;If you want to delete a directory, you need to use &quot;<strong>-r</strong>&quot; option before the directory path.&nbsp; The typical command flow is as follows.</p>\r\n\r\n<h3><strong>1. To delete a file (No option)</strong></h3>\r\n\r\n<pre>\r\n<code>$ git rm [ file path ]\r\n$ git commit</code></pre>\r\n\r\n<h3><strong>2. To delete a directory (with &quot;-r&quot; option)</strong></h3>\r\n\r\n<pre>\r\n<code>$ git rm -r [ directory path ]\r\n$ git commit</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please read the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1.Prepare a file to delete</p>\r\n\r\n<p>For this practice purpose, create a copy of <em>git_practice.html</em> file and commit the new file. Run the <strong>$ cp</strong> command like the one below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ cp git_practice.html git_practice_copy.html\r\n$ git add .\r\n$ git commit -m \"Added a new file\"</code></pre>\r\n\r\n<p>2.Delete the file</p>\r\n\r\n<p>To delete the file run the <strong>$ git rm</strong> command and check the status with the <strong>$ git status</strong> command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git rm git_practice_copy.html\r\n$ git status</code></pre>\r\n\r\n<p>After running the command above, you can&nbsp;see the following response</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Changes to be committed:\r\n  (use \"git restore --staged ...\" to unstage)\r\n        deleted:    git_practice_copy.html</code></pre>\r\n\r\n<p>To register the status to the Local Repository, run the<strong> $ git commit </strong>command. And check the latest commit log.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -m \"Deleted the new file\"\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You can confirm that the deleted status is already registered in the commit histories like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>6d93471 (HEAD -&gt; master) Deleted the new file\r\nec837bf Added a new file</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:41:11.337Z", "updated_at": "2022-03-27T13:41:11.337Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 54, "fields": {"title": "Unstage Files From Staging Area — Git Reset", "author": 8, "images": "media/uploads/48.svg", "categories": 6, "only_to_my_page": false, "unique_identifier": 204110152210, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;$ git reset</strong>&nbsp;is the command when&nbsp;you want to&nbsp;reset the Staging Area (INDEX) or change commit histories&nbsp;with or without changing the files in the Working Tree.</p>\r\n\r\n<p>There are mainly two types of usage of this command.</p>\r\n\r\n<h3><strong>1. No option: clear files in the Staging Area</strong></h3>\r\n\r\n<p>To clear files in the Staging Area, you need to simply run the <strong>$ git reset</strong> command like the one below. For this purpose, no need to use option and Commit Hash.</p>\r\n\r\n<pre>\r\n<code>$ git reset</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>2. With Commit Hash and option (soft, mixed, hard): change commit histories&nbsp;</strong></h3>\r\n\r\n<p>To change commit histories, you need to specify which commit you want to move back with Commit Hash. By this command,&nbsp;the commits made&nbsp;after the Commit Hash will be erased. As the command can&nbsp;create a significant change, you need to&nbsp;carefully run the command.&nbsp;When changing commit histories, there are three options depending on how you want to change the status of the Staging Area and the Working Tree.</p>\r\n\r\n<ul>\r\n\t<li><strong>--soft</strong>:&nbsp;with this option, INDEX and the Working Tree stay unchanged. Only commit histories are reversed.</li>\r\n\t<li><strong>--mixed</strong> (default option): with this option, only the status of INDEX will be back to the same status as the commit you designated&nbsp;for this command. The Working Tree stays the same. As --mixed is the default option, if you don&#39;t add&nbsp;an option when running the command, the command will act like with the --mixed option.</li>\r\n\t<li><strong>--hard</strong>: with this option, the status of INDEX and the Working Tree will be back to the same status of the commit you designated&nbsp;for this command. You need to be extremely careful to run the&nbsp;command with this option&nbsp;as all the changes made after the designated&nbsp;commit will be erased from the three&nbsp;areas (Working Tree, Staging Area and Commit History).</li>\r\n</ul>\r\n\r\n<p>The followings are the command line examples.</p>\r\n\r\n<pre>\r\n<code>$ git reset --hard [Commit Hash]\r\n$ git reset --mixed [Commit Hash]\r\n$ git reset --soft [Commit Hash]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please read the following practice.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. File and Commit History Preparation</p>\r\n\r\n<p>In this practice, we&#39;ll use the same example as in the<strong> $ git diff </strong>practice explained&nbsp;earlier. Please review the practice section of the&nbsp;<strong>$ git diff</strong>&nbsp;page if you haven&#39;t gone through it yet. The practice file named &quot;<em>git_practice.html</em>&quot; has the following commit histories, INDEX&nbsp;and the Working Tree. Commit Hash is an unique number generated for each commit. When you demonstrate, you see different numbers. For your practice use the Commit Hash generated on your computer.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-15-22-10_UndoChanges%E2%80%94GitReset_IMG_1.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>You can also compare the statuses with the ones in the illustration.&nbsp;The first commit (&nbsp;<em>blue&nbsp;</em>)&nbsp;is Status A. Modified Commit (&nbsp;<em>green&nbsp;</em>)&nbsp;is Status B. Staging Area&nbsp;(&nbsp;<em>yellow&nbsp;</em>)&nbsp; is Status C. And, Working Tree&nbsp;(&nbsp;<em>red&nbsp;</em>)&nbsp; is Status D. The following picture is showing exampleso of initial file and commit&nbsp;settings for this practice.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. $ git reset&nbsp;(clear the Staging Area)</p>\r\n\r\n<p>Before runnign the $ git reset command, let&#39;s comfirm&nbsp;the current status of the Staging Area by&nbsp;running the <strong>$ git diff</strong> command. You&#39;ll see that the color part of the Working Tree is &nbsp;<em>red&nbsp;</em> while the color part of the Staring Area is &nbsp;<em>yellow&nbsp;</em>. ($ git diff gives the changes from the Staging Area to the Working Tree. + part is for the Working Tree and - part is for the Staging Area.)</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git diff</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">-  color:yellow;\r\n+  color:red;</code></pre>\r\n\r\n<p>To clear the files in the Staging Area, you can simply run the <strong>$ git reset</strong> command.&nbsp; To check the changed status, run the <strong>$ git diff</strong> command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git reset\r\n$ git diff</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">-  color:green;\r\n+  color:red;</code></pre>\r\n\r\n<p>You can see that the color part in the Staging Area is now &nbsp;<em>green&nbsp;</em>, which is the same as Head.&nbsp;</p>\r\n\r\n<p>For the next exercise, reverse&nbsp;the Staging Area and the Working Tree to the original setting with the following steps.</p>\r\n\r\n<ul>\r\n\t<li>Update the color part in the Working Tree into &nbsp;<em>yellow&nbsp;</em></li>\r\n\t<li>Run $ git add git_practice.html</li>\r\n\t<li>Update the color part in the Working Tree into &nbsp;<em>red&nbsp;</em></li>\r\n</ul>\r\n\r\n<p>Once you confirm that the status is back to the same as the practice default settings, go to the next exercise.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. $ git reset --soft</p>\r\n\r\n<p><strong>$ git reset </strong>with the <strong>--soft</strong> option is used to change only commit histories. In this practice, we&#39;ll target to back to The first commit, which Commit Hash is 962ec56. On your computer, you see different one. You need to use the Commit Hash generated on your computer.&nbsp;</p>\r\n\r\n<p>To demonstrate the command and confirm the results, run <strong>$ git reset --soft </strong>command followed by <strong>$ git log</strong>.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git reset --soft 962ec56\r\n$ git log --oneline</code></pre>\r\n\r\n<p>In the command line response, you&nbsp;see that Modified commit is disapear and Head becomes The first commit (962ec56) like the one below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>962ec56 (HEAD -&gt; master) The first commit</code></pre>\r\n\r\n<p>Also, check the status of the Stagigng Area and the Working Tree by running the <strong>$ git diff</strong> command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git diff</code></pre>\r\n\r\n<p>You&#39;ll see that the Staging Area and the Working Tree remain the same.</p>\r\n\r\n<ul>\r\n\t<li>Staging Area -&gt; &nbsp;<em>yellow&nbsp;</em> ( after the - mark)</li>\r\n\t<li>Working Tree -&gt; &nbsp;<em>red&nbsp;</em> ( after the + mark)</li>\r\n</ul>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>-  color:yellow;\r\n+  color:red;</code></pre>\r\n\r\n<p>For the next exercise, reverse&nbsp;the commit histories to the original status. When reverse the <strong>$ git reset</strong> operation, you can use <strong>ORIG_HEAD</strong>. ORIG_HEAD is the commit before running <strong>$ git reset</strong> command.</p>\r\n\r\n<p>Run the following commands and see the commit histories are reversed.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git reset ORIG_HEAD\r\n$ git log --oneline</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>d29bfa5 Modified commit\r\n962ec56 The first commit</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. $ git reset --mixed</p>\r\n\r\n<p>The <strong>--mixed</strong> option is default setting. You can run the command without the option to get the same results. You can try the command both with the option and without the option.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git reset --mixed 962ec56</code></pre>\r\n\r\n<p>Or</p>\r\n\r\n<pre>\r\n<code>$ git reset 962ec56</code></pre>\r\n\r\n<p>To check the results, run the <strong>$ git log </strong>and <strong>$ git diff</strong> commands.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git log --oneline</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>962ec56 (HEAD -&gt; master) The first commit</code></pre>\r\n\r\n<p>You can see that Head is now The first commit (962ec56)</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git dff</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>-  color:blue;\r\n+  color:red;</code></pre>\r\n\r\n<p>You can&nbsp;see that the Staging Area becomes&nbsp;the same as Head while the Working Tree remains the same.</p>\r\n\r\n<ul>\r\n\t<li>Staging Area -&gt; &nbsp;<em>blue&nbsp;</em> ( after the - mark). This is the same as Head.</li>\r\n\t<li>Working Tree -&gt; &nbsp;<em>red&nbsp;</em> ( after the + mark)</li>\r\n</ul>\r\n\r\n<p>For the next exercise, reverse&nbsp;the commit histories to the original status by running the&nbsp;<strong>$ git reset</strong>&nbsp;<strong>ORIG_HEAD</strong>&nbsp;command. Also, you need to reverse the Staging Area status as well with the following steps.</p>\r\n\r\n<ul>\r\n\t<li>Update the color part in the Working Tree into &nbsp;<em>yellow&nbsp;</em></li>\r\n\t<li>Run $ git add git_practice.html</li>\r\n\t<li>Update the color part in the Working Tree into &nbsp;<em>red&nbsp;</em></li>\r\n</ul>\r\n\r\n<p>Once you confirm that the status is back to the same as the practice default settings, go to the next exercise.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;5. $ git reset --hard</p>\r\n\r\n<p>The <strong>--hard</strong> option is the strongest option. The command&nbsp;will clear the current Working Tree and Staging Area status,&nbsp;and make them&nbsp;the same as the&nbsp;target commit status. As your efforts can be completely erased by this command, you need to be very careful when you are running the command with this option.</p>\r\n\r\n<p>By running the following commands, you can see the same results as the case of the other options.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git reset --hard 962ec56\r\n$ git log --oneline</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>962ec56 (HEAD -&gt; master) The first commit</code></pre>\r\n\r\n<p>To check the status of the Staging Area, run <strong>$ git diff </strong>or <strong>$ git diff --cached</strong> command. For both commands, you don&#39;t get any reponse as Head, INDEX and the Working Tree become the same status after the<strong> $ git reset --hard </strong>command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git diff\r\n$ git diff --cached</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<p>There is no reponse.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-27T13:42:21.413Z", "updated_at": "2022-03-27T13:42:21.413Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 55, "fields": {"title": "Chapter 6. Work With Branches", "author": 8, "images": "media/uploads/1.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110161010, "meta_keywords": null, "meta_description": null, "content": "<p>In this chapter, we&rsquo;ll explain branch and related key Git commands. Topics covered in this chapter are the following.</p>\r\n\r\n<p>TOPICS</p>\r\n\r\n<ol>\r\n\t<li><strong>Git Regular Workflow &mdash; Work With Branches</strong></li>\r\n\t<li><strong>What Is Branch?</strong></li>\r\n\t<li><strong>Branch Operation Basic Life Cycle</strong></li>\r\n\t<li><strong>Create Branch And Check Branch Status &mdash; Git Branch</strong></li>\r\n\t<li><strong>Switch Current Branch (1) &mdash; Git Checkout</strong></li>\r\n\t<li><strong>Switch Current Branch (2) &mdash; Git Switch</strong></li>\r\n\t<li><strong>Merge Branches &mdash; Git Merge</strong></li>\r\n\t<li><strong>Fast Forward Merge</strong></li>\r\n\t<li><strong>Non Fast Forward Merge (No Option)</strong></li>\r\n\t<li><strong>Non Fast Forward Merge (--no-ff Option)</strong></li>\r\n\t<li><strong>Squash Merge</strong></li>\r\n\t<li><strong>Managing Conflict</strong></li>\r\n\t<li><strong>Rebase Branch &mdash; Git Branch</strong></li>\r\n\t<li><strong>Stash Changes &mdash; Git Stash</strong></li>\r\n</ol>\r\n\r\n<p>To start learning, go to the next page.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:23:57.577Z", "updated_at": "2022-03-28T07:23:57.577Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 56, "fields": {"title": "Git Regular Workflow — Work With Branches", "author": 8, "images": "media/uploads/2_cKizDZb.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110161110, "meta_keywords": null, "meta_description": null, "content": "<p>The goal of this section is to help you understand how to manage branches, which is one of the most critical concepts of the Git operations.&nbsp;</p>\r\n\r\n<p>In this section, we&#39;ll cover six&nbsp;key git commands.</p>\r\n\r\n<ul>\r\n\t<li><strong>$ git branch</strong>: this command is a multi-use command. For example, it is used for creating a new branch, checking branch status and deleting&nbsp;an unused branch.</li>\r\n\t<li><strong>$ git checkout</strong>:<strong> </strong>with this command, you can switch your current branch to a selected branch.&nbsp;</li>\r\n\t<li><strong>$ git switch</strong>: with this command, you can get the same result as $ git checkout. It is a newly introduced command as a substitute of the<strong> </strong>$ git checkout command.</li>\r\n\t<li><strong>$ git merge:</strong>&nbsp;with this command, you can merge branches. The merge operation can be done through a Remote Repository on the GitHub website. Merge operation on GitHub will be explained in the next chapter.</li>\r\n\t<li><strong>$ git rebase</strong>: with this command, you can reapply commits on top of another base branch. This command is useful when you want to streamline the commits diverged into multiple branches. The rebase operation can also be done through a Remote Repository on the GitHub website. It is an option of the merge-feature&nbsp;of&nbsp;GitHub.</li>\r\n\t<li><strong>$ git stash:</strong>&nbsp;with this command, you can separately manage WIP (Work In Progress) codes. When you want to switch the current&nbsp;branch in the middle of editing the Working Tree, the edits can prevent from switching the current branch. In that case, this command is useful. The stashed lines of code are parked somewhere temporarily.&nbsp;</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:26:15.178Z", "updated_at": "2022-03-28T07:26:15.178Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 57, "fields": {"title": "What Is Branch?", "author": 8, "images": "media/uploads/3_5RJRrWC.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110161210, "meta_keywords": null, "meta_description": null, "content": "<p>A <strong>Branch</strong> in Git is an independent line of development with a comit history. Different branches give a different recording space; each branch has its own coding history (a line of commits).&nbsp;</p>\r\n\r\n<p>Branches allow us to manage different versions of the same set of project files simultaneously. For example, one developer can work on adding a new promotion campaign feature while another developer is working on adding a new payment feature to the same web application.&nbsp;</p>\r\n\r\n<p>Git provides a <strong>master branch</strong> as a default. Unless you create a new branch, all your work is done on the master branch. The branch to create a new feature is typically called a <strong>topic branch</strong>.&nbsp;</p>\r\n\r\n<p>Once development is completed in a topic branch, you can <strong>merge</strong>&nbsp;it with the master branch or its&nbsp;parent branch.&nbsp;</p>\r\n\r\n<p>With the branching functionality, you can collaborate with others efficiently. Or even you can utilize branches&nbsp;by yourself to manage&nbsp;versions to develop different features simultaniously.</p>\r\n\r\n<p>We already shared above explanation in Chapter 1. Here, we&#39;ll show how branches are recorded. The slide shows two illustrations. Both illustrations have codes&nbsp;like M1, M2, etc.. Each of them a representation of one commit.&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>The upper&nbsp;illustration with the tree structure&nbsp;describes how branches can diverge and integrate along coding work. This tree illustration is commonly used to have an overvew of branches with commit histories.</li>\r\n\t<li>The lower illustration with the boxes describes how branches are stored. A branch is like a file box to store snapshots of coding history files. When a new commit is made, the snapshot of the project files for the commit is stored in the file box. Also, when one branch merges with another branch, the history of commits are also carried.</li>\r\n</ul>\r\n\r\n<p>You can confirm that the branch tree status on the command line by running the <strong>$ git log</strong> command with the &quot;<strong>--oneline</strong>&quot; and &quot;<strong>--graph</strong>&quot; option. The screenshots of the command line displayed below are the examples of the branch logs aligned with the illustrations.</p>\r\n\r\n<p>The seven digit code is a Commit Hash (short version)&nbsp;and you can also see the status of each branch. You can compare the commit titles&nbsp;(M1, M2,..) with the illustration. As all branches are merged with the master branch, you can see all the branch status from the master branch. However, for&nbsp;Branch A, B and C, you can see the commit histories which is related to their own histories.&nbsp;</p>\r\n\r\n<p><strong>Example 1: Master Branch&#39;s&nbsp;Commit History</strong></p>\r\n\r\n<p>You can see the histories of all the branches from the master branch as all the branches are already merged with the master branch.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-12-10_WhatIsBranch%3F_IMG_1.svg\" target=\"_blank\"><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-12-10_WhatIsBranch%3F_IMG_1.svg\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 2: Branch A&#39;s Commit History</strong></p>\r\n\r\n<p>On the other hand, you have a limited view&nbsp;from Branch A. It is because all the changes after commit A2 were made on the other branches.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-12-10_WhatIsBranch%3F_IMG_2.svg\" target=\"_blank\"><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-12-10_WhatIsBranch%3F_IMG_2.svg\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 3: Branch B&#39;s Commit History</strong></p>\r\n\r\n<p>You can see that Branch C was diverged from&nbsp;Branch B at commit B2 and merged with Branch B at commit B3.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-12-10_WhatIsBranch%3F_IMG_3.svg\" target=\"_blank\"><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-12-10_WhatIsBranch%3F_IMG_3.svg\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 4: Branch C&#39;s Commit History</strong></p>\r\n\r\n<p>You can see that Branch C was diverged from&nbsp;Branch B. However, the commit merging Branch C into Branch B is not visible from Branch C&#39;s status as the merge operation was done on&nbsp;Branch B. There is no impact on Branch C by the merge operation on Branch B.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-12-10_WhatIsBranch%3F_IMG_4.svg\" target=\"_blank\"><img alt=\"IMG_4\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-12-10_WhatIsBranch%3F_IMG_4.svg\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><iframe align=\"middle\" frameborder=\"0\" scrolling=\"no\" src=\"https://youtu.be/Cr_6Z291PDA\" width=\"100%\"></iframe></p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:27:22.858Z", "updated_at": "2022-03-28T07:27:22.858Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 58, "fields": {"title": "Branch Operation Basic Life Cycle", "author": 8, "images": "media/uploads/4_haWViAf.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110161310, "meta_keywords": null, "meta_description": null, "content": "<p>On this page, we&#39;ll explain a basic life cycle for the branch operation with the seven steps.</p>\r\n\r\n<h2>Step 1: Create a new branch</h2>\r\n\r\n<p>As a default setting, you are working on the master branch. Edit and commit operations explained in Chapter 5 were conducted on the master branch.</p>\r\n\r\n<p>When you want to diverge your work from the master branch, you need to create a new branch by running the&nbsp;&nbsp;<strong>$ git branch [new branch name]</strong>&nbsp;command.</p>\r\n\r\n<h2>Step 2: Check the branch status</h2>\r\n\r\n<p>To check your branch status (i.e., the list of branches and the current branch) in the command line, you need to run the <strong>$ git branch</strong> command. When you designate a&nbsp;branch name as the command parameter, the command creates a new branch. For a checking status purpose, you just simply run the command without any parameter.</p>\r\n\r\n<h2>Step 3: Switch branches</h2>\r\n\r\n<p>When you create a new branch by the $ git branch [new branch name] command, you are still on the original branch; if you are creating a new branch in the first time, you are still on the master branch. To move to the new branch, you have to run one of the following commands</p>\r\n\r\n<ul>\r\n\t<li><strong>$ git checkout [branch name]</strong></li>\r\n\t<li><strong>$ git switch [branch name]</strong></li>\r\n</ul>\r\n\r\n<p>Previously, the $ git checkout command is only an option to do this, howerver, $ git switch command was introduced as a substitute of&nbsp;$ git checkout command. Currently, you can use both commands to get the same result.</p>\r\n\r\n<h2>Step 4: Edit and Commit on branches</h2>\r\n\r\n<p>We already explained edit and commit operations in Chapter 4. The practice is applied regardless of branches. What you may need to be careful is on which branch you are operating. When you make a commit, the commit is applied to a specific branch which you are operating on.&nbsp;</p>\r\n\r\n<h2>Step 5: Integrate branches</h2>\r\n\r\n<p>There are two ways to integrate branches: <strong>Merge</strong> and <strong>Rebase</strong>.&nbsp;</p>\r\n\r\n<p>Merge is to join two or more development histories together. You can merge branches by running <strong>$ git merge</strong> in your command line. Rebase is to reapply commits on top of another base branch. The command to implement rebase is <strong>$ git rebase</strong>.&nbsp;</p>\r\n\r\n<p>Both merge and rebase operations can be done on the GitHub platform. On GitHub, rebase is one option of the merge action. The merge operation on GitHub will be explained in the next chapter.</p>\r\n\r\n<h2>Step 6: Manage conflicts</h2>\r\n\r\n<p>If there are changes in the same line of code in different branches, the Git system cannot merge those branches automatically. This situation is called&nbsp;<strong>conflicts</strong>.&nbsp;You need to resolve conflicts before merging the branches. You can manually fix the lines of code to resolve conflicts.</p>\r\n\r\n<h2>Step 7: Delete an unused branch</h2>\r\n\r\n<p>A merged branch is not automatically deleted unless you delete it. After several branching and merging operations, you may see many unused branches in your repository. To delete a branch, you can use the <strong>$ git branch -d [branch name]</strong> command.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>In the following pages, you&rsquo;ll learn how to manage branches in more detail.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:28:48.799Z", "updated_at": "2022-03-28T07:28:48.799Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 59, "fields": {"title": "Create Branch And Check Branch Status — Git Branch", "author": 8, "images": "media/uploads/5_jt1LC6R.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110161410, "meta_keywords": null, "meta_description": null, "content": "<p><strong>$ git branch</strong> is a multi-use command. We&#39;ll explain the three majour&nbsp;usages on this page.</p>\r\n\r\n<h3><strong>Three major usage of the $ git branch command</strong></h3>\r\n\r\n<ol>\r\n\t<li><strong>Creating a new branch</strong></li>\r\n\t<li><strong>Check the branch status</strong></li>\r\n\t<li><strong>Delete an unused existing branch</strong></li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>1. Creating a new branch</p>\r\n\r\n<p>Creating a new branch is the first ation in the branch operation. When running <strong>$ git branch [new branch name]</strong>, a new branch is created on the original branch where you are located, however, you are still on the orginal branch until you switch the currnet branch to the newly created branch by running the <strong>$ git checkout</strong> or <strong>$ git switch</strong> command, which will be explained in the next page. Also, one important note here is a new branch is diverged from the latest commit (HEAD) of the parent branch. Unless you rebase it (to be explained later), the diverged point remains the same.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-14-10_CreateBranchAndCheckBranchStatus%E2%80%94GitBranch_IMG_1.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Check the branch status</p>\r\n\r\n<p>When you simply run the <strong>$ git branch</strong> command without any additions, the command line returns the branch status. The branch status include a list of branches and which branch you are located. In the following exmaple, there are two branches: master branch and Branch_A. The branch with &quot; <strong>*</strong> &quot; is the current branch, which is the master branch in this case.&nbsp;</p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-14-10_CreateBranchAndCheckBranchStatus%E2%80%94GitBranch_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The <strong>$ git branch</strong> command with &quot;<strong>-a</strong>&quot;option returns list of branches including branch information in a Remote Repository recorded in the Local Repository if the Local Repository is already linked with the Remote Repository. Branches in the Remote Repository will be explained in the next chapter.</p>\r\n\r\n<p><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-14-10_CreateBranchAndCheckBranchStatus%E2%80%94GitBranch_IMG_3.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Delete an unused branch</p>\r\n\r\n<p>When you don&#39;t need a branch after merging with another branch, you can delete the branch by running the <strong>$ git branch -d [existing branch name]</strong> command. If the branch you are trying to delete&nbsp;has not been merged with any other branches, the command line gives you an error. If you want to really delete the branch (for example, when you mistakenly made a new branch), you can use&nbsp;<strong>-D</strong> option. <strong>$ git branch -D [existing branch name] </strong>allows you to delete a branch regardless of its merge history.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>There are other usages of the&nbsp;$ git branch command. For example, if you want to change a branch name, you can use the &quot;<strong>-m</strong>&quot; option. Switch&nbsp;to the branch you want to rename. Then, run the <strong>$ git branch -m [new branch name]</strong> command.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:29:49.526Z", "updated_at": "2022-03-28T07:29:49.526Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 60, "fields": {"title": "Switch Current Branch (1) — Git Checkout", "author": 8, "images": "media/uploads/6_0h0uwMi.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110161510, "meta_keywords": null, "meta_description": null, "content": "<p><strong>$ git checkout </strong>is used when you want to switch your branch to a selected branch. As explained in the previous page, the <strong>$ git branch [new branch name]</strong> creates a new branch but the current branch location stays the same.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-15-10_SwitchCurrentBranch%E2%80%94GitCheckout_IMG_1.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>When you use this command with the <strong>-b</strong> option, you can create a new branch and checkout to the new branch at the same time.&nbsp;</p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-15-10_SwitchCurrentBranch%E2%80%94GitCheckout_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>When you checkout to another branch, the Git system try to carry the changes in the Working Tree and INDEX to the distination branch. If the latest commit status of both branches are the same, you can carry the Working Tree and INDEX (see illustration A). However, if one of the branches is already advanced, you cannot checkout to the distination branch (see illustration B).&nbsp;</p>\r\n\r\n<p><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-15-10_SwitchCurrentBranch%E2%80%94GitCheckout_IMG_3.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>When you encounter the situation like illustration B, you&#39;ll see an error message like below.</p>\r\n\r\n<p><a href=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-15-10_SwitchCurrentBranch%E2%80%94GitCheckout_IMG_4.svg\" target=\"_blank\"><img alt=\"IMG_4\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-15-10_SwitchCurrentBranch%E2%80%94GitCheckout_IMG_4.svg\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>To avoid the situation like illustration B, you have some options</p>\r\n\r\n<p><strong>Option 1</strong>. Commit all the changes and make INDEX, Wroking Tree and HEAD the same</p>\r\n\r\n<p><strong>Option 2</strong>. <strong>Stash</strong> the changes (refer the&nbsp;<strong>$ git stash</strong> page)</p>\r\n\r\n<p><strong>Option 3</strong>. Forcefully checkout by running the <strong>$ git checkout</strong> command with the <strong>-f</strong> option</p>\r\n\r\n<p>When you use the <strong>-f</strong> option, you need to be very careful as INDEX and changes in the Working Tree are all cleared.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:31:02.976Z", "updated_at": "2022-03-28T07:31:02.976Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 61, "fields": {"title": "Switch Current Branch (2) — Git Switch", "author": 8, "images": "media/uploads/7_PWQG2rC.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110161610, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;$ git switch</strong> is a newly introduced command as a substitute of the <strong>$ git checkout</strong> command. $ git switch returns the same result as $ git checkout although some options are different. For example, the &quot;<strong>-b</strong>&quot; option for $ git checkout is the &quot;<strong>-c</strong>&quot; option for $ git switch. The following is the key commands with comparison with the $ git checkout command</p>\r\n\r\n<p><strong>Switch the current branch</strong></p>\r\n\r\n<ul>\r\n\t<li>$ git switch [existing branch name]</li>\r\n\t<li>$ git checkout [existing branch name]</li>\r\n</ul>\r\n\r\n<p><strong>Create a new branch and switch to the new branch</strong></p>\r\n\r\n<ul>\r\n\t<li>$ git switch <strong>-c</strong> [new branch name]</li>\r\n\t<li>$ git checkout <strong>-b</strong> [new branch name]</li>\r\n</ul>\r\n\r\n<p><strong>Forcefully switch to another&nbsp;branch</strong></p>\r\n\r\n<ul>\r\n\t<li>$ git switch -f [existing branch name]</li>\r\n\t<li>$ git checkout -f [existing branch name]</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>To understand the following three commands (git branch, git checkout, git switch), please go through the practice below.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Prepare a practice file</p>\r\n\r\n<p>For the&nbsp;practice purpose, create a new directory and a file; prepare a different directory and a file from the previous chapter. We use the following directory and file in this practice.</p>\r\n\r\n<ul>\r\n\t<li>Working directory: <em>git_branch_practice</em></li>\r\n\t<li>File: <em>git_branch_practice.htlml</em></li>\r\n</ul>\r\n\r\n<p>Run the following command&nbsp;to create the new directory and file.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ mkdir git_branch_practice\r\n$ cd git_branch_practice\r\n$ touch git_branch_practice.html</code></pre>\r\n\r\n<p>Open the <em>git_branch_practice.html</em> file with a text editor and make the following edits.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!doctype html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;body&gt;\r\n&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;\r\n\r\n&lt;!-- Branch A--&gt;\r\nN/A\r\n&lt;!-- /Branch A--&gt;\r\n\r\n&lt;!-- Branch B--&gt;\r\nN/A\r\n&lt;!-- /Branch B--&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>For easier understanding, we&#39;ll add texts for each branch under different locations. <strong>&lt;!-- --&gt;</strong> is used for making comments for html file. In the above case, we created three writing areas for each branch: Master Branch, Branch_A and Branch_B. At this stage, an existing&nbsp;branch is only the master branch. For the master branch section, write &quot;M1&quot; udner &lt;h1&gt; tag which will be the same as the&nbsp;commit message which we will create later on.</p>\r\n\r\n<p>Next, commit the file with &quot;M1&quot; as a&nbsp;commit message. Run the follwoing command to execute. As we haven&#39;t initiated Git in the new working directory, run the <strong>$ git init </strong>command first. Add the files under the wokring directory&nbsp;to the Stating Area (in this case, only one file) and commit it. To check the commit status, run the<strong> $ git log </strong>command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git init\r\n$ git add .\r\n$ git commit -m \"M1\"\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You can see that a new commit &quot;M1&quot; is created like the one below</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>5a335b9 (HEAD -&gt; master) M1\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Create a new branch</p>\r\n\r\n<p>Create Branch_A by running the <strong>$ git brach Branch_A</strong> command followed by <strong>$ git branch</strong> to check the branch status.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git branch Branch_A\r\n$ git branch</code></pre>\r\n\r\n<p>You can see that a new branch Branch_A has been created already, however, the current branch is still the master branch like the one below. (The branch with asterisk &quot; <strong>*</strong> &quot; is the current branch)</p>\r\n\r\n<p>&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>  Branch_A\r\n* master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Switch to the new&nbsp;branch</p>\r\n\r\n<p>To make a new edit on the new branch. Switch the current branch to Branch_A by running <strong>$ git checkout </strong>or <strong>$ git switch</strong> command. Also, run $ git branch command to confirm that the current branch is switch to Branch_A.</p>\r\n\r\n<p>&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout Branch_A Or $ git switch Branch_A\r\n$ git branch</code></pre>\r\n\r\n<p>You can see that the current branch is switched to Branch_A like the one below.</p>\r\n\r\n<p>&nbsp;&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* Branch_A\r\n  master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. Edit and commit on the new&nbsp;branch (Branch_A)</p>\r\n\r\n<p>To make another version of the project file, edit the <em>git_branch_practice.html</em> file. In this time, change only the Branch_A section of the file. Change N/A into A1, which will be the same as the&nbsp;first commit message on this branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Branch A--&gt;\r\n&lt;h1&gt;A1&lt;/h1&gt;\r\n&lt;!-- /Branch A--&gt;</code></pre>\r\n\r\n<p>&nbsp;After saving the file, commit the file and check the log.</p>\r\n\r\n<p>&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -am \"A1\"\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You can see that a new commit is created on Branch_A.</p>\r\n\r\n<p>&nbsp;&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>32445b0 (HEAD -&gt; Branch_A) A1\r\n5a335b9 (master) M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>5. Create&nbsp;a new branch and switch to the new branch with shortcut</p>\r\n\r\n<p>Go back to the master branch first to create another&nbsp;new branch from the master branch. To create Branch_B&nbsp;and switch to the branch by one command, run <strong>$ git checkout -b Branch_B</strong>&nbsp;or <strong>$ git switch -c Branch_B</strong>. And check the branch status.</p>\r\n\r\n<p>&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout master\r\n$ git checkout -b Branch_B Or $ git switch -c Branch_B\r\n$ git branch</code></pre>\r\n\r\n<p>You can see that Branch_B is created and it became the current branch.</p>\r\n\r\n<p>&nbsp;&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>  Branch_A\r\n* Branch_B\r\n  master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>6. Edit and commit on the new&nbsp;branch (Branch_B)</p>\r\n\r\n<p>&nbsp;To make another version of the project file, edit the <em>git_branch_practice.html</em> file again. In this time, change only the Branch_B&nbsp;section of the file. Change N/A into B1, which will be the same as the&nbsp;first commit message on this branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Branch B--&gt;\r\n&lt;h1&gt;B1&lt;/h1&gt;\r\n&lt;!-- /Branch B--&gt;</code></pre>\r\n\r\n<p>&nbsp;After saving the file, commit the file with a message of &quot;B1&quot; and check the log.</p>\r\n\r\n<p>&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -am \"B1\"\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You can see that a new commit is created on Branch_B. Although we have made a commit on Branch_A, we cannot see it in this log. This is because Branch_B is diverged from the master branch (not from Branch_A).</p>\r\n\r\n<p>&nbsp;&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>5f7f150 (HEAD -&gt; Branch_B) B1\r\n5a335b9 (master) M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>7. Forcefully switch to another branch</p>\r\n\r\n<p>At the latest situation, you can switch to another branch as all changes are already commited (the Working Tree and the Staging Area are the same as&nbsp;HEAD). To create a situation that you cannot switch to another branch like the case explained in the previous page, edit the practice file again and save it like the one below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Branch B--&gt;\r\n&lt;h1&gt;B1&lt;/h1&gt;\r\n&lt;h1&gt;B2&lt;/h1&gt;\r\n&lt;!-- /Branch B--&gt;</code></pre>\r\n\r\n<p>&nbsp;Af this stage, the above edit is only reflected into the Working Tree and it is not commited. Try to switch to Branch_A with the following command.</p>\r\n\r\n<p>&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout Branch_A</code></pre>\r\n\r\n<p>In this case, you&#39;ll encounter the error message like the one below.&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>error: Your local changes to the following files would be overwritten by checkout:\r\n        git_branch_practice.html\r\nPlease commit your changes or stash them before you switch branches.\r\nAborting</code></pre>\r\n\r\n<p>&nbsp;Now try to switch to Branch_A with the &quot;<strong>-f</strong>&quot; option and check the branch status.</p>\r\n\r\n<p>&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout -f Branch_A\r\n$ git branch</code></pre>\r\n\r\n<p>&nbsp;This time, you successfully swtiched to Branch_A, however, the changes done in the Working Tree is cleared by this command. You can check the status in your file.</p>\r\n\r\n<p>&nbsp;&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* Branch_A\r\n  Branch_B\r\n  master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>8. Delete a branch</p>\r\n\r\n<p>Lastly, delete Branch_B. As the branch has not been merged yet, the &quot;<strong>-d</strong>&quot; option won&#39;t work. Use the &quot;<strong>-D</strong>&quot; option instead. Run the following commands and check the branch status.</p>\r\n\r\n<p>&nbsp;&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git branch -D Branch_B\r\n$ git branch</code></pre>\r\n\r\n<p>You can see that Branch_B is already erased.</p>\r\n\r\n<p>&nbsp;&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* Branch_A\r\n  master</code></pre>\r\n\r\n<p>For the next practice, let&#39;s also delete Branch_A by running the following commands.</p>\r\n\r\n<p>&nbsp;&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git switch master\r\n$ git branch -D Branch_A\r\n$ git branch\r\n</code></pre>\r\n\r\n<p>You can&nbsp;see that only the master branch exists.</p>\r\n\r\n<p>&nbsp;&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:33:17.611Z", "updated_at": "2022-03-28T07:33:17.611Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 62, "fields": {"title": "Merge Branches — Git Merge", "author": 8, "images": "media/uploads/8_MvPE1oU.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110161710, "meta_keywords": null, "meta_description": null, "content": "<p><strong>$ git merge</strong> is the command used when you want to merge branches. The merge operation can be done&nbsp;through&nbsp;the Remote Repository on the GitHub website; it will be explained further in the next chapter.</p>\r\n\r\n<p>When you run the <strong>$ git merge</strong> command, you need to run the commnd from the branch you want to continue to work on, and designate a target branch name which you want to merge into the current branch.</p>\r\n\r\n<p>There are several cases for merge actions depending on the status of branches and command options.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>1. Fast-Forward Merge</p>\r\n\r\n<p>When you are merging a child branch which is simply ahead of the parent branch (no changes in the parent branch after the point when you created the child branch), the <strong>$ git merge</strong> command simply brings changes made in the child branch into the parent branch without creating a new commit.&nbsp;&nbsp;In this case, the status of the branches will shift to the one like the following illustration.</p>\r\n\r\n<p>By this command, HEAD of the master branch moves forward to the point of HEAD of Branch_A. The merge command doesn&#39;t impact the target branch. In this case, there is no change in&nbsp;Branch_A. Simply, the master branch becomes the same as the status of Branch_A.&nbsp;</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-17-10_MergeBranches%E2%80%94GitMerge_IMG_1.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Key Points of Fast-Forward Merge</strong></p>\r\n\r\n<ul>\r\n\t<li><strong>No commit is created</strong></li>\r\n\t<li><strong>HEAD of Master Branch moves forward to the same commit as HEAD of Branch_A</strong></li>\r\n\t<li><strong>Branch_A still remains the same </strong>(it is not deleted by the merge command)</li>\r\n\t<li><strong>Master Branch and Branch_A become&nbsp;the same status</strong></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Non-Fast-Forward Merge</p>\r\n\r\n<p>When the parent branch (e.g., master branch) is already ahead of the diverged point of the child branch, the merge action becomes non-fast-forward merge. In this case, the merge action is recorded as a commmit. When you run the <strong>$ git merge</strong> command, a text editor is launched to add a commit message. Short desctiption is already written in the text editor. You can change the message or just save it. When you close the editor, the merge action is completed. The following illustration describes before and after of the non-fast forward merge.&nbsp;</p>\r\n\r\n<p>In this case, HEAD of the master branch moves forward integrating all commit histories under Branch_A.&nbsp;</p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-17-10_MergeBranches%E2%80%94GitMerge_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Key Points of Non-Fast Forward Merge</strong></p>\r\n\r\n<ul>\r\n\t<li><strong>A commit is created</strong></li>\r\n\t<li><strong>HEAD of Master Branch moves forward with integrating the changes made in Branch_A</strong></li>\r\n\t<li><strong>Branch_A&#39;s commit histories are also recorded under Master Branch</strong></li>\r\n\t<li><strong>Branch_A still remain the same </strong>(it is not deleted by the merge command)</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Non-Fast Forward Merge with the &quot;--no-ff&quot; option</p>\r\n\r\n<p>Even when the status of branches is the same as the fast forward case, you may want to create a commit. If that is the case, you can use the &quot;<strong>--no-ff</strong>&quot; option. The command enforces to create a commit like the illustration below. The merge result becomes almost the same as the previous case; the only difference is that the previous case has commit M4 before HEAD on the master branch.</p>\r\n\r\n<p><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-17-10_MergeBranches%E2%80%94GitMerge_IMG_3.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. Squash Merge</p>\r\n\r\n<p>Squash is another approach when you merge branches. This approach is useful when you don&#39;t want to keep an every single detail of change histories in the master branch. When you run <strong>$ git merge </strong>command with the &quot;<strong>--squash</strong>&quot; option, all the changes made in the target branch are reflected to the marging branch (destination&nbsp;branch: TBC). However, the command doesn&#39;t create a new commit. The changes are only reflected to&nbsp;the Working Tree and INDEX (see the illustration below). When you want to proceed the change, you need to make a new&nbsp;commit by running the <strong>$ git commit</strong> command. By the command, only one new commit is recorded under the master branch.&nbsp;All commits under Branch_A&nbsp;are combined (<strong>squashed</strong>) to the new commit.</p>\r\n\r\n<p><img alt=\"IMG_4\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-17-10_MergeBranches%E2%80%94GitMerge_IMG_4.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Key Points of Squash Merge</strong></p>\r\n\r\n<ul>\r\n\t<li><strong>No commit is created by the $ git merge command</strong></li>\r\n\t<li><strong>The status of Branch_A</strong> (changes made after the diverged point from the master branch: commit A1 and A2) <strong>is integrated to the Working Tree and INDEX of the master branch</strong></li>\r\n\t<li><strong>You need to create&nbsp;</strong><strong>a new commit to record the merge operation</strong></li>\r\n\t<li><strong>Branch_A&#39;s commit histories are not recorded under Master Branch </strong>(All commits under Branch_A&nbsp;are combined (<strong>squashed</strong>) to the new commit)</li>\r\n\t<li><strong>Branch_A still remains the same </strong>(it is not deleted by the merge command)</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:34:13.095Z", "updated_at": "2022-03-28T07:34:13.095Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 63, "fields": {"title": "Fast-forward Merge", "author": 8, "images": "media/uploads/9_nY7MIU8.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110161810, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;On this page, we&#39;ll exaplain about the <strong>Fast-forward merge</strong> in more detail with command line examples.<strong>&nbsp;</strong></p>\r\n\r\n<p>The command line image below is a demonstration of the commit and merge actions, which are the same as the upper illustration&nbsp;on the main slide. M1-3 and A1-2 are commit titles are already made before this demonstration. We&#39;ll explan about the commands and response in the command line by four steps.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-18-10_FastForwardMerge_IMG_1.svg\" /></p>\r\n\r\n<ol>\r\n\t<li>Confirm the original commit history&nbsp;status by running the <strong>$ git log </strong>command on Branch_A. You can see that the commit histories and branch status are the same as the illustration on the main slide.</li>\r\n\t<li>Switch to the master branch and run the <strong>$ git merge Branch_A </strong>command. You can see that this merge is <strong>Fast-forward</strong>.</li>\r\n\t<li>Confirm how the commit history look like on the master branch by running the <strong>$ git log</strong> command. You can see that the HEAD of master branch is moved forward to the same position as the HEAD of Branch_A</li>\r\n\t<li>To confirm the status of&nbsp;Branch_A, switch to Branch_A and run the <strong>$ git log</strong> command. You can see the same result&nbsp;as the one of the master branch. This means that Branch_A and the master branch are in&nbsp;the same status now</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through&nbsp;the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Prepare a practice file</p>\r\n\r\n<p>In this practice, we start with creating the original file with commit M1-M3 and A1-A2. From&nbsp;the previous practice on the Git Switch page, we already have <em>git_branch_practice.html</em> file under <em>git_branch_practice</em>&nbsp;directory. As we already deleted Branch_A and Branch_B, you should have only the master branch by now. The content of the master branch is like the one below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!doctype html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;body&gt;\r\n&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;\r\n\r\n&lt;!-- Branch_A--&gt;\r\nN/A\r\n&lt;!-- /Branch_A--&gt;\r\n\r\n&lt;!-- Branch_B--&gt;\r\nN/A\r\n&lt;!-- /Branch_B--&gt;\r\n\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>To align with the upper illustration on the main slide, let&#39;s make commit M2 and M3 first. For a practice purpose, add &lt;h1&gt;Commit Message (e.g., M1, M2, etc.)&lt;/h1&gt; for each commit so that you can see the linkage between the file content and each commit.&nbsp;</p>\r\n\r\n<p>&nbsp;Add M2 under the html file and save it. Then, make a commit with &quot;M2&quot; as a commit message.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;h1&gt;M2&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -am \"M2\"</code></pre>\r\n\r\n<p><strong>Repeat the same actions for commit M3.</strong></p>\r\n\r\n<p>Next is to create Branch_A and checkout to the branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout -b Branch_A</code></pre>\r\n\r\n<p><strong>To create A1 and A2 commit,&nbsp;repeat the same actions</strong>&nbsp;as what you have done for commit M2 and M3.</p>\r\n\r\n<p>Run the <strong>$ git log</strong> command to see the commit history.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git log --oneline</code></pre>\r\n\r\n<p>You&#39;ll see the following status like below. Commit Hash is a uniqe numbers generated by the computer each time. You&#39;ll see different ones on your computer, however, the structure of commit histories and branch status will be the same.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>b15e35a (HEAD -&gt; Branch_A) A2\r\n3c6b00d A1\r\n33e8f0c (master) M3\r\nafdcd4c M2\r\n5a335b9 M1\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Perform the merge commit</p>\r\n\r\n<p>As you need to run the merge command&nbsp;from the master branch, first switch the current branch to the master branch. Then, run the merge command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git branch master\r\n$ git merge Branch_A</code></pre>\r\n\r\n<p>The command line response shows that&nbsp;<strong>Fast-forward</strong>&nbsp;merge is conducted.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Updating 33e8f0c..b15e35a\r\nFast-forward\r\n git_branch_practice.html | 3 ++-\r\n 1 file changed, 2 insertions(+), 1 deletion(-)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Check commit histories and branch status</p>\r\n\r\n<p>Check the status on the master branch first.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git log --oneline</code></pre>\r\n\r\n<p>You can see that the HEAD of the master branch moved forward to the same position&nbsp;as the HEAD of Branch_A. Also, you can confirm that no new commit is created by this operation.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>b15e35a (HEAD -&gt; master, Branch_A) A2\r\n3c6b00d A1\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>Next, check the status on Branch_A.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout Branch_A\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You can see exactly the same results as the one on the master branch. This means that the master branch and Branch_A are in the same status now.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>b15e35a (HEAD -&gt; Branch_A, master) A2\r\n3c6b00d A1\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:38:43.848Z", "updated_at": "2022-03-28T07:38:43.848Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 64, "fields": {"title": "Non Fast-forward Merge (No Option)", "author": 8, "images": "media/uploads/10_mwXWl3R.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110161910, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;On this page, we&#39;ll exaplain about the <strong>Non-Fast-forward merge</strong> in more detail with command line examples. This page is a continued explanation from the previos page.</p>\r\n\r\n<p>The command line image below is a demonstration of the commit and merge actions, which are the same as the upper illustration&nbsp;on the main slide. M1-3 and A1-2 are commit titles are already made before this demonstration. We&#39;ll explan about the commands and response in the command line by three steps.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-19-10_NonFastForwardMerge(NoOption)_IMG_1.svg\" /></p>\r\n\r\n<ol>\r\n\t<li>You can confirm that commit M4 is already added from the original status on the previous page and the status is aligned with the upper illustration of the main slide.&nbsp;(Please check the practice section below to see how to build this status.)</li>\r\n\t<li>Run the <strong>$ git merge</strong> command. When runnig the command, you&#39;ll see a temporary message on the command line saying &quot;<strong>hint: Waiting for your editor to close the file ...</strong>&quot; and a text editor is launched like the image below. A commit message is already written there. Save and close the editor. In this demo, we are using Visual Studio Code as the registered editor.</li>\r\n\t<li>Check the branch status by running the<strong> $ git log </strong>command. You can see that the HEAD of master is ahead of the Head of Branch_A as we created a new commit for the merge operation.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example: commit message on a&nbsp;text editor</strong></p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-19-10_NonFastForwardMerge(NoOption)_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through&nbsp;the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Prepare a practice file</p>\r\n\r\n<p>In the&nbsp;practice on the previous page, we already made commit M1-3 on the master branch and A1-A2 on Branch_A. Also, merged Branch_A with&nbsp;the master branch. To move back to the original file status, reset the merge operation&nbsp;by running <strong>$ git reset --hard</strong> command on the master branch to reverse the HEAD of the master branch to commit M3. Use the Commit Hash of commit M3 which is&nbsp;generated on your computer. Also, make sure using the &quot;<strong>--hard</strong>&quot; option. If you don&#39;t use the option, the status of Working Tree, Staging Area and HEAD will be mixed.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout master\r\n$ git reset --hard 33e8f0c\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You&#39;ll see that the HEAD of the master branch is back to Commit M3.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>33e8f0c (HEAD -&gt; master) M3\r\nafdcd4c M2\r\n5a335b9 M1\r\n</code></pre>\r\n\r\n<p>Next,&nbsp;create commit M4 to align with the upper illustration of the main slide. Edit&nbsp;the html file (add &lt;h1&gt;M4&lt;/h1&gt;&nbsp;and run&nbsp;the $ git commit command. To check the latest status, run&nbsp;$ git log command again.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;h1&gt;M2&lt;/h1&gt;\r\n&lt;h1&gt;M3&lt;/h1&gt;\r\n&lt;h1&gt;M4&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -am \"M4\"\r\n$ git log --oneline</code></pre>\r\n\r\n<p>Finally, you&#39;ll see the following status, which is aligned with the upper illustration of the main slide for the master branch. As we haven&#39;t touched Branch_A, its status remains the same.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>a7a6063 (HEAD -&gt; master) M4\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Perform the merge commit</p>\r\n\r\n<p>Now you are ready to execte the merge command. As you are already on the master branch, run&nbsp;the following command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git merge Branch_A</code></pre>\r\n\r\n<p>In the&nbsp;Non-Fast-forward case, the command line becomes an interactive mode while a text editor is launched. The text editor is used to write a commit message. A simple message is already written.&nbsp;Unless you want to add another message, you can close the text editor as it is.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/Interactive_icon_blue.svg\" />&nbsp;Command Line - INTERACTIVE</p>\r\n\r\n<pre>\r\n<code>Auto-merging git_branch_practice.html\r\nhint: Waiting for your editor to close the file...</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>Merge branch 'Branch_A'\r\n# Please enter a commit message to explain why this merge is necessary,\r\n# especially if it merges an updated upstream into a topic branch.\r\n#\r\n# Lines starting with '#' will be ignored, and an empty message aborts\r\n# the commit.</code></pre>\r\n\r\n<p>When you closed the editor, the merge command is completed like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Merge made by the 'ort' strategy.\r\n git_branch_practice.html | 3 ++-\r\n 1 file changed, 2 insertions(+), 1 deletion(-)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Check commit histories and branch status</p>\r\n\r\n<p>Check the status on the master branch first. Add the &quot;--graph&quot; option this time as the branch status is slightly&nbsp;more complicated than the previous example.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git log --oneline --graph</code></pre>\r\n\r\n<p>You can see that the HEAD of the master branch is ahead of the HEAD of Branch_A. Also, you can confirm that a new commit is created by this operation.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>*   f1d4276 (HEAD -&gt; master) Merge branch 'Branch_A'\r\n|\\  \r\n| * b15e35a (Branch_A) A2\r\n| * 3c6b00d A1\r\n* | a7a6063 M4\r\n|/  \r\n* 33e8f0c M3\r\n* afdcd4c M2\r\n* 5a335b9 M1</code></pre>\r\n\r\n<p>Next, check the status on Branch_A.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout Branch_A\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You can see that nothing has changed for Branch_A</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>b15e35a (HEAD -&gt; Branch_A) A2\r\n3c6b00d A1\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:39:54.215Z", "updated_at": "2022-03-28T07:39:54.215Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 65, "fields": {"title": "Non Fast-forward Merge (--no-ff Option)", "author": 8, "images": "media/uploads/11.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110162010, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;On this page, we&#39;ll exaplain about the N<strong>on-Fast-forward merge with the &quot;--no-ff&quot; option</strong> in more detail with command line examples.</p>\r\n\r\n<p>The command line image below is a demonstration of the commit and merge actions, which are the same as the upper illustration&nbsp;on the main slide. M1-3 and A1-2 are commit titles are already made before this demonstration. We&#39;ll explan about the commands and response in the command line by three steps.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-20-10_NonFastForwardMerge(--no-ffOption)_IMG_1.svg\" /></p>\r\n\r\n<ol>\r\n\t<li>You can confirm that commit M4 is already erased from the original status on the previous page and the status is aligned with the upper illustration of the main slide. (Please check the practice section below to see how to build this status.)</li>\r\n\t<li>Run the <strong>$ git merge</strong> command with &quot;<strong>--no-ff</strong>&quot; option. When runnig the command, you&#39;ll see a temporary message on the command line saying &quot;<strong>hint: Waiting for your editor to close the file ...</strong>&quot; and a text editor is launched like the image below. A commit message is already written there. Save and close the edito. In this demo, we are using Visual Studio Code as the registered editor.</li>\r\n\t<li>Check the branch status by running the $ git log command. You can see that HEAD of master is ahead of Head of Branch_A as we created a new commit for the merge operation.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example: commit message on a&nbsp;text editor</strong></p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-20-10_NonFastForwardMerge(--no-ffOption)_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through&nbsp;the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Prepare a practice file</p>\r\n\r\n<p>In the&nbsp;practice on the previous page, we create commit M4&nbsp;on the master branch and merged Branch_A with&nbsp;the master branch. To move back to the original file status, reset the merge operation&nbsp;by running <strong>$ git reset --hard</strong> command on the master branch to reverse the HEAD of the master branch to commit M3. Use the Commit Hash of commit M3 which is&nbsp;generated on your computer. Also, make sure using the &quot;<strong>--hard</strong>&quot; option. If you don&#39;t use the option, the status of Working Tree, Staging Area and HEAD will be mixed.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout master\r\n$ git reset --hard 33e8f0c\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You&#39;ll see that the HEAD of the master branch is back to Commit M3, which is aligned with the upper illustration of the main slide for the master branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>33e8f0c (HEAD -&gt; master) M3\r\nafdcd4c M2\r\n5a335b9 M1\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Perform the merge commit</p>\r\n\r\n<p>Now you are ready to execte the merge command. As you are already on the master branch, run&nbsp;the following command with the &quot;<strong>--no-ff</strong>&quot; option.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git merge --no-ff Branch_A</code></pre>\r\n\r\n<p>As the same as the previous page, the command line becomes an interactive mode while a text editor is launched. The text editor is used to write a commit message. A simple message is already written.&nbsp;Unless you want to add another message, you can close the text editor as it is.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/Interactive_icon_blue.svg\" />&nbsp;Command Line - INTERACTIVE</p>\r\n\r\n<pre>\r\n<code>Auto-merging git_branch_practice.html\r\nhint: Waiting for your editor to close the file...</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>Merge branch 'Branch_A'\r\n# Please enter a commit message to explain why this merge is necessary,\r\n# especially if it merges an updated upstream into a topic branch.\r\n#\r\n# Lines starting with '#' will be ignored, and an empty message aborts\r\n# the commit.</code></pre>\r\n\r\n<p>When you closed the editor, the merge command is completed like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Merge made by the 'ort' strategy.\r\n git_branch_practice.html | 3 ++-\r\n 1 file changed, 2 insertions(+), 1 deletion(-)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Check commit histories and branch status</p>\r\n\r\n<p>Check the status on the master branch first. Add the &quot;--graph&quot; option this time as the branch status is slightly&nbsp;more complicated than the previous example.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git log --oneline --graph</code></pre>\r\n\r\n<p>You can see that the HEAD of the master branch is ahead of the HEAD of Branch_A. Also, you can confirm that a new commit is created by this operation. Only differences from the previous case (the Fast-forward no-optin case) is that there is no M4 commit and Commit Hash for the last commit.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>*   769fab1 (HEAD -&gt; master) Merge branch 'Branch_A'\r\n|\\  \r\n| * b15e35a (Branch_A) A2\r\n| * 3c6b00d A1\r\n|/  \r\n* 33e8f0c M3\r\n* afdcd4c M2\r\n* 5a335b9 M1</code></pre>\r\n\r\n<p>Next, check the status on Branch_A.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout Branch_A\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You can see that nothing has changed for Branch_A</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>b15e35a (HEAD -&gt; Branch_A) A2\r\n3c6b00d A1\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:40:56.156Z", "updated_at": "2022-03-28T07:40:56.156Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 66, "fields": {"title": "Squash Merge", "author": 8, "images": "media/uploads/12.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110162110, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;On this page, we&#39;ll exaplain about <strong>merge with the &quot;--squash&quot; option</strong> in more detail with command line examples.</p>\r\n\r\n<p>The command line image below is a demonstration of the commit and merge actions, which are the same as the upper illustration&nbsp;on the main slide. M1-3 and A1-2 are commit titles are already made before this demonstration. We&#39;ll explan about the commands and response in the command line by six steps.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-21-10_SquashMerge_IMG_1.svg\" /></p>\r\n\r\n<ol>\r\n\t<li>You can confirm that commit M4 is already added from the original status on the previous page and the status is aligned with the upper illustration of the main slide.&nbsp;(Please check the practice section below to see how to build this status.)</li>\r\n\t<li>Run the <strong>$ git merge</strong> command with &quot;<strong>--squash</strong>&quot; option. When runnig the command with the option, no commit is created. What happend by the command is to bring changes made on Branch_A to the Working Tree and INDEX.&nbsp;</li>\r\n\t<li>To confirm that the changes are&nbsp;not commited yet on the master branch, run $ git status command. You can see a modified file under INDEX. To understand what changes are made in the file, you can see an example in the image below. To simplify the explanation, we are editing the file aligned with each commit name. For example, add A1 under &lt;h1&gt; tag before making a commit of &quot;A1&quot;. You can see the file on the master branch is an integrated version of master branch (before squash) and Branch_A.&nbsp;</li>\r\n\t<li>To make a record of the change, run the $ git merge command.&nbsp;</li>\r\n\t<li>Check the latest branch status, run the $ git log command on the master branch. You can see that a new commit is created, however, there are not A1 and A2 in the commit history. This means that the squash option combined (squashed)&nbsp;all the changes made on the merging branch to simplify the line of commit history.</li>\r\n\t<li>To check the latest status of Branch_A, switch to Branch_A and run the $ git log command. You can see that nothing&#39;s changed on Branch_A</li>\r\n</ol>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-21-10_SquashMerge_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through&nbsp;the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Prepare a practice file</p>\r\n\r\n<p>In the&nbsp;practice on the previous page, we merged Branch_A with&nbsp;the master branch. To move back to the original file status, reset the merge operation&nbsp;by running <strong>$ git reset --hard</strong> command on the master branch to reverse the HEAD of the master branch to commit M3. Use the Commit Hash of commit M3 which is&nbsp;generated on your computer. Also, make sure using the &quot;<strong>--hard</strong>&quot; option. If you don&#39;t use the option, the status of Working Tree, Staging Area and HEAD will be mixed.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout master\r\n$ git reset --hard 33e8f0c\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You&#39;ll see that the HEAD of the master branch is back to Commit M3.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>33e8f0c (HEAD -&gt; master) M3\r\nafdcd4c M2\r\n5a335b9 M1\r\n</code></pre>\r\n\r\n<p>Next,&nbsp;create commit M4 to align with the upper illustration of the main slide. Edit&nbsp;the html file (add &lt;h1&gt;M4&lt;/h1&gt;&nbsp;and run&nbsp;the $ git commit command. To check the latest status, run&nbsp;$ git log command again.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;h1&gt;M2&lt;/h1&gt;\r\n&lt;h1&gt;M3&lt;/h1&gt;\r\n&lt;h1&gt;M4&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -am \"M4\"\r\n$ git log --oneline</code></pre>\r\n\r\n<p>Finally, you&#39;ll see the following status, which is aligned with the upper illustration of the main slide for the master branch. As we haven&#39;t touched Branch_A, its status remains the same.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>0cbd7c0 (HEAD -&gt; master) M4\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Perform squash merge</p>\r\n\r\n<p>Now you are ready to execte the merge command. As you are already on the master branch, run&nbsp;the following command with the &quot;<strong>--squash</strong>&quot; option.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git merge --squash Branch_A</code></pre>\r\n\r\n<p>&nbsp;In this case, no commit is made as you can see the response in the commandline like below.&nbsp;In stead, changes made on Branch_A are reflected in the Working Tree of the master branch like the one in&nbsp;the text editor below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Auto-merging git_branch_practice.html\r\nSquash commit -- not updating HEAD\r\nAutomatic merge went well; stopped before committing as requested</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!doctype html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;body&gt;\r\n&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;h1&gt;M2&lt;/h1&gt;\r\n&lt;h1&gt;M3&lt;/h1&gt;\r\n&lt;h1&gt;M4&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;\r\n\r\n&lt;!-- Branch_A--&gt;\r\n&lt;h1&gt;A1&lt;/h1&gt;\r\n&lt;h1&gt;A2&lt;/h1&gt;\r\n&lt;!-- /Branch_A--&gt;\r\n\r\n&lt;!-- Branch_B--&gt;\r\nN/A\r\n&lt;!-- /Branch_B--&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>&nbsp;The changes are also staged. To check the status, run the $ git status command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git status</code></pre>\r\n\r\n<p>You can see that&nbsp;<em>git_branch_practice.html</em> was modified and staged (ready to commit).</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>On branch master\r\nChanges to be committed:\r\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\r\n        modified:   git_branch_practice.html</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Make a commit</p>\r\n\r\n<p>As the <strong>$ git merge --squash</strong> command doesn&#39;t create a new commit in a normal setting, you need to run the $ git commit command to make a record like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -am \"Merge Branch_A (Squash)\"</code></pre>\r\n\r\n<p>You can see that a new commit is created like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>[master 294e3af] Merge Branch_A (Squash)\r\n 1 file changed, 2 insertions(+), 1 deletion(-)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Check commit histories and branch status</p>\r\n\r\n<p>Check the status on the master branch first.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git log --oneline</code></pre>\r\n\r\n<p>You can see that a new commit is created, however, there are not A1 and A2 in the commit history. This means that the squash option combined (squashed)&nbsp;all the changes made on the merging branch to simplify the line of commit history.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>294e3af (HEAD -&gt; master) Merge Branch_A (Squash)\r\n0cbd7c0 M4\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>Next, check the status on Branch_A.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout Branch_A\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You can see that nothing has changed for Branch_A</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>b15e35a (HEAD -&gt; Branch_A) A2\r\n3c6b00d A1\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:42:02.033Z", "updated_at": "2022-03-28T07:42:02.033Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 67, "fields": {"title": "Rebase Branch — Git Rebase", "author": 8, "images": "media/uploads/13_erfVVB3.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110162210, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;$ git rebase</strong> is the command when you want to reapply commits on top of another base branch. This command is useful when you want to streamline commits diverged into multiple branches. The rebase operation can also be done through a Remote Repository on the GitHub website. It is an option of&nbsp;merge feature&nbsp;of&nbsp;GitHub.</p>\r\n\r\n<p>One the command line, you need to run the command on the branch to be rebased (a diverged branch)&nbsp;and designate its base branch name as a command parameter.&nbsp;</p>\r\n\r\n<pre>\r\n<code>$ git rebase [base branch name]</code></pre>\r\n\r\n<p>The rebase command changes the diverged point to the HEAD of the base branch. It doesn&#39;t impact the base branch itself. If you want to integrate the changes into the base branch (e.g., master branch), you need to run the merge command on&nbsp;the base branch side. The merge action will be Fast-forward merge as the&nbsp;diverged branch is already ahead of the HEAD of the base branch.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Prepare a practice file</p>\r\n\r\n<p>In the&nbsp;practice on the previous page, we merged Branch_A with&nbsp;the master branch with the squash option. To move back to the status, reset the merge operation&nbsp;by running <strong>$ git reset --hard</strong> command on the master branch to reverse the HEAD of the master branch to commit M4. Use the Commit Hash of commit M4&nbsp;which is&nbsp;generated on your computer. Also, make sure using the &quot;<strong>--hard</strong>&quot; option. If you don&#39;t use the option, the status of Working Tree, Staging Area and HEAD will be mixed.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout master\r\n$ git reset --hard 0cbd7c0\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You&#39;ll see that the HEAD of the master branch is back to Commit M4.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>0cbd7c0 (HEAD -&gt; master) M4\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>Next,&nbsp;create commit M5&nbsp;to align with&nbsp;the illustration on the left&nbsp;of the main slide. Edit&nbsp;the html file (add &lt;h1&gt;M5&lt;/h1&gt;&nbsp;and run&nbsp;the $ git commit command. To check the latest status, run&nbsp;$ git log command again.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;h1&gt;M2&lt;/h1&gt;\r\n&lt;h1&gt;M3&lt;/h1&gt;\r\n&lt;h1&gt;M4&lt;/h1&gt;\r\n&lt;h1&gt;M5&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -am \"M5\"\r\n$ git log --oneline</code></pre>\r\n\r\n<p>Finally, you&#39;ll see the following status, which is aligned with the illustration on the left of the main slide for the master branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>354a66d (HEAD -&gt; master) M5\r\n0cbd7c0 M4\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>Check the status of Branch_A.&nbsp;</p>\r\n\r\n<p>&nbsp;<img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout Branch_A\r\n$ git log --oneline</code></pre>\r\n\r\n<p>As we haven&#39;t touched Branch_A, its status remains the same. Branch_A is diverged at commit M3 of the master branch, which is aligned with the original position of Topic Branch on the illustration of the left of the main slide.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>b15e35a (HEAD -&gt; Branch_A) A2\r\n3c6b00d A1\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Run the rebase command</p>\r\n\r\n<p>Now you are ready to execte the rebase command. As you are already on Branch_A, run&nbsp;the following command.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git rebase master</code></pre>\r\n\r\n<p>You can see that Branch_A was successfully rebased.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Successfully rebased and updated refs/heads/Branch_A.\r\n</code></pre>\r\n\r\n<p>To check the latesst status of Branch_A, run the $ git log command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git log --oneline</code></pre>\r\n\r\n<p>Now you can see that Branch_A was rebased to the HEAD of the master branch (commit M5). In this operation, you can also confirm that the Commit Hashes&nbsp;for commit A1 and A2 are different from the original ones although the committed file versions&nbsp;remain the same.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>f3174bc (HEAD -&gt; Branch_A) A2\r\n6b2c99f A1\r\n354a66d (master) M5\r\n0cbd7c0 M4\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Run the merge command</p>\r\n\r\n<p>The rebase command changed Branch_A status, however, the master branch stays the same; its HEAD is still at commit M5. If you want to integrate the change in Branch_A into the master branch, you need to run the merge command. &nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout master\r\n$ git merge Branch_A</code></pre>\r\n\r\n<p>In this case, the merge operation becomes&nbsp;Fast-forward&nbsp;as Branch_A is reattached to the HEAD of the master.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Updating 354a66d..f3174bc\r\nFast-forward\r\n git_branch_practice.html | 3 ++-\r\n 1 file changed, 2 insertions(+), 1 deletion(-)</code></pre>\r\n\r\n<p>&nbsp;To check the latesst status of the master branch, run the $ git log command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git log --oneline</code></pre>\r\n\r\n<p>Now you can see that the HEAD of the master branch move forward to the same position as the HEAD of Branch_A; the status of the master branch and Branch_A became the same.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>f3174bc (HEAD -&gt; master, Branch_A) A2\r\n6b2c99f A1\r\n354a66d M5\r\n0cbd7c0 M4\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:43:49.081Z", "updated_at": "2022-03-28T07:43:49.081Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 68, "fields": {"title": "Managing Conflict", "author": 8, "images": "media/uploads/14_0aXEm16.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110162310, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;If you work&nbsp;with another developer in the same project and edit the same file on different branches&nbsp;simultaneously, both of you may change the same line in the same file. In this case, it is hard to&nbsp;judge which one becomes&nbsp;the master code. This situation is called a <strong>conflict</strong>. Another case of a conflict is the case that one developer deleted a file while another developer continued working on the file.</p>\r\n\r\n<p>If you try to merge the branches with a conflict, the Git system cannot complete the merge operation automatically. In that case, the Git system creates an alert identifying the location of the conflict through the registered text editor.</p>\r\n\r\n<p>The flow chart below is illustrating&nbsp;typical&nbsp;cases when you run the $ git merge command.&nbsp;</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-23-10_ManagingConflict_IMG_1.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>Run the <strong>$ git merge</strong> command to trigger the merge process.</li>\r\n\t<li>When there is no conflict, the Git system automatically complete the merge process.</li>\r\n\t<li>When there is a conflict, the Git system suspends the automatic merge process. At this point, the merge process is still running manually; the editted files are staged during this process so that the files are ready to be commmited.</li>\r\n\t<li>If you want to stop the merge operation, run the<strong> $ git merge --abort </strong>command. When you run the command, the merge operation is aborted and the status of working files and branches will be back to the status before running the $ git merge command</li>\r\n\t<li>If you want to resolve the conflict and continue the merge operation, edit the conflicted lines of code to resolve the conflict.</li>\r\n\t<li>When the conflict is resolved, you can run the <strong>$ git commit</strong> command to complete the merge operation</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Key Point for</strong></p>\r\n\r\n<p>4</p>\r\n\r\n<p>To resolve the conflict, the Git system suggests four&nbsp;options through the registered text editor like the image below. If you click one of the first three options, the changes are reflected into the text editor. If you click the last &quot;Compare Changes&quot; option, a read-mode text editor launches to show the comparison of the two branches.</p>\r\n\r\n<ol>\r\n\t<li><strong>Accept Current Change</strong> (Keep the changes on the branch where you are executing the merge command)</li>\r\n\t<li><strong>Accept Incoming Change</strong> (Keep the changes on the branch being merged)</li>\r\n\t<li><strong>Accept Both </strong>(Keep the both changes)</li>\r\n\t<li><strong>Compare Changes</strong></li>\r\n</ol>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-23-10_ManagingConflict_IMG_2.svg\" /></p>\r\n\r\n<p>If nono of option 1-3 doesn&#39;t give what you want, you can also edit code further to customize the conflict resolution.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Key Point for</strong></p>\r\n\r\n<p>2</p>\r\n\r\n<p>As explain, the edits done on the conflicted files during the merge process are staged. To check the status, you can run the <strong>$ git status</strong> command, you can see that the modified files are staged already (ready for commit).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Prepare a practice file: create a conflict</p>\r\n\r\n<p>At the end of&nbsp;the&nbsp;practice on the previous page, the master branch and Branch_A became the same status. Check the latest status by running the $ git log command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git log --oneline</code></pre>\r\n\r\n<p>You&#39;ll see that the HEAD of both the master branch and Branch_A is commit A2.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>f3174bc (HEAD -&gt; master, Branch_A) A2\r\n6b2c99f A1\r\n354a66d M5\r\n0cbd7c0 M4\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>To create a conflict, first, revese the master branch to commit M5 by running <strong>$ git reset --hard</strong>&nbsp;command.&nbsp;Use the Commit Hash of commit M5&nbsp;which is&nbsp;generated on your computer. Also, make sure using the &quot;<strong>--hard</strong>&quot; option. If you don&#39;t use the option, the status of Working Tree, Staging Area and HEAD will be mixed.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git reset --hard 354a66d\r\n$ git log --oneline</code></pre>\r\n\r\n<p>You&#39;ll see that the HEAD of the master branch is back to Commit M5.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>HEAD is now at 354a66d M5</code></pre>\r\n\r\n<p>Next, edit the file like below&nbsp;by adding&nbsp;&lt;h1&gt;M6&lt;/h1&gt; after&nbsp;&lt;!-- Branch_A--&gt;, which is supposed to be the&nbsp;editing area for Branch_A. And run the $ git commit command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Branch_A--&gt;\r\n&lt;h1&gt;M6&lt;/h1&gt;\r\n&lt;!-- /Branch_A--&gt;</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -am \"M6\"\r\n$ git log --oneline</code></pre>\r\n\r\n<p>&nbsp;You can see that the HEAD of the master branch is now at commit M6.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>a91b5d1 (HEAD -&gt; master) M6\r\n354a66d M5\r\n0cbd7c0 M4\r\n33e8f0c M3\r\nafdcd4c M2\r\n5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Run the merge command: confirm a conflict</p>\r\n\r\n<p>Now you can run the merge command expecting there is a conflict.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git merge Branch_A</code></pre>\r\n\r\n<p>You&#39;ll see a message saying &quot;Automatic merge failed&quot; in the command line.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Auto-merging git_branch_practice.html\r\nCONFLICT (content): Merge conflict in git_branch_practice.html\r\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre>\r\n\r\n<p>Also, a text editor is launched when you encounter a conflict indicating the location of the conflict like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Branch_A--&gt;\r\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\r\n&lt;h1&gt;M6&lt;/h1&gt;\r\n=======\r\n&lt;h1&gt;A1&lt;/h1&gt;\r\n&lt;h1&gt;A2&lt;/h1&gt;\r\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Branch_A\r\n&lt;!-- /Branch_A--&gt;</code></pre>\r\n\r\n<p>3. Resolve a conflict</p>\r\n\r\n<p>The launched text editor also shows some options to resolve the conflict like the image below.</p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-16-23-10_ManagingConflict_IMG_2.svg\" /></p>\r\n\r\n<p>To resolve the conflict, you can choose one of the options which the text editor is suggesting&nbsp;or you can customize the edits further. In this practice, we customize the edit like below; move&nbsp; &lt;h1&gt;M6&lt;/h1&gt; to after&nbsp;&lt;!-- Master Branch --&gt;.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;h1&gt;M2&lt;/h1&gt;\r\n&lt;h1&gt;M3&lt;/h1&gt;\r\n&lt;h1&gt;M4&lt;/h1&gt;\r\n&lt;h1&gt;M5&lt;/h1&gt;\r\n&lt;h1&gt;M6&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;\r\n\r\n&lt;!-- Branch_A--&gt;\r\n&lt;h1&gt;A1&lt;/h1&gt;\r\n&lt;h1&gt;A2&lt;/h1&gt;\r\n&lt;!-- /Branch_A--&gt;</code></pre>\r\n\r\n<p>At this stage, the change is not reflected to any commit. To check the status, run the $ git status command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git status</code></pre>\r\n\r\n<p>The command line response gives two options: 1) fix conflicts commit the file or 2) abort the merge operation.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>On branch master\r\nYou have unmerged paths.\r\n  (fix conflicts and run \"git commit\")\r\n  (use \"git merge --abort\" to abort the merge)\r\n\r\nUnmerged paths:\r\n  (use \"git add &lt;file&gt;...\" to mark resolution)\r\n        both modified:   git_branch_practice.html</code></pre>\r\n\r\n<p>To complete merge operation, let&#39;s&nbsp;make a new commit.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git commit -am \"Merge Branch_A (fixed conflict)\"\r\n$ git log --oneline --graph</code></pre>\r\n\r\n<p>Now you can see that Branch_A was successfully merged with the master branch like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>*   f1e5a53 (HEAD -&gt; master) Merge Branch_A (fixed conflict)\r\n|\\  \r\n| * f3174bc (Branch_A) A2\r\n| * 6b2c99f A1\r\n* | a91b5d1 M6\r\n|/  \r\n* 354a66d M5\r\n* 0cbd7c0 M4\r\n* 33e8f0c M3\r\n* afdcd4c M2\r\n* 5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:45:18.158Z", "updated_at": "2022-03-28T07:45:18.158Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 69, "fields": {"title": "Stash Changes — Git Stash", "author": 8, "images": "media/uploads/15_OL3Qyvv.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110162410, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;$ git stash </strong>is used to&nbsp;separately manage WIP (Work In Progress) codes.&nbsp;When you want to switch the current&nbsp;branch in the middle of editing the Working Tree and INDEX, the edits can prevent from switching the current branch (refer the $ git checkout page).&nbsp;In that case, this command is useful.&nbsp;The stashed lines of code are parked somewhere temporarily and make the Working Tree and INDEX clean (the Working Tree and INDEX status becomes the same as HEAD) so that you can switch branches.</p>\r\n\r\n<p>Key Git Stash Commands</p>\r\n\r\n<p><strong>$ git stash</strong>: stash the Working Tree and INDEX</p>\r\n\r\n<p><strong>$ git stash save &quot;[stash message]&quot;:&nbsp;</strong>stash the Working Tree and INDEX with a stash message</p>\r\n\r\n<p><strong>$ git stash list</strong>: list up stashed items</p>\r\n\r\n<p><strong>$ git stash apply [stash number]</strong>: restore a stashed item</p>\r\n\r\n<p><strong>$ git stash pop [stash number]</strong>: restore a stashed item and delete it from the stash list</p>\r\n\r\n<p><strong>$ git stash drop [stash number]</strong>: delete a stashed item</p>\r\n\r\n<p><strong>$ git stash clear</strong>: delete all the stashed items</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Prepare a practice file</p>\r\n\r\n<p>In this practice, we use the&nbsp;directory and file used in the practice on the Git switch page:</p>\r\n\r\n<ul>\r\n\t<li>the&nbsp;<em>git_branch_practice</em> directory</li>\r\n\t<li>the <em>git_branch_practice.html</em> file.</li>\r\n</ul>\r\n\r\n<p>At the end of the practice on the Git switch&nbsp;page, we had two branches: the master branch and Branch_A with the following status.</p>\r\n\r\n<p><strong>The master branch:</strong>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;\r\n\r\n&lt;!-- Branch_A--&gt;\r\nN/A\r\n&lt;!-- /Branch_A--&gt;</code></pre>\r\n\r\n<p><strong>Branch_A:</strong>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;\r\n\r\n&lt;!-- Branch_A--&gt;\r\n&lt;h1&gt;A1&lt;/h1&gt;\r\n&lt;!-- /Branch_A--&gt;</code></pre>\r\n\r\n<p>To test the <strong>$ stash</strong> command, edit the file on the master branch like below and save the file, but not commit the file.</p>\r\n\r\n<p><strong>The master branch:</strong>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;h1&gt;M2&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;\r\n\r\n&lt;!-- Branch_A--&gt;\r\nN/A\r\n&lt;!-- /Branch_A--&gt;</code></pre>\r\n\r\n<p>At this stage, the Working Tree is already ahead of the HEAD (the latest commit) of the master branch. As explained on&nbsp;the previous page, you cannot switch to Branch_A. You can confirm it by running <strong>$ git checkout</strong> command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout Branch_A\r\n</code></pre>\r\n\r\n<p>You&#39;ll get an error message like the one below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>error: Your local changes to the following files would be overwritten by checkout:\r\n        git_branch_practice.html\r\nPlease commit your changes or stash them before you switch branches.\r\nAborting</code></pre>\r\n\r\n<p>The command line response suggests two options before you switch&nbsp;branches.</p>\r\n\r\n<ol>\r\n\t<li>Commit the changes</li>\r\n\t<li>Stash the changes</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Run the stash command: $ git stash</p>\r\n\r\n<p>First, test the <strong>$ git stash </strong>command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git stash\r\n</code></pre>\r\n\r\n<p>You&#39;ll see that the following message.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Saved working directory and index state WIP on master: 5a335b9 M1</code></pre>\r\n\r\n<p>When you run the stash command, the editing file in the Working Tree is reverted to HEAD (the latest commit).</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;</code></pre>\r\n\r\n<p>Now you can switch to Branch_A like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout Branch_A\r\n</code></pre>\r\n\r\n<p>You&#39;ll see that the following message.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Switched to branch 'Branch_A'</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Check the stash status: $ git stash list</p>\r\n\r\n<p>To check the list of stashed items, run the <strong>$ git stash list </strong>command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git stash list</code></pre>\r\n\r\n<p>You can see that one item is stashed.&nbsp;stash@{0} is stash number which is used when you restore the stashed item.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>stash@{0}: WIP on master: 5a335b9 M1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Restore a stashed item: $ git stash apply or $ git stash pop</p>\r\n\r\n<p>To restore a stashed item, you have two options. The <strong>$ git stash apply</strong> command simply restores the stashed item. When you run the <strong>$ git stash pop </strong>command, it restores the stashed item and&nbsp;deletes the stashed item from the stashed list.</p>\r\n\r\n<p>In this practice, we use the $ git stash apply command. You can run the command with or without a stash number. If you don&#39;t put stash number, the latest stash is restored. Before running the command, switch back to the master branch first to see the most simple case. (You can restore the stashed items to other branches, however, it may create a conflict.)</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git checkout master\r\n$ git stash apply or git stash apply stash@{0}</code></pre>\r\n\r\n<p>You can see that the file status is back to the one before you run the stash command like the one below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;h1&gt;M2&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;</code></pre>\r\n\r\n<p>On the command line, you can see a message like below. This is the same response when you run the $ git status command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>On branch master\r\nChanges not staged for commit:\r\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\r\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\r\n        modified:   git_branch_practice.html\r\n\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. Delete a stashed item: $ git stash drop&nbsp;or $ git clear</p>\r\n\r\n<p>When you don&#39;t need the stashed item anymore, you can delete the stashed item. To delete one stashed item, you can&nbsp;<strong>$ git stash drop [stash number]</strong>. If you want to clear all the stashed items, you can use <strong>$ git stash clear</strong>. In this practice, we use $ git stash drop. If you don&#39;t designate a stash number, the command delete the latest stash.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git stash drop or git stash drop [stash@{0}]</code></pre>\r\n\r\n<p>You&#39;ll see that a message like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Dropped refs/stash@{0} (34989bc411fd46c49311e7e705ae6aae1f380b78)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. Manage multiple stash items</p>\r\n\r\n<p>When you create multiple stashed items, you may be confused about&nbsp;what is each&nbsp;stash number about. To avoid confusion, you can add a simple stash message when you stash changes&nbsp;by running the <strong>$ git stash save &quot;[stash message]&quot;</strong> command.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git stash save \"M2\"</code></pre>\r\n\r\n<p>You&#39;ll see that a message like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Saved working directory and index state On master: M2</code></pre>\r\n\r\n<p>Edit the html file again&nbsp;by adding&nbsp;&lt;h1&gt;M3&lt;/h1&gt; this time.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1&lt;/h1&gt;\r\n&lt;h1&gt;M3&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;</code></pre>\r\n\r\n<p>&nbsp;Run the <strong>$ git stash save</strong> command with a stash message of &quot;M3&quot;.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git stash save \"M3\"</code></pre>\r\n\r\n<p>Repeat the same process for M4 and M5. And check the stash list.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git stash list</code></pre>\r\n\r\n<p>You can see that the four stashed items are created like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>stash@{0}: On master: M5\r\nstash@{1}: On master: M4\r\nstash@{2}: On master: M3\r\nstash@{3}: On master: M2</code></pre>\r\n\r\n<p>The stash message is useful especially when you delete stashed items. As the stash numbers can change when you delete stashed items. Try the following commands to see the result.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>$ git stash drop\r\n$ git stash list</code></pre>\r\n\r\n<p>You can see that stash@{0} now refers M4. It was previously M5.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>stash@{0}: On master: M4\r\nstash@{1}: On master: M3\r\nstash@{2}: On master: M2</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:46:34.803Z", "updated_at": "2022-03-28T07:46:34.803Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 70, "fields": {"title": "Chapter 7. Remote Collaboration", "author": 8, "images": "media/uploads/16_bvux5MV.svg", "categories": 7, "only_to_my_page": false, "unique_identifier": 204110171010, "meta_keywords": null, "meta_description": null, "content": "<p>In this chapter, we&rsquo;ll explain how to collaborate with others in a project through a Remote Repository on GitHub. Topics covered in this chapter are the following.</p>\r\n\r\n<p>TOPICS</p>\r\n\r\n<ol>\r\n\t<li>Git Regular Workflow &mdash; Remote Collaboration</li>\r\n\t<li>Remote Collaboration Overview</li>\r\n\t<li>Link With Remote Repository &mdash; Git Remote</li>\r\n\t<li>Upload To Remote Repository &mdash; Git Push</li>\r\n\t<li>Download Remote Repository and Merge to Local Repository &mdash; Git Pull</li>\r\n\t<li>Get Remote Repository Information to Local Repository &mdash; Git Fetch</li>\r\n\t<li>Pull vs. Fetch</li>\r\n\t<li>Request For Review and Merge &mdash; Pull Request</li>\r\n\t<li>Merge Operation On GitHub</li>\r\n</ol>\r\n\r\n<p>To start learning, go to the next page.</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:48:17.998Z", "updated_at": "2022-03-28T07:48:17.999Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 71, "fields": {"title": "Git Regular Workflow — Remote Collaboration", "author": 8, "images": "media/uploads/17_JUmsJOL.svg", "categories": 8, "only_to_my_page": false, "unique_identifier": 204110171110, "meta_keywords": null, "meta_description": null, "content": "<p>The goal of this section is to help you fully understand how to collaborate with others through a Remote Repository&nbsp;on GitHub.</p>\r\n\r\n<p>There are two aspects you need to learn about remote collaboration:</p>\r\n\r\n<ol>\r\n\t<li><strong>Key Git Commands</strong></li>\r\n\t<li><strong>GUI (Graphic User Interface) operations on the GitHub website</strong></li>\r\n</ol>\r\n\r\n<h3>1. Key Git commands</h3>\r\n\r\n<p>In this chapter, we&#39;ll cover&nbsp;four key Git commands.</p>\r\n\r\n<ul>\r\n\t<li><strong>$ git remote: </strong>this command is a multi-use command relating to manage a Remote Repository. For example, with the <strong>$ git remote add</strong>&nbsp;command, you can establish a link&nbsp;between a Remote<br />\r\n\tRepository and a&nbsp;Local Repository. The <strong>git remote -v</strong> command shows the status of the link.</li>\r\n\t<li><strong>$ git push: </strong>with this command, you can upload&nbsp;project directories and files along with commit histories for a designated branch from your computer to a Remote Repository</li>\r\n\t<li><strong>$ git pull:</strong> with this command, you can&nbsp;download project directories and files along with commit histories for a designated branch from a Remote Repository.&nbsp;This command also&nbsp;merges the downloaded branch with an existing branch under the Local Repository.</li>\r\n\t<li><strong>$ git fetch:</strong>&nbsp;with this command, you can obtain the latest Remote Repository information and store it in your local computer. This command doesn&#39;t enforce merge branches in&nbsp;the Local Repository. If you want to update the Local Repository, you need to run the <strong>$ git merge</strong>&nbsp;or <strong>$ git checkout</strong> command.&nbsp;</li>\r\n</ul>\r\n\r\n<h3>2. GUI&nbsp;operations on the GitHub website</h3>\r\n\r\n<p>In this chapter, we&#39;ll cover two key features&nbsp;of GitHub.</p>\r\n\r\n<ul>\r\n\t<li><strong>Pull request:</strong>&nbsp;this feature is used to ask&nbsp;a reviewer to review your edits. It is especially used when you want to ask the reviewer to merge&nbsp;your branch (a topic branch)&nbsp;to the main branch&nbsp;(e.g., master branch).</li>\r\n\t<li><strong>Merge:</strong>&nbsp;this feature gives similar functionality as the $ git merge command and the $ git rebase command. You can execute merge or rebase operations on the GitHub website. There are three merge&nbsp;approaches. 1) Create a merge commit, 2) Squash and merge, 3) Rebase and merge.</li>\r\n</ul>", "created_at": "2022-03-28T07:49:38.758Z", "updated_at": "2022-03-28T07:49:38.758Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 72, "fields": {"title": "Remote Collaboration Overview", "author": 8, "images": "media/uploads/18_XrlH43m.svg", "categories": 8, "only_to_my_page": false, "unique_identifier": 204110171210, "meta_keywords": null, "meta_description": null, "content": "<p>In a typical remote collaboration, you need to work on both your local computer (i.e., the command line and a text editor) and a Remote Repository on the GitHub website seamlessly.</p>\r\n\r\n<p>The following is the one of the typical flow of the remote collaboration on Git &amp; GitHub. The first three steps have been already explained in detail in Chapter 4. If you want to review more detail steps, go back to Chapter 4.</p>\r\n\r\n<p>A typical cycle of remote collaboration</p>\r\n\r\n<ol>\r\n\t<li><em>Developer A,</em> a projedt leader and the owner of the Remote Repository, establishes a link between his Local Repository and the Remote Repository used for the project. To establish the connection, he runs&nbsp;the <strong>$ git remote</strong> command.</li>\r\n\t<li>Once <em>Develop A</em>&#39;s Local Repository is linked with the Remote Repository, he can push his project directory to the Remote Repsitory by running the <strong>$ git push</strong> command. He also gives Developer B access to the repository at this point.</li>\r\n\t<li>After <em>Developer B</em> obtained access to the Remote Repository, she can bring the project directory from the repository by running the <strong>$ git clone</strong> command. $ git clone command establishes link between the Remote Repository and her Local Repository, and the command also create a copy of the project direcotry on&nbsp;her local computer&nbsp;</li>\r\n\t<li>From the second time to get project files from the Remote Repository, there are two approaches: 1) Running the <strong>$ git pull </strong>command, 2) Running the <strong>$ git fetch</strong> command followed by the <strong>$ git merge</strong> command. The <strong>$ git pull</strong> command works as the $ git fetch command and $ git merge command. $ git pull command is usefull to save time, however, there are some cases you need to run the $ git fetch command. It will be explained later.</li>\r\n\t<li>Once <em>Developer B</em> obtained the project directory under master branch, she is ready to make her edits (e.g., adding a new feature of the program). To start her editting, she creates a new branch (topic branch) to separate from the main line of code development. After that, she edits the code on the new branch and creates a commit when her work is done.</li>\r\n\t<li>To share the editted code under the topic branch, <em>Developer B</em> pushes the branch into the Remote Repository by running the <strong>$ git push</strong> command.</li>\r\n\t<li>At this stage, the code editted by <em>Developer B</em> is not integrated into the master branch yet. Before integrating&nbsp;it, she asks <em>Developer A</em> to review the code and ask to merge it into the master branch through <strong>Pull Request</strong>. Pull Request is a form on the GitHub to create a request to a reviewer to review code and to merge it with the main branch (e.g., master branch).</li>\r\n\t<li>Once <em>Developer A</em> recieved Pull Request, he reviews the code and make a judgement if the new code is ready to merge or it still requires further edits. If further edits are required, he&nbsp;gives <em>Developer B</em>&nbsp;a feedback on her code.</li>\r\n\t<li>If the code developed by <em>Developer B</em> is already ready to merge, <em>Developer A</em> merges the topic branch into the master branch on the GitHub website.&nbsp;</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>This section gives you information about how to prepare for practices in this chapter. Actual practice will start from the next page.</p>\r\n\r\n<h3><strong>Accounts used in the practice&nbsp;explanation</strong></h3>\r\n\r\n<p>To fully understand the remote collaboration approach&nbsp;with Git and GitHub, you need to understand at least from two different users&#39;&nbsp;perspectives: the&nbsp;owner of the&nbsp;Remote Repository and a collaborator of the Remote Repository. In this chapter, we&#39;ll use the following two users: Developer A and Developer B.</p>\r\n\r\n<p>The roles and account infomation details are described in the illustration below.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-12-10_RemoteCollaborationOverview_IMG_1.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>If there are two roles in the practice section on the same page, we&#39;ll use the following drop-shadow boxes&nbsp;to make clear from which perspective we are explaining the section.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>Describe Developer A&#39;s actions here</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/skyblue.svg\" />&nbsp;<strong>Action by Developer B</strong></p>\r\n\r\n<p>Describe Developer B&#39;s actions here</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>Commit history rules for this practice</strong></h3>\r\n\r\n<p>For a practice purpose, we set&nbsp;a rule for commit messages to follow how each commit is made easily. We use the four codes like below.&nbsp;</p>\r\n\r\n<p><strong>M2LB </strong>(an example)</p>\r\n\r\n<p>M: which branch (e.g., M is Master, A is Branch A)</p>\r\n\r\n<p>2: commit number (e.g., 2 is the second commit on the branch)</p>\r\n\r\n<p>L: Local vs. Remote (L is commited in the&nbsp;Local Repository, R is committed in the Remote Repository)</p>\r\n\r\n<p>B: who committed (e.g., A is Developer A, B is Developer B)</p>\r\n\r\n<p>We also put the commit message in the file to be committed so that you can easily link between the commit and the edited contents.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>Building a practice environment</strong></h3>\r\n\r\n<p>In the&nbsp;real life situation, different developers are using different GitHub accounts and different computers. An ideal practice einvironment is to imitate the situation, however, it may not be realistic to fully imitate the situation. There are some options you can think of:</p>\r\n\r\n<p><strong>Option 1: The most ideal option</strong></p>\r\n\r\n<ul>\r\n\t<li>Remote: Creaete two GitHub accounts (you need two email accounts as well)</li>\r\n\t<li>Local: Create two user accounts on your computer (you need to switch accounts when changing&nbsp;roles)</li>\r\n</ul>\r\n\r\n<p><strong>Option 2: The second best option&nbsp;</strong></p>\r\n\r\n<ul>\r\n\t<li>Remote: Creaete two GitHub account&nbsp;(you need two email accounts as well)</li>\r\n\t<li>Local: Create two parent project directories</li>\r\n</ul>\r\n\r\n<p><strong>Option 3: The minimum option</strong></p>\r\n\r\n<ul>\r\n\t<li>Remote: Creaete one GitHub account</li>\r\n\t<li>Local: Create two parent project directories</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Creating two parent project directories</strong></p>\r\n\r\n<p>Option 1 is closer to the real-life situation, however, it takes some time and efforts, especially&nbsp;to setup different user accounts on your computer. If you want to avoid it, you can create two parent project directories on your computer like the illustration below.</p>\r\n\r\n<p>(The illustration below is an example of the practice environment setup based on option 2 with two GitHub accounts.)</p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-12-10_RemoteCollaborationOverview_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Under each of the parent project directories, you can create a project directory where you&nbsp;can establish its own Local Repository. The image below is for showing an example. Actual directory setup will be explained on the next page.</p>\r\n\r\n<p><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-12-10_RemoteCollaborationOverview_IMG_3.svg\" /></p>\r\n\r\n<p>You also need to launch two text editors and command lines in different windows. To launch them, you can drag &amp; drop the parent directory onto your text editor application like below to open the directory with the editor and the command line terminal.</p>\r\n\r\n<p><img alt=\"IMG_4\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-12-10_RemoteCollaborationOverview_IMG_4.svg\" /></p>\r\n\r\n<p>You can open the two text editors with the command line terminal side by side like below.</p>\r\n\r\n<p><img alt=\"IMG_5\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-12-10_RemoteCollaborationOverview_IMG_5.svg\" /></p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:52:03.743Z", "updated_at": "2022-03-28T07:52:03.743Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 73, "fields": {"title": "Link With Remote Repository — Git Remote", "author": 8, "images": "media/uploads/19_6jWjEQ9.svg", "categories": 8, "only_to_my_page": false, "unique_identifier": 204110171310, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;$ git remote</strong> is the command used when you want to establish and check a linking status between a Remote Repository and your Local Repository. There are some derivative commands and options of this command. We&#39;ll explain five major usages on this page.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Key Git Remote Commands</p>\r\n\r\n<p><strong>$ git remote add:</strong> Establish a link with a Remote Repository</p>\r\n\r\n<p><strong>$ git remote -v:</strong> Check the status of the linked Remote Repository</p>\r\n\r\n<p><strong>$ git remote rm:</strong> Delete the Remote Repository link</p>\r\n\r\n<p><strong>$ git remote set-url:</strong> Change the Remote Repository URL</p>\r\n\r\n<p><strong>$ git remote rename:</strong> Change the Remote Repository name</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>1. $ git remote add: establish a link with a Remote Repository</strong></h3>\r\n\r\n<p>As explained in Chapter 4, when you launch a project as a owner of the Remote Repository, you need to upload your project directory to the Remote Repository first. Before pushing the code, you need to establish a link between your Local Repository and the Remote Repository. The command to estabilsh the link is <strong>$ git remote add</strong>. You need to designate a Remote Repository name and Remote Repository URL like the one below. The Remote Repository name is typically <strong>origin</strong>. The URL is the one you can get from the Remote Repository page on GitHub. For more details, refer Chapter 4.</p>\r\n\r\n<pre>\r\n<code>$ git remote add [Remote Repository name] [Remote Repository URL]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>2. $ git remote -v: check registereed Remote Repositories</strong></h3>\r\n\r\n<p>This command can be more frequently used. After you create a link with a Remote Repository by running the $ git remote add command or the $ git clone command, you may want to check the status of the link. <strong>$ git remote -v </strong>is the command to check the status of the Remote Repository linked with your Local Repository. This command doesn&#39;t require any parameters like below.</p>\r\n\r\n<pre>\r\n<code>$ git remote -v</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>3. $ git remote rm: delete the Remote Repository link</strong></h3>\r\n\r\n<p>When you want to change the current Remote Repository to another repository, you may want to deregister the link with the Remote Repository. The <strong>$ git remote rm</strong> command is used for that case. To run the command, you need to designate the Remote Repository name like the one below.&nbsp;</p>\r\n\r\n<pre>\r\n<code>$ git remote rm [Remote Repository name]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>4. $ git remote set-url: change the Remote Repository URL</strong></h3>\r\n\r\n<p>When you want to change SSH connection to HTTPS connection or simply you want to change the URL of the Remote Repository, you can run the <strong>$ git remote set-url</strong> command. When you run the command, you need to designate the existing Remote Repository name and new URL.</p>\r\n\r\n<pre>\r\n<code>$ git remote set-url [existing Remote Repository name] [new URL]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>5. $ git remote rename: change the Remote Repository name</strong></h3>\r\n\r\n<p>Typical name of&nbsp;a Remote Repository is origin. However, there may be a situation that you want to use a different name for the&nbsp;Remote Repository such as managing multiple Remote Repositories at the same time. You can change the Remote Repository name by running the <strong>$ git remote rename</strong> command.</p>\r\n\r\n<pre>\r\n<code>$ git remote rename [existing Remote Repository name] [new Remote Repository name]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>All actions described below are done from Developer A(project leader)&#39;s point of view</p>\r\n\r\n<p>1. Prepare a practice file</p>\r\n\r\n<p>For this practice, we&#39;ll use the following directory and file. These&nbsp;directory and file will be used throughout the practices in this chapter.</p>\r\n\r\n<ul>\r\n\t<li>Directory: <em>git_remote_practice</em></li>\r\n\t<li>File: <em>git_remote_practice.html</em></li>\r\n</ul>\r\n\r\n<p>To create the directory and file, run the following command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>mkdir git_remote_practice\r\ncd git_remote_practice\r\ntouch git_remote_practice.html</code></pre>\r\n\r\n<p>For the html file, edit like below. We&#39;ll use four branches. For the practice purposes, create coding spaces for each branch. For the first commit on the master branch, add&nbsp;&lt;h1&gt;M1LA&lt;/h1&gt; after&nbsp;&lt;!-- Master Branch--&gt;.&nbsp;M1LA indicates the following for a practice purpose; M: Master Branch,&nbsp;1: the first commit,&nbsp;L: on the Local branch, A: edited&nbsp;by Developer A).</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!doctype html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;body&gt;\r\n&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1LA&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;\r\n\r\n&lt;!-- Branch A--&gt;\r\nN/A\r\n&lt;!-- /Branch A--&gt;\r\n\r\n&lt;!-- Branch B--&gt;\r\nN/A\r\n&lt;!-- /Branch B--&gt;\r\n\r\n&lt;!-- Branch C--&gt;\r\nN/A\r\n&lt;!-- /Branch C--&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>As we are working on a new directory, we need to create a new Local Repository. Also, let&#39;s make the first commit with the commit message of &quot;M1LA&quot;, and check the commit status.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git init\r\ngit add .\r\ngit commit -am \"M1LA\"\r\ngit log --oneline</code></pre>\r\n\r\n<p>You can see that the first commit is successfully made.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>ee8f530 (HEAD -&gt; master) M1LA</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Create a Remote Repository</p>\r\n\r\n<p>Next, create a new Remote Repository for this practice. Go to the GitHub website and log into your account. Click the <strong>+</strong> button on top right and select <strong>New repository</strong>. You&#39;ll reach to the page like below. Add Repository name (use the same name as your project directory (git_remote_practice)&nbsp;to avoid confusion.&nbsp;</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-13-10_LinkWithRemoteRepository%E2%80%94GitRemote_IMG_1.svg\" /></p>\r\n\r\n<p>After you press the green button to creaet a new repository, you&#39;ll see the following Quick setup page. First, we try to use SSH connection. Copy the URL by clicking the bottun on&nbsp;the right.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-13-10_LinkWithRemoteRepository%E2%80%94GitRemote_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;Go back to the&nbsp;command line and run the <strong>$ git remote add</strong>&nbsp;command with a Remote Repository name (typically, &quot;origin&quot; is used) and the URL copied on the GitHub website. Also, run <strong>$ git remote -v </strong>command to check the Remote Repository status.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git remote add origin git@github.com:bloovee/git_remote_practice.git\r\ngit remote -v</code></pre>\r\n\r\n<p>You can see that the Remote Repository is successfully registered in your Local Repository.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>origin  git@github.com:bloovee/git_remote_practice.git (fetch)\r\norigin  git@github.com:bloovee/git_remote_practice.git (push)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Delete a Remote Repository link</p>\r\n\r\n<p>To delete the Repository Repository link, run the <strong>$ git remote rm</strong> command like below. Also, run $ git remote -v command to check the status.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git remote rm origin\r\ngit remote -v</code></pre>\r\n\r\n<p>There will be no response as the Remote Repository is already deleted.</p>\r\n\r\n<p>For the next step, add the Remote Repository again.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git remote add origin git@github.com:bloovee/git_remote_practice.git\r\ngit remote -v</code></pre>\r\n\r\n<p>Confirme that the Remote Repository is correctly registered.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>origin  git@github.com:bloovee/git_remote_practice.git (fetch)\r\norigin  git@github.com:bloovee/git_remote_practice.git (push)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. Change the Remote Repository URL</p>\r\n\r\n<p>In this practice, we try to change the Remote Repository URL from SSH to HTTPS. First, get the new URL from the Remote Repository. Click the HTTPS button and click the right&nbsp;button to copy the URL.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-13-10_LinkWithRemoteRepository%E2%80%94GitRemote_IMG_3.svg\" /></p>\r\n\r\n<p>&nbsp;Run the <strong>$ git remote set-url</strong>&nbsp;command with the copied URL. Also, run the $ git remote -v command to confirm the status.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git remote set-url origin https://github.com/bloovee/git_remote_practice.git\r\ngit remote -v</code></pre>\r\n\r\n<p>&nbsp;You can see that the URL changed to HTTPS URL.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>origin  https://github.com/bloovee/git_remote_practice.git (fetch)\r\norigin  https://github.com/bloovee/git_remote_practice.git (push)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;5. <strong>Change the Remote Repository name</strong></p>\r\n\r\n<p>Lastly, try to change the Remote Repository name. This time change the name from&nbsp;&quot;origin&quot; to &quot;origin_2&quot; like below.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git remote rename origin origin_2\r\ngit remote -v</code></pre>\r\n\r\n<p>You can see that the name has changed to &quot;origin_2&quot;.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>origin_2  https://github.com/bloovee/git_remote_practice.git (fetch)\r\norigin_2  https://github.com/bloovee/git_remote_practice.git (push)</code></pre>\r\n\r\n<p>For the next practice, reverse the name to &quot;origin&quot;.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git remote rename origin_2 origin\r\ngit remote -v</code></pre>\r\n\r\n<p>Confirm the name is changed back to &quot;origin&quot;.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>origin  https://github.com/bloovee/git_remote_practice.git (fetch)\r\norigin  https://github.com/bloovee/git_remote_practice.git (push)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:53:20.039Z", "updated_at": "2022-03-28T07:53:20.039Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 74, "fields": {"title": "Upload To Remote Repository — Git Push", "author": 8, "images": "media/uploads/20_6lr1G0B.svg", "categories": 8, "only_to_my_page": false, "unique_identifier": 204110171410, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;Push</strong> is used when you want to reflect changes in the Local Repository to the Remote Repository. After establishing a link between the Remote Repository and the Local Repository by the <strong>$ git remote add</strong> command or the <strong>$ git clone</strong> command, you can upload your changes into the linked Remote Repository by running the<strong> $ git push</strong> command.&nbsp;</p>\r\n\r\n<p>When you push a branch, you need to specify the branch name after the Remote Repository name. Typically, <strong>origin</strong> is used for a Remote Repository name. The following is an example when you push the master branch to the Remote Repository. (This standard command is already explained in Chapter 4.)</p>\r\n\r\n<pre>\r\n<code>$ git push origin master</code></pre>\r\n\r\n<p>Mainly there are two cases in the push operation.&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>Push an <strong>existing branch</strong> (the branch exists in both the Local Respsitory and the Remote Repository.</li>\r\n\t<li>Push a <strong>new branch</strong> (the branch created in the Local Repository, however, it doesn&#39;t exist in the Remote Repository)</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>1. Push an existing brandh</strong></h3>\r\n\r\n<p>In this case, when you run the push command, the branch is uploaded to the Remote Repository, and Fast-Forward merge&nbsp;is triggered unless the pushed&nbsp;branch doesn&#39;t create conflicts.</p>\r\n\r\n<h3><strong>2. Push a new branch</strong></h3>\r\n\r\n<p>In this case, when you run the push command, the pushed branch is generated in the Remote Repository.&nbsp;</p>\r\n\r\n<h3><strong>3. Conflicts</strong></h3>\r\n\r\n<p>When you push a branch to the Remote Repository, Git checks if the pushed branch creates a conflict. If there is any conflict, the push operation is terminated.&nbsp;</p>\r\n\r\n<p>You&#39;ll see an error messge&nbsp;like the one below when you encounter a conflict.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-14-10_UploadLocalRepositoryToRemoteRepository%E2%80%94GitPush_IMG_1.svg\" /></p>\r\n\r\n<p>For example, you&#39;ll face a conflict when an advanced commit already exists on the same branch in the Remote Repository like Case A in the illustration below: M3R commit already exists in the Remote Repository while&nbsp;M3L commit&nbsp;in the Local Repository is being pushed.</p>\r\n\r\n<p>When you are pushing a new branch it is safer. It will be like Case B in the&nbsp;illustration below: A1 commit in Branch A (new branch) doesn&#39;t conflict with M3R commit in the master branch unless you trigger the merge operation.</p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-14-10_UploadLocalRepositoryToRemoteRepository%E2%80%94GitPush_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>TIPS</p>\r\n\r\n<p><strong>The &quot;-u&quot; option</strong></p>\r\n\r\n<p>In the typical Git operation, you tend to repeat the push commands to upload editted files on&nbsp;the same branch in the same Remote Repository. To avoid typing&nbsp;a Remote Repository name and a branch name everytime, you can use the &quot;<strong>-u</strong>&quot; option or &quot;<strong>&ndash;set-upstream</strong>&quot; option (the meaning of upstream will be explained on&nbsp;the $ git fetch page).&nbsp;After running the command with the &quot;-u&quot; option, you don&#39;t need to designate a Remote Repository name and a branch name again.&nbsp;</p>\r\n\r\n<p>For the first push command</p>\r\n\r\n<pre>\r\n<code>$ git push -u origin master</code></pre>\r\n\r\n<p>After the first command (no need to type origin and master anymore)</p>\r\n\r\n<pre>\r\n<code>$ git push</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>4. After the push operation</strong></h3>\r\n\r\n<p>When you push your code to the Remote Repository, other developers who have access to the Remote Repository (collaborators) can see it on the GitHub website and download it to their local computer by the <strong>$ git pull </strong>or <strong>$ git fetch</strong> command. You can also ask one of the collaborators to review and merge to a main branch (e.g., master branch) by triggering <strong>Pull Request</strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>All actions described below are done from Developer A(project leader)&#39;s point of view</p>\r\n\r\n<p>1. Prepare a practice file</p>\r\n\r\n<p>Use the same file as the previous practice on the previous page (the $ git remote page). We already made one commit on the master branch. If you haven&#39;t prepared the file, go back to the previous page.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Push a file to an existing branch</p>\r\n\r\n<p>As the URL of&nbsp;the Remote Repository is already registered,&nbsp;you are ready to run the push command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git push origin master\r\n</code></pre>\r\n\r\n<p>When you run the command, the command line may ask to type your password. For HTTPS connection, you need to use PAT (Personal Access Token) explained in Chapter 4.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Enumerating objects: 5, done.\r\n:\r\nTo https://github.com/bloovee/git_remote_practice.git\r\n * [new branch]      master -&gt; master</code></pre>\r\n\r\n<p>Go to the Remote Repository on the GitHub website. After refresning the browser, you can see that the project directory git_remote_practice is successfully uploaded to the Remote Repository like below.</p>\r\n\r\n<p><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-14-10_UploadLocalRepositoryToRemoteRepository%E2%80%94GitPush_IMG_3.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Create conflicted commits&nbsp;on the Local and Remote Repositories</p>\r\n\r\n<p>This section is just for a practice puroose. We&#39;ll explain in what condition&nbsp;you cannot execute the push command.</p>\r\n\r\n<p>First, make&nbsp;a new&nbsp;commit directly on the Remote Repository.</p>\r\n\r\n<p>On the Remote Repository,&nbsp;click <em><strong>git_remote_practice.html</strong></em> file</p>\r\n\r\n<p>You can see the contents of the html file like below. Press the <strong>pen mark</strong> on the right to edit the file.</p>\r\n\r\n<p><img alt=\"IMG_4\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-14-10_UploadLocalRepositoryToRemoteRepository%E2%80%94GitPush_IMG_4.svg\" /></p>\r\n\r\n<p>&nbsp;Edit the file like below (adding&nbsp;&lt;h1&gt;M2RA&lt;/h1&gt;).</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1LA&lt;/h1&gt;\r\n&lt;h1&gt;M2RA&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;</code></pre>\r\n\r\n<p>Go the the bottom of the site and add a commit message. In this practice, put &quot;M2RA&quot;.&nbsp;M2RA indicates the following for a practice purpose; M: Master branch, 2: the second&nbsp;commit, R: on the Remote&nbsp;branch, A: edited by Developer A. Select &quot;commit directly to the master branch&quot; and click the green button to commit the change.</p>\r\n\r\n<p><img alt=\"IMG_5\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-14-10_UploadLocalRepositoryToRemoteRepository%E2%80%94GitPush_IMG_5.svg\" /></p>\r\n\r\n<p>Now, go back to the editor on your local computer and edit like below (the same edit as the one on the Remote Repository).</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1LA&lt;/h1&gt;\r\n&lt;h1&gt;M2LA&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;</code></pre>\r\n\r\n<p>Commit the change with the commit message of &quot;M2LA&quot;.&nbsp;M2LA indicates the following for a practice purpose; M: Master branch, 2: the second&nbsp;commit, L: on the Local&nbsp;branch, A: edited by Developer A. And run the $ git log command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git commit -am \"M2LA\"\r\ngit log --oneline</code></pre>\r\n\r\n<p>You can see that the commit history like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>06986d6 (HEAD -&gt; master) M2LA\r\nee8f530 (origin/master) M1LA</code></pre>\r\n\r\n<p>The current stuation is similar to Case A explained in the beginig of this page.&nbsp;</p>\r\n\r\n<p>Run the $ git push command to see the result.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git push origin master</code></pre>\r\n\r\n<p>As there is a commit M2RA in the Remote Repository already, the push command is rejected.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>To https://github.com/bloovee/git_remote_practice.git\r\n ! [rejected]        master -&gt; master (fetch first)\r\n:</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. Push a file to a new&nbsp;branch</p>\r\n\r\n<p>As we cannot push the change to the master branch, create a new branch Branch_A and checkout to the branch. To comfirm the commit history on the branch, also run $ git log command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git checkout -b Branch_A\r\ngit log --oneline</code></pre>\r\n\r\n<p>You can see that the status of&nbsp;Branch_A status is the same as the status of the&nbsp;master branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>06986d6 (HEAD -&gt; Branch_A, master) M2LA\r\nee8f530 (origin/master) M1LA</code></pre>\r\n\r\n<p>Currently, Branch_A doesn&#39;t exist on the Remote Repository. Push Branch_A to see the result.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git push origin Branch_A</code></pre>\r\n\r\n<p>You can see that Branch_A was&nbsp;successfully pushed to the Remote Repository although the code of the master branch and Branch_A are&nbsp;the same. This is because you can avoid clashing code on the same branch and give a room to reconcile on the Remote Repository later.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Enumerating objects: 9, done.\r\n:\r\n * [new branch]      Branch_A -&gt; Branch_A</code></pre>\r\n\r\n<p>Go to the Remote Repository on the GitHub website; exit from the code browsing mode by clicking the git_remote_practice repository. You can&nbsp;confirm that Branch_A was created&nbsp;on&nbsp;the browser like below.</p>\r\n\r\n<p><img alt=\"IMG_6\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-14-10_UploadLocalRepositoryToRemoteRepository%E2%80%94GitPush_IMG_6.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>5. Clean up the master branch conflict</p>\r\n\r\n<p>As we intentionally created conflicted commits commit M2LA and M2RA in the Local Repository and the Remote Repository. Let&#39;s clean up then before going to the next practice. We&#39;ll clean up the commits and branches like the image below.</p>\r\n\r\n<p><img alt=\"IMG_6\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-14-10_UploadLocalRepositoryToRemoteRepository%E2%80%94GitPush_IMG_6_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>First, clean up Branch_A</strong></p>\r\n\r\n<p>Currently, Branch_A and the master branch are the same. We want to create a unique code for Branch_A for a practice purpose.&nbsp;</p>\r\n\r\n<p>Rest commit histories&nbsp;to commit M1LA on Branch_A. This is for&nbsp;recreating&nbsp;Branch_A from the first commit of the master branch as commit M2LA is conflicting with M2RA in the Remote Repository. To execute $ git reset, use a Commit Hash generated on your computer for commit M1LA.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git reset --hard ee8f530</code></pre>\r\n\r\n<p>You can see that the HEAD is back to M1LA.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>HEAD is now at ee8f530 M1LA</code></pre>\r\n\r\n<p>Now create a correct version of Branch_A. Edit the html file like below (adding&nbsp;&lt;h1&gt;A1LA&lt;/h1&gt; after&nbsp;&lt;!-- Branch A--&gt;. A1LA indicates the following for a practice purpose; A: Branch_A, 1: the first commit, L: on the Local&nbsp;branch, A: edited by Developer A.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1LA&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;\r\n\r\n&lt;!-- Branch A--&gt;\r\n&lt;h1&gt;A1LA&lt;/h1&gt; \r\n&lt;!-- /Branch A--&gt;</code></pre>\r\n\r\n<p>Commit the change with the&nbsp;commit message of &quot;A1LA&quot; and check the log.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git commit -am \"A1LA\"\r\ngit log --oneline</code></pre>\r\n\r\n<p>You can see that the HEAD of Branch_A is now A1LA and it is diverged from the master branch at commit M1LA.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>d0a90aa (HEAD -&gt; Branch_A) A1LA\r\nee8f530 (origin/master) M1LA</code></pre>\r\n\r\n<p><br />\r\n&nbsp;As Branch_A on the Remote Repository is still old status, go to the Remote Repository and delete it to avoid a conflict. This is for a practice purpose. You need to carefully manage the process when deleting a branch on the Remote Repository.</p>\r\n\r\n<p>To delete a&nbsp;branch, press the <strong>branch selection&nbsp;pull down</strong>&nbsp;on the left and click <strong>View all branches</strong>.</p>\r\n\r\n<p><img alt=\"IMG_7\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-14-10_UploadLocalRepositoryToRemoteRepository%E2%80%94GitPush_IMG_7.svg\" /></p>\r\n\r\n<p>Click the delete button on&nbsp;Branch_A like the one below.</p>\r\n\r\n<p><img alt=\"IMG_8\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-14-10_UploadLocalRepositoryToRemoteRepository%E2%80%94GitPush_IMG_8.svg\" /></p>\r\n\r\n<p>You can see that Branch_A was successfully deleted like below.</p>\r\n\r\n<p><img alt=\"IMG_9\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-14-10_UploadLocalRepositoryToRemoteRepository%E2%80%94GitPush_IMG_9.svg\" /></p>\r\n\r\n<p>To update Branch_A on the Remote Repository, push Branch_A.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git push origin Branch_A</code></pre>\r\n\r\n<p>You can see that Branch_A was pushed successfully.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Enumerating objects: 6, done.\r\n:\r\n * [new branch]      Branch_A -&gt; Branch_A</code></pre>\r\n\r\n<p>You can also confirm that the latest commit is A1LA on the Remote Repository like the image below.</p>\r\n\r\n<p><img alt=\"IMG_10\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-14-10_UploadLocalRepositoryToRemoteRepository%E2%80%94GitPush_IMG_10.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Next, clean up the master branch</strong></p>\r\n\r\n<p>Switch the current branch to the master branch and check the log.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git checkout master\r\ngit log --oneline</code></pre>\r\n\r\n<p>You can see that M2LA, which is conflicting with the one on the Remote Repository,&nbsp;is still the HEAD of the master branch as we reset it only on Branch_A.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>06986d6 (HEAD -&gt; master) M2LA\r\nee8f530 (origin/master) M1LA</code></pre>\r\n\r\n<p>Reset the master branch to commit M1LA. Use the Commit Hash generated on your computer for commit M1LA.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git reset --hard ee8f530</code></pre>\r\n\r\n<p>You can see that the HEAD of the master branch is now back to M1LA.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>HEAD is now at ee8f530 M1LA</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:54:23.612Z", "updated_at": "2022-03-28T07:54:23.612Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 75, "fields": {"title": "Download Remote Repository and Merge to Local Repository — Git Pull", "author": 8, "images": "media/uploads/21_Dg0HuI5.svg", "categories": 8, "only_to_my_page": false, "unique_identifier": 204110171510, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;Pull</strong> is used when you want to download the latest remote repository information and merge with the existing branch in the Local Repository. <strong>$ git pull</strong>&nbsp;is the commaned used to execute the pull action.&nbsp;The $ git pull command is often explained as a shortcut command of <strong>$ git fetch</strong> and <strong>$ git merge</strong>. As $ git pull command shortcuts to check the Remote Repository information manually, it may create a conflict. For a simple&nbsp;operation, you can use the pull command. However, generally, it is safer to use the $ git fetch command and check the Remote Reopository status first before executing the $ git merge command.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>In this practice, we&#39;ll use the following two different users: <em>Developer A </em>and <em>Developer B</em>.&nbsp;</p>\r\n\r\n<p>1. Download the project files first time: $ git clone</p>\r\n\r\n<p>This is a recap of Chapter 4. If we are already familiar with the process, you can skip this part.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>Before <em>Developer B</em> access the Remote Repository, <em>Developer A</em> needs to grant access.</p>\r\n\r\n<p>Go <strong>Settings</strong> of the repository and select <strong>Manage access</strong>. Press the<strong> green button </strong>to add people.&nbsp;</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-16-10_DownloadRemoteRepositoryandMergetoLocalRepository%E2%80%94GitPull_IMG_1.svg\" /></p>\r\n\r\n<p>Find the collaborator. In this demo, we invite <em><strong>sky-blue2022 (Developer B)</strong></em>.</p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-16-10_DownloadRemoteRepositoryandMergetoLocalRepository%E2%80%94GitPull_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Next explain from the Developer B point of view.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/skyblue.svg\" />&nbsp;<strong>Action by Developer B</strong></p>\r\n\r\n<p>After Developer A send an invitation. Developer B receives an email of the invitation like below.</p>\r\n\r\n<p><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-16-10_DownloadRemoteRepositoryandMergetoLocalRepository%E2%80%94GitPull_IMG_3.svg\" /></p>\r\n\r\n<p>Click <strong>View invitation</strong>&nbsp;and press the <strong>Access invitation</strong> button like the image below.</p>\r\n\r\n<p><img alt=\"IMG_4\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-16-10_DownloadRemoteRepositoryandMergetoLocalRepository%E2%80%94GitPull_IMG_4.svg\" /></p>\r\n\r\n<p>Now you have access to the Remote Repository. To clone the project file, click the Code button and copy the URL for HTTPS.</p>\r\n\r\n<p><img alt=\"IMG_5\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-16-10_DownloadRemoteRepositoryandMergetoLocalRepository%E2%80%94GitPull_IMG_5.svg\" /></p>\r\n\r\n<p>Go to the command line and run the $ git clone command like below. When you run the command, make sure that the current directory is where you want to creat the project directory.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git clone https://github.com/bloovee/git_remote_practice.git</code></pre>\r\n\r\n<p>If the commad is successfuly go through like below, you&#39;ll see that git_remote_practice directory is generated under the directory you executed the clone command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Cloning into 'git_remote_practice'...\r\n:\r\nResolving deltas: 100% (2/2), done.</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Pull a branch: $ git pull</p>\r\n\r\n<p>At this stage, the HEAD of the master branch in each repository are the following.</p>\r\n\r\n<ul>\r\n\t<li>Remote Repository:&nbsp;M2RA</li>\r\n\t<li>Developer A&#39;s Local Repository:&nbsp;M1LA</li>\r\n\t<li>Developer B&#39;s Local Repository: M2RA</li>\r\n</ul>\r\n\r\n<p>From Developer B&#39;s point of view, at this stage, the statuses of the Remote Repository and the Local Repository on the master branch are the same; the HEAD is commit M2RA. This means that there is nothing you can pull on the master branch. However, Developer A&#39;s master branch lags behind.</p>\r\n\r\n<p>To practice&nbsp;the pull command, we&#39;ll do the following actions</p>\r\n\r\n<ol>\r\n\t<li>Pull the master branch on&nbsp;Developer A&#39;s local computer</li>\r\n\t<li>Further edit the master branch on&nbsp;Developer A&#39;s computer and push it to the Remote Repository</li>\r\n\t<li>Pull the updated master branch on Developer B&#39;s local computer</li>\r\n</ol>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>Run the pull command designating the Remote Repository name (origin)&nbsp;and the master branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git pull origin master</code></pre>\r\n\r\n<p>You can see that the master branch was updated by the Fast-forward merge.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>bloovee@MBP git_remote_practice % git pull origin master\r\nremote: Enumerating objects: 5, done.\r\n:\r\nFast-forward\r\n git_remote_practice.html | 3 ++-\r\n 1 file changed, 2 insertions(+), 1 deletion(-)</code></pre>\r\n\r\n<p>&nbsp;To confirm the commit status, check the log.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git log --oneline</code></pre>\r\n\r\n<p>You can see that the HEAD of the master branch in Developer A&#39;s Local Repository is the same as the Remote Repository&#39;s.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>a4e2c2f (HEAD -&gt; master, origin/master) M2RA\r\nee8f530 M1LA</code></pre>\r\n\r\n<p>Next,&nbsp;edit the html file on&nbsp;the master branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Master Branch--&gt;\r\n&lt;h1&gt;M1LA&lt;/h1&gt;\r\n&lt;h1&gt;M2RA&lt;/h1&gt;\r\n&lt;h1&gt;M3LA&lt;/h1&gt;\r\n&lt;!-- /Master Branch--&gt;</code></pre>\r\n\r\n<p>&nbsp;Commit the change with the commit message of &quot;M3LA&quot;&nbsp;and check the log to see the latest status. (M3LA indicates the following for a practice purpose; M: Master Branch, 1: the third&nbsp;commit, L: on the Local&nbsp;branch, A: edited by Developer A.)</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git commit -am \"M3LA\"\r\ngit log --oneline</code></pre>\r\n\r\n<p>You can see that a new commit is successfully created like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>de2bca2 (HEAD -&gt; master) M3LA\r\na4e2c2f (origin/master) M2RA\r\nee8f530 M1LA</code></pre>\r\n\r\n<p>&nbsp;Finally, push the master branch to the Remote Repository.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git push origin master</code></pre>\r\n\r\n<p>You can see that a latest commit is successfully pushed like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Enumerating objects: 5, done.\r\n:\r\n   a4e2c2f..de2bca2  master -&gt; master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Next explain from the Developer B point of view.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/skyblue.svg\" />&nbsp;<strong>Action by Developer B</strong></p>\r\n\r\n<p>&nbsp;Before running the pull command, let&#39;s check the commit status.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git log --oneline</code></pre>\r\n\r\n<p>You can see only two commits at this stage.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>a4e2c2f (HEAD -&gt; master, origin/master, origin/HEAD) M2RA\r\nee8f530 M1LA</code></pre>\r\n\r\n<p>To bring the latest commit made by Developer A to Developer B&#39;s Local Repository, run the pull command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git pull origin master</code></pre>\r\n\r\n<p>You can see that <strong>Fast-forward merge</strong> was executed.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>remote: Enumerating objects: 5, done.\r\n:\r\n * branch            master     -&gt; FETCH_HEAD\r\n   a4e2c2f..de2bca2  master     -&gt; origin/master\r\nUpdating a4e2c2f..de2bca2\r\nFast-forward\r\n git_remote_practice.html | 1 +\r\n 1 file changed, 1 insertion(+)</code></pre>\r\n\r\n<p>Check the commit status again.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git log --oneline</code></pre>\r\n\r\n<p>You can see that commit M3LA&nbsp;made by Developer A was merged with&nbsp;Developer B&#39;s master branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>de2bca2 (HEAD -&gt; master, origin/master, origin/HEAD) M3LA\r\na4e2c2f M2RA\r\nee8f530 M1LA</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Recap of this practice page</p>\r\n\r\n<p>To check the summary of&nbsp;what we have done, you can check the illustration below.</p>\r\n\r\n<p><img alt=\"IMG_7\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-16-10_DownloadRemoteRepositoryandMergetoLocalRepository%E2%80%94GitPull_IMG_7.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:55:43.247Z", "updated_at": "2022-03-28T07:55:43.247Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 76, "fields": {"title": "Get Remote Repository Information to Local Repository — Git Fetch", "author": 8, "images": "media/uploads/22_i7eDDSa.svg", "categories": 8, "only_to_my_page": false, "unique_identifier": 204110171610, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;Fetch</strong> is used when you want to get the latest status of the Remote Repository. The command used to execute Fetch is <strong>$ git fetch</strong>. The command doesn&rsquo;t require a branch name. You&rsquo;ll get the information for all branches under the Remote Repository. To check the Remote Repository branch status, run the <strong>$ git branch -a</strong> command. The command with the <strong>-a</strong> option shows the branch status of the Remote Repository tracked by the local computer.</p>\r\n\r\n<p>There are two major usage for $ git fetch.</p>\r\n\r\n<h3>1. To bring new branch from the Remote Repository</h3>\r\n\r\n<p>&nbsp;As explained on&nbsp;the previous page, $ git pull command doen&#39;t work for a new branch. The Fetch command is useful when a new branch is created in a remote repository and bring it to your Local Repository. The typical command procees is as follows.</p>\r\n\r\n<p>First, run the fetch command to get the remote repository data.</p>\r\n\r\n<pre>\r\n<code>$ git fetch origin </code></pre>\r\n\r\n<p>Then, check the branch name you want to get.</p>\r\n\r\n<pre>\r\n<code>$ git branch -a</code></pre>\r\n\r\n<p>Finally, switch to the new branch you want to move by running the $ git checkout or $ git switch command.</p>\r\n\r\n<pre>\r\n<code>$ git checkout [branch name]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>2. To update an&nbsp;existing&nbsp;branch by&nbsp;the latest status of the Remote Repository</h3>\r\n\r\n<p>You can use&nbsp;the $ git pull command to update an existing branch, however, if you are not sure that the branch status in the Remote Repository, you can run the <strong>$ git fetch </strong>command first followed by the <strong>$ merge</strong> command as follows.</p>\r\n\r\n<p>First, run the fetch command to get the remote repository data.</p>\r\n\r\n<pre>\r\n<code>$ git fetch origin </code></pre>\r\n\r\n<p>Then, run the merge command from the branch you want to update. For the parameter, add &quot;<strong>origin/</strong>&quot; before the branch name you want to update.</p>\r\n\r\n<pre>\r\n<code>$ git merge origin/[Local Repository name]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>To have better understanding on the role of Fetch, understanding the two concepts may be helpful: a remote-tracking branch and an upstream branch. If you are a really beginner of Git, you can skip this section. You can come back here when you build basic understandings of Git.</p>\r\n\r\n<ul>\r\n\t<li><strong>Remote-tracking branch:&nbsp;</strong>the branch&nbsp;tracks a remote repository from the Local Repository (e.g., origin/master, origin/Branch_A)</li>\r\n\t<li><strong>Upstream branch:</strong> the remote repository&nbsp;tracked by the remote-tracking branch</li>\r\n</ul>\r\n\r\n<p>The following explanation by&nbsp;the&nbsp;Git documentation may give you better idea about the remote-tracking branch.</p>\r\n\r\n<p>&quot;<em>Remote-tracking branches are references to the state of remote branches. They&rsquo;re local references that you can&rsquo;t move; Git moves them for you whenever you do any network communication, to make sure they accurately represent the state of the remote repository. Think of them as bookmarks, to remind you where the branches in your remote repositories were the last time you connected to them.</em></p>\r\n\r\n<p><em>Remote-tracking branch names take the form&nbsp;&lt;remote&gt;/&lt;branch&gt;. For instance, if you wanted to see what the&nbsp;master&nbsp;branch on your&nbsp;origin&nbsp;remote looked like as of the last time you communicated with it, you would check the&nbsp;origin/master&nbsp;branch. If you were working on an issue with a partner and they pushed up an&nbsp;iss53&nbsp;branch, you might have your own local&nbsp;iss53&nbsp;branch, but the branch on the server would be represented by the remote-tracking branch&nbsp;origin/iss53.</em>&quot;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>1. Check the limitation of the pull command</p>\r\n\r\n<p>In this part, we&#39;ll explain from the point&nbsp;of veiw of Developer B.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/skyblue.svg\" />&nbsp;<strong>Action by Developer B</strong></p>\r\n\r\n<p>First, the current branch status by running the $ git branch command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git branch\r\n</code></pre>\r\n\r\n<p>You can see only the master branch on the Developer B&#39;s local computer.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* master\r\n</code></pre>\r\n\r\n<p>Next, check the branch status of the Remote Repository with the &quot;<strong>-a</strong>&quot; option. With the option, the $ git branch&nbsp;command give an infomation including the status of the Remote Repository captured in the Local Repository.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git branch -a\r\n</code></pre>\r\n\r\n<p>Now you can see that Branch_A also exists in the Remote Repository. Branch_A was created and pushed in&nbsp;the practice on the git push page.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* master\r\n  remotes/origin/Branch_A\r\n  remotes/origin/HEAD -&gt; origin/master\r\n  remotes/origin/master</code></pre>\r\n\r\n<p>To try to get Branch_A in the Local Repository, run the $ git pull command like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git pull origin Branch_A</code></pre>\r\n\r\n<p>You can see a message like below.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>From https://github.com/bloovee/git_remote_practice\r\n * branch            Branch_A   -&gt; FETCH_HEAD\r\n:\r\nfatal: Need to specify how to reconcile divergent branches.</code></pre>\r\n\r\n<p>To confirm the latest branch status, run the $ git branch command again.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git branch</code></pre>\r\n\r\n<p>You can see only the master branch. This means that <strong>$ git pull </strong>command doesn&#39;t work for a new branch which does&#39;t exist in the Local Repository yet.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Bring a new branch to the Local Repository&nbsp;&mdash; after the pull command execution</p>\r\n\r\n<p>In this part, we&#39;ll explain from the poitn of veiw of Developer B first.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/skyblue.svg\" />&nbsp;<strong>Action by Developer B</strong></p>\r\n\r\n<p>As $ git pull command executes $ git fetch command first, all branch information in the Remote Repository is brought to&nbsp;the Local Repository. We already confirmed it by running the <strong>$ git branch -a</strong> command. To bring a branch already exists in the Remote Repository to the Local Repository, you need to simply run $ git checkout or $ git switch command. Try the&nbsp;command and check the branch status.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git checkout Branch_A\r\ngit branch</code></pre>\r\n\r\n<p>You can see that Branch_A is registered under the Local Repository and it becomes the current branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* Branch_A\r\n  master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Test&nbsp;the fetch command</p>\r\n\r\n<p>As we executed $ git pull command first, the functionality of&nbsp;the $ git fetch command is still not clearly explained. To clearly explain it, create another branch from the repository owener side (Developer A).</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>Create a new branch Branch_B and switch to the branch by running the following command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git checkout -b Branch_B</code></pre>\r\n\r\n<p>You can confirm that the current branch is switched to the new branch Branch_B.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Switched to a new branch 'Branch_B'</code></pre>\r\n\r\n<p>Edit the html file like below (add code after&nbsp;&lt;!-- Branch B--&gt;). B1LA indicates the following for a practice purpose; B: Branch_B, 1: the first commit, L: on the Local&nbsp;branch, A: edited by Developer A.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Branch B--&gt;\r\n&lt;h1&gt;B1LA&lt;/h1&gt;\r\n&lt;!-- /Branch B--&gt;</code></pre>\r\n\r\n<p>Commit the change and check the log.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git commit -am \"B1LA\"\r\ngit log --oneline</code></pre>\r\n\r\n<p>You can confirm that a new commit is made on Branch_B.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>23a03f0 (HEAD -&gt; Branch_B) B1LA\r\n3c51257 (origin/master, master) M3LA\r\na4e2c2f M2RA\r\nee8f530 M1LA</code></pre>\r\n\r\n<p>&nbsp;Push the new branch&nbsp;Branch_B.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git push origin Branch_B</code></pre>\r\n\r\n<p>You can confirm that the new branch Branch_B was pushed to the Remote Repository like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Enumerating objects: 5, done.\r\n:\r\n * [new branch]      Branch_B -&gt; Branch_B</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Let&#39;s also update&nbsp;Branch_A&nbsp;to do another test. Switch to Branch_A.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code> git checkout Branch_A</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Switched to branch 'Branch_A'</code></pre>\r\n\r\n<p>&nbsp;Edit the file like below (Add A2LA).&nbsp;A2LA indicates the following for a practice purpose; A: Branch_A, 2: the second&nbsp;commit, L: on the Local&nbsp;branch, A: edited by Developer A.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Branch A--&gt;\r\n&lt;h1&gt;A1LA&lt;/h1&gt;\r\n&lt;h1&gt;A2LA&lt;/h1&gt;\r\n&lt;!-- /Branch A--&gt;</code></pre>\r\n\r\n<p>&nbsp;And, commit the change and check the log.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git commit -am \"A2LA\"\r\ngit log --oneline</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>4ba3298 (HEAD -&gt; Branch_A) A2LA\r\nd0a90aa (origin/Branch_A) A1LA\r\nee8f530 M1LA</code></pre>\r\n\r\n<p>Push it to the Remote Repository.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git push origin Branch_A</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Enumerating objects: 5, done.\r\n:\r\n   d0a90aa..4ba3298  Branch_A -&gt; Branch_A</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Next, we&#39;ll try to bring the new commit to Developer B&#39;s Local Repository by running the $ git fetch command.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/skyblue.svg\" />&nbsp;<strong>Action by Developer B</strong></p>\r\n\r\n<p>To check the Remote Repository status in Developer B&#39;s Local Repository, run the <strong>$ git branch -a</strong> command.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git branch -a</code></pre>\r\n\r\n<p>You can see that there is no infomation about Branch_B.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* Branch_A\r\n  master\r\n  remotes/origin/Branch_A\r\n  remotes/origin/HEAD -&gt; origin/master\r\n  remotes/origin/master</code></pre>\r\n\r\n<p>&nbsp;Run the <strong>$ git fetch</strong> command to update the Remote Repository informaiton.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git fetch</code></pre>\r\n\r\n<p>You can see that there are two updates</p>\r\n\r\n<ol>\r\n\t<li>Branch_A is updated</li>\r\n\t<li>new branch Branch_B is created</li>\r\n</ol>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>remote: Enumerating objects: 10, done.\r\n:\r\n   d0a90aa..4ba3298  Branch_A   -&gt; origin/Branch_A\r\n * [new branch]      Branch_B   -&gt; origin/Branch_B</code></pre>\r\n\r\n<p>Run the&nbsp;<strong>$ git branch -a</strong> command again to see the latest branch status.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git branch -a</code></pre>\r\n\r\n<p>You can see that Branch_B is under the Remote Repository, however, it is still not in the Local Repository.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* Branch_A\r\n  master\r\n  remotes/origin/Branch_A\r\n  remotes/origin/Branch_B\r\n  remotes/origin/HEAD -&gt; origin/master\r\n  remotes/origin/master</code></pre>\r\n\r\n<p>To bring it to the Local Repository, run the $ git checkout or $ git switch command like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git checkout Branch_B</code></pre>\r\n\r\n<p>You can see that the current branch is switched to&nbsp;Branch_B like below.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Branch 'Branch_B' set up to track remote branch 'Branch_B' from 'origin'.\r\nSwitched to a new branch 'Branch_B'</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>You also need to update Branch_A. Switch to Branch_A.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git checkout Branch_A</code></pre>\r\n\r\n<p>You can see a message saying Branch_A is behind.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Switched to branch 'Branch_A'\r\nYour branch is behind 'origin/Branch_A' by 1 commit, and can be fast-forwarded.\r\n  (use \"git pull\" to update your local branch)</code></pre>\r\n\r\n<p>To update Branch_A, you can run the $ git pull command or the $ git merge command. For a practice purpose, we use $ git merge command here. Use &quot;origin/Branch_A&quot; as the parameter of the command.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git merge origin/Branch_A</code></pre>\r\n\r\n<p>You can see that the Fast-forward merge was executed.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Updating d0a90aa..4ba3298\r\nFast-forward\r\n git_remote_practice.html | 3 ++-\r\n 1 file changed, 2 insertions(+), 1 deletion(-)</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>5. Checking the branch status</p>\r\n\r\n<p>Now all repositories (Developer A&#39;s Local Repository, Developer B&#39;s Local Repository and the Remote Repository) are the same status.</p>\r\n\r\n<p>To see the status of the Remote Repository, go the repository on the GitHub website. Select Branch_B on the branch selection pull down on the left and click the <strong>clock button</strong> on the right.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-17-10_GetRemoteRepositoryInformationtoLocalRepository%E2%80%94GitFetch_IMG_1.svg\" /></p>\r\n\r\n<p>You can see the commit histories of the Branch_B in the Remote Repository.</p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-17-10_GetRemoteRepositoryInformationtoLocalRepository%E2%80%94GitFetch_IMG_2.svg\" /></p>\r\n\r\n<p>To check the summary of&nbsp;what we have done, you can check the illustration below.</p>\r\n\r\n<p><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-17-10_GetRemoteRepositoryInformationtoLocalRepository%E2%80%94GitFetch_IMG_3.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:57:20.874Z", "updated_at": "2022-03-28T07:57:20.874Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 77, "fields": {"title": "Pull vs. Fetch", "author": 8, "images": "media/uploads/23_7ioLuZ4.svg", "categories": 8, "only_to_my_page": false, "unique_identifier": 204110171710, "meta_keywords": null, "meta_description": null, "content": "<p>This page is a recap to give a comparison between <strong>Pull</strong> and <strong>Fetch</strong>.</p>\r\n\r\n<p>The key difference between Pull (the <strong>$ git pull</strong> command) and Fetch (the <strong>$ git fetch</strong> command) is whether&nbsp;the command execute&nbsp;a merge action or not.</p>\r\n\r\n<p>The both commands download&nbsp;commits and files&nbsp;from a remote repository under the&nbsp;remote-traking branches. The pull command seamlessly trigger the merge action for the designated branch, howerver, what the fetch command does is the&nbsp;remote-traking branches (the Remote Repository information).</p>\r\n\r\n<p>Typically, the pull command is used for efficiency of operations.&nbsp;For a simple&nbsp;operation, you can use the pull command. However, generally, it is safer to use the $ git fetch command and check the Remote Reopository status first before executing the $ git merge command.</p>", "created_at": "2022-03-28T07:58:35.451Z", "updated_at": "2022-03-28T07:58:35.451Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 78, "fields": {"title": "Request For Review and Merge — Pull Request", "author": 8, "images": "media/uploads/24_Uzu82mg.svg", "categories": 8, "only_to_my_page": false, "unique_identifier": 204110171810, "meta_keywords": null, "meta_description": null, "content": "<p><strong>&nbsp;Pull Request </strong>in GitHub is used to create a request to review&nbsp;changes on a topic branch&nbsp;and merge it&nbsp;with a main branch (e.g., the master branch). It has nothing to do with the pull command although the naming is similar. To avoid confusion, you can memorize it as merge request. In GitLab, it is in fact called <strong><em>merge request</em></strong>.</p>\r\n\r\n<p>Before triggering a Pull Request, you need to push an edited branch to a Remote Repository. After pushing the branch, you can ask a reviewer to review and merge with the main branch. You can initiate a&nbsp;Pull Request on the GitHub website. The Pull Request&nbsp;operation is typically done through a&nbsp;web browser.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>The scenario of this practice is the following</p>\r\n\r\n<ol>\r\n\t<li>Developer B works on creating a new feature on a new branch Branch_C, and pushes the code to the Remote Repository</li>\r\n\t<li>Developer B&nbsp;triggers a Pull Request to ask Developer A to review and merge the branch to the master branch</li>\r\n\t<li>Developer A reviews the code on Branch_C and gives a feedback to Developer B</li>\r\n\t<li>Developer B modifys the code on Branch_C based on the feedback from Developer A</li>\r\n\t<li>Developer A finally approves the change&nbsp;on Branch_C and merges it with the master branch</li>\r\n\t<li>Developer B sees Developer A&#39;s approval</li>\r\n</ol>\r\n\r\n<p>1. Create&nbsp;a new feature on a new branch</p>\r\n\r\n<p>In this step, Developer B creates Branch_C diverged from the master branch and&nbsp;edits the html file as if writing code to create a new feature on the branch. Also, make some commits and push Branch_C to the Remote Repository.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/skyblue.svg\" />&nbsp;<strong>Action by Developer B</strong></p>\r\n\r\n<p>First, create a new branch Branch_C from the master branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git checkout master\r\ngit checkout -b Branch_C</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Switched to a new branch 'Branch_C'</code></pre>\r\n\r\n<p>&nbsp;Edit the html file like below (add&nbsp;&lt;h1&gt;C1LB&lt;/h1&gt; after&nbsp;&lt;!-- Branch C--&gt;. C1LB&nbsp;indicates the following for a practice purpose; C: Branch_C, 1: the first commit, L: on the Local&nbsp;branch, B: edited by Developer B.)</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Branch C--&gt;\r\n&lt;h1&gt;C1LB&lt;/h1&gt;\r\n&lt;!-- /Branch C--&gt;</code></pre>\r\n\r\n<p>Commit the change&nbsp;with the commit message of &quot;C1LB&quot; like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git commit -am \"C1LB\"</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>[Branch_C 8c3d8a0] C1LB\r\n 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre>\r\n\r\n<p>Repeat the same process of editing the file and commiting the change&nbsp;twice. Use C2LB and C3LB for each commit respectively, and check the log to see the latest status.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git log --oneline</code></pre>\r\n\r\n<p>You can see that there are three new commits on Branch_C.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>884d938 (HEAD -&gt; Branch_C) C3LB\r\n1fbe7ca C2LB\r\n8c3d8a0 C1LB\r\nde2bca2 (origin/master, origin/HEAD, master) M3LA\r\na4e2c2f M2RA\r\nee8f530 M1LA</code></pre>\r\n\r\n<p>&nbsp;Next, push Branch_C to the Remote Repository.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git push origin Branch_C</code></pre>\r\n\r\n<p>You can see that Branch_C is successfuly pushed like below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Enumerating objects: 11, done.\r\n:\r\n * [new branch]      Branch_C -&gt; Branch_C</code></pre>\r\n\r\n<p>Now you can go to the next step.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Trigger a Pull Request to ask for review and merge</p>\r\n\r\n<p>In this step, Developer B&nbsp;triggers a Pull Request to ask Developer A to review and merge the branch to the master branch.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/skyblue.svg\" />&nbsp;<strong>Action by Developer B</strong></p>\r\n\r\n<p>1) When you push a branch to the remote repository, usually&nbsp;a message about the push is displayed in the Remote Repository site. To start to create a new Pull Request, clikc the&nbsp;<strong>Compare &amp; pull request button</strong>.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_1.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2) To create a Pull Request, you need to select&nbsp;a <strong>base branch</strong> and the&nbsp;<strong>branch being merged</strong> shown after &quot;<strong>compare</strong>&quot;. In this case, Developer B selects the master branch for the base branch and Branch_C to compare. To go to the next step, press&nbsp;the <strong>Create pull request button</strong>.</p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3) A Pull Request has two main elements:&nbsp;the <strong>Pull Request message</strong> (PR message) and <strong>reviewers</strong>.</p>\r\n\r\n<p>In the PR message, typically, you need to describe what is the changes about and why you are making the changes. You can write a message in markdown. You can also create a template for a PR message to standardize the message format in the team.</p>\r\n\r\n<p>For reviewers, you can select multiple reviewers. In this practice demonstration, we select Developer A: bloovee.</p>\r\n\r\n<p>To create the Pull Request, click the <strong>Create pull request</strong> button.</p>\r\n\r\n<p><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_3.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Review&nbsp;the code on the new branch and give a feedback</p>\r\n\r\n<p>In this step,&nbsp;Developer A reviews the code on Branch_C and gives a feedback to Developer B.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>1) When a Pull Request is generated, the repository owener and the reviewers receive an email notification like below. In this practice demo, Developer A is the owner and the reviewer. He receives two email notifications. On&nbsp;the email, you can find the link of the Pull Request. Click the link to go to the next step.</p>\r\n\r\n<p><strong>An email sent to the repository owner:</strong></p>\r\n\r\n<p><img alt=\"IMG_4\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_4.svg\" /></p>\r\n\r\n<p><strong>An email sent to reviewers:</strong></p>\r\n\r\n<p><img alt=\"IMG_5\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_5.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2) On the Pull Request page, there are several tabs. The <strong>Conversation</strong> tab is the one which you need to take a look first. It describes the overview of the pull request with the commit history information.</p>\r\n\r\n<p><img alt=\"IMG_6\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_6.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3) Another tab you need to check is&nbsp;the <strong>Files changed</strong> tab. On the tab, you can find the key changes commited by the requester (in this case, Developer B: sky-blue202122). As a reviewer, you can add review comments line by line before making an overall review message. When you click&nbsp;the <strong>Add single comment</strong> button, the message is immediately going to the Conversation section so that other team members can see it. When you want to make a more comprehensive review, clidk&nbsp;the <strong>Start a review</strong> button.</p>\r\n\r\n<p><img alt=\"IMG_7\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_7.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4) After&nbsp;starting a review, you can&nbsp;continue to review line by line. When you are ready to finish the review, click the <strong>Finish your review</strong> button.</p>\r\n\r\n<p><img alt=\"IMG_8\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_8.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>5) When you clidk the <strong>Finish your review </strong>button, the final review comment window pops up. You can write the final message and select one of three types of review.</p>\r\n\r\n<ul>\r\n\t<li><strong>Comment</strong>: submit general feedback without explicit approval</li>\r\n\t<li><strong>Approve</strong>: submit feedback and approve merging these changes</li>\r\n\t<li><strong>Request</strong> changes: submit feedback that must be addressed before merging</li>\r\n</ul>\r\n\r\n<p>In the message, you can drag and drop a file to give more detail explanation.&nbsp;When you completed the message and selected one of the options, click the <strong>Submit review</strong> button to finalize the review.</p>\r\n\r\n<p><img alt=\"IMG_9\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_9.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. Modify the code and push it</p>\r\n\r\n<p>In this step,&nbsp;Developer B modifys the code on Branch_C based on the feedback from Developer A.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/skyblue.svg\" />&nbsp;<strong>Action by Developer B</strong></p>\r\n\r\n<p>1) When the reviewer completed the review, the requester (Developer B in this case)&nbsp;recieves an email notification like below. Click the link to see the review comments in the Remote Repository.</p>\r\n\r\n<p><img alt=\"IMG_10\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_10.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2) You can see the review comments line by line&nbsp;on the browswer like below.</p>\r\n\r\n<p><img alt=\"IMG_11\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_11.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3) To fiix the error, use&nbsp;the local text editor and the commandline. Edit the file, make a commit and push it to the Remote Repository in the following process.</p>\r\n\r\n<p>Before making an edit, make sure that you are operating on Branch_C.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git checkout Branch_C</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Already on 'Branch_C'</code></pre>\r\n\r\n<p>Edit the file like below. Deleted C2LB and added C4LB.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/editor_icon_blue.svg\" />&nbsp;Text Editor</p>\r\n\r\n<pre>\r\n<code>&lt;!-- Branch C--&gt;\r\n&lt;h1&gt;C1LB&lt;/h1&gt;\r\n\r\n&lt;h1&gt;C3LB&lt;/h1&gt;\r\n&lt;h1&gt;C4LB&lt;/h1&gt;\r\n&lt;!-- /Branch C--&gt;</code></pre>\r\n\r\n<p>&nbsp;Commit the change and push the branch.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git commit -am \"C4LB\"\r\ngit push origin Branch_C</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>Enumerating objects: 5, done.\r\n:\r\n   884d938..56e6a45  Branch_C -&gt; Branch_C</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4) After pushing the branch, go to the Remote Repository, and ask for an approval. Write comments to inform what you have done and press the <strong>Comment</strong> button to submit the comment.</p>\r\n\r\n<p><img alt=\"IMG_12\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_12.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>5. Approve&nbsp;the edit&nbsp;and merges it with the master branch</p>\r\n\r\n<p>In this step,&nbsp;Developer A finally approves the change&nbsp;on Branch_C and merges it with the master branch.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>1) When the requester (Developer B)&nbsp;resubmitted the changes and comments, the reviewer (Developer A) recieves an email notification like below. Click the link on the message or directly go to the Remote Repository.</p>\r\n\r\n<p><img alt=\"IMG_13\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_13.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2) Go to the <strong>Files changed</strong> tab to see the fixed code.</p>\r\n\r\n<p><img alt=\"IMG_14\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_14.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3) If the new code is acceptable, approve the change. On the Conversation tab, you can find the Changes requested section. click the <strong>...</strong> button on&nbsp;the right to open the list. Select the <strong>Approve changes.</strong></p>\r\n\r\n<p><img alt=\"IMG_15\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_15.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>6. See the approval</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/skyblue.svg\" />&nbsp;<strong>Action by Developer B</strong></p>\r\n\r\n<p>1) When the reviewer (Developer A) approved the change, the requester (Developer B)&nbsp;recieves an email notification like below.</p>\r\n\r\n<p><img alt=\"IMG_16\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_16.svg\" /></p>\r\n\r\n<p>2) On the Conversation tab, the Changes requested status becomes Changes approved like below.&nbsp;</p>\r\n\r\n<p><img alt=\"IMG_17\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_17.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>7. See the approval</p>\r\n\r\n<p>To check the summary of what we have done, you can check the illustration below.</p>\r\n\r\n<p><img alt=\"IMG_18\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-18-10_RequestForReviewandMerge%E2%80%94PullRequest_IMG_18.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>At this point, Branch_C is not merged yet. To see the merge operation, go to the next page.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T07:59:34.072Z", "updated_at": "2022-03-28T07:59:34.073Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 79, "fields": {"title": "Merge Operation On GitHub", "author": 8, "images": "media/uploads/25_1Jektsq.svg", "categories": 8, "only_to_my_page": false, "unique_identifier": 204110171910, "meta_keywords": null, "meta_description": null, "content": "<p>&nbsp;How to merge branches through the command line on the local computer&nbsp;is already explained in Chapter 6: Work with Branches. On this page, we&#39;ll explain how to merge branches on GitHub through a web browser.</p>\r\n\r\n<p>The merge&nbsp;feature on GitHub&nbsp;gives similar functionality as the Git commands. There are three merge&nbsp;approaches which are the combination of the three Git commands:&nbsp;<strong>$ git merge</strong>,&nbsp;<strong>$ git rebase</strong>&nbsp;and <strong>$ git commit</strong> command.</p>\r\n\r\n<ol>\r\n\t<li><strong>Create a merge commit</strong>: $ git merge --no-ff&nbsp;</li>\r\n\t<li><strong>Squash and merge</strong>: $ git merge --squash + $ git commit</li>\r\n\t<li><strong>Rebase and merge</strong>: $ git rebase + $ git&nbsp;merge</li>\r\n</ol>\r\n\r\n<h3><strong>1. Create a merge commit</strong></h3>\r\n\r\n<p>This approach is the most commonly used approach. By this approach, the base branch captures and keeps all the commit histories from the topic branch&nbsp;like the left illustration on the main slide.&nbsp;</p>\r\n\r\n<h3><strong>2. Squash and merge</strong></h3>\r\n\r\n<p>When you want to integrate all the small commits to simplify the commit history of the project, yhou take take this option. A drawback of this option is that all the commits of the topic branch are erased from the history&nbsp;&nbsp;like the middle illustration on the main slide.</p>\r\n\r\n<h3><strong>3. Rebase&nbsp;and merge</strong></h3>\r\n\r\n<p>If you have many branches in the project and merge them into the master branch, the commit history of the project becomes very complex. This option is used to make the commit line straight&nbsp;&nbsp;like the right illustration on the main slide.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For better understanding, please go through the following practice section.</p>\r\n\r\n<p><img alt=\"Practice\" src=\"https://s3.amazonaws.com/test.bloovee.com/practice_title_blue.svg\" /></p>\r\n\r\n<p>In this practice, we&#39;ll go throught the three merge approaches on the GitHub based on the branches prepared on&nbsp;the previous pages. The target operations are illustrated below.</p>\r\n\r\n<p><img alt=\"IMG_1\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_1.svg\" /></p>\r\n\r\n<p>1. Create a merge commit: merge Branch_C into the master branch<br />\r\n2. Squash and merge: squash and merge Branch_A<br />\r\n3. Rebase and merge: rebase and merge Branch_B</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>1. Create a merge commit: merge Branch_C into the master branch</p>\r\n\r\n<p>On the previous page, we have already explained about Pull Request until a reviewr approves the changes (Developer A already approved Developer B&#39;s code).&nbsp;</p>\r\n\r\n<p>The merge operation can be done by either sides: the requester&nbsp;or the approver of the Pull Request. In this step, we&#39;ll explain the case that&nbsp;the reviewer (Developer A) conducts the merge operation.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>1)&nbsp;To execute the merge operation, go the the Pull Request page created on the previous page. Select <strong>Create a merge commit</strong> in the <strong>Merge pull request</strong> pull dowon, and click the button again.</p>\r\n\r\n<p><img alt=\"IMG_2\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_2.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2) Press the <strong>Confirm merge </strong>button to execute.</p>\r\n\r\n<p><img alt=\"IMG_3\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_3.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3) A confirmation message is displayed like below.</p>\r\n\r\n<p><img alt=\"IMG_4\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_4.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4) Check the commit history on the master branch. You can see that the Branch_C&nbsp;integrated in to the master branch with&nbsp;keeping the commit histories made on Branch_C.</p>\r\n\r\n<p><img alt=\"IMG_5\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_5.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. Squash and merge: squash and merge Branch_A</p>\r\n\r\n<p>In this step, we&#39;ll continue to execute the merge operation with the&nbsp;Developer A account. When you want to execture the merge operation by yourself, you can create a Pull Request on your own and executre the merge operation.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>1) Create a new Pull Request from the <strong>Pull requests </strong>tab.</p>\r\n\r\n<p><img alt=\"IMG_6\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_6.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2) Select Branch_A to compare, and press the <strong>Create pull request </strong>button</p>\r\n\r\n<p><img alt=\"IMG_7\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_7.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3) Add a <strong>PR comment</strong> and press the <strong>Create pull request </strong>button. As Developer A exectutes the merge operation himself, no need to select a reviewer.</p>\r\n\r\n<p><img alt=\"IMG_8\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_8.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4) Select <strong>Squash and merge</strong> under the <strong>Merge pull request </strong>pull down.</p>\r\n\r\n<p><img alt=\"IMG_9\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_9.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>5) Press the <strong>Confirm squash and merge</strong> button. The squash merge is executed.</p>\r\n\r\n<p><img alt=\"IMG_10\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_10.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>6) Check the commit history on the master branch. You can see that the Branch_A was squashed and&nbsp;merged. As the original commits are squashed, you cannot see the original commits details (A1LA, A2LA).&nbsp;</p>\r\n\r\n<p><img alt=\"IMG_11\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_11.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. Rebase and merge: rebase and merge Branch_B</p>\r\n\r\n<p>Finally, execute rebase and merge Branch_B. We continue the operation with Developer A account.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>1) Follow the same process as the previous step until the merge option selection. Select <strong>Rebase and merge </strong>in the merge option list.</p>\r\n\r\n<p><img alt=\"IMG_12\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_12.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2) Press the Confirm rebase and merge button. Rebase and merge&nbsp;are&nbsp;executed.</p>\r\n\r\n<p><img alt=\"IMG_13\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_13.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3) Check the commit history on the master branch. You can see that the Branch_B&nbsp;was rebased and&nbsp;merged (became the HEAD of the master branch).</p>\r\n\r\n<p><img alt=\"IMG_14\" src=\"https://s3.amazonaws.com/test.bloovee.com/2041-10-17-19-10_MergeOperationOnGitHub_IMG_14.svg\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. Update the local branches</p>\r\n\r\n<p>All the operations on this page were made&nbsp;on GitHub platform&nbsp;throught&nbsp;the web browser. The changes have not been syncronized in the Local Repositories. In this step, syncronize the changes made on the Remote Repository into Developer A and Developer B&#39;s Local Repositories.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/bloovee.svg\" />&nbsp;<strong>Action by Developer A</strong></p>\r\n\r\n<p>First, check the latest status of the master branch. You can see that the branch is not updated yet.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git checkout master\r\ngit log --oneline</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>de2bca2 (HEAD -&gt; master) M3LA\r\na4e2c2f M2RA\r\nee8f530 M1LA</code></pre>\r\n\r\n<p>Run the pull command and check the log with the &quot;--graph&quot; option to see the latest commit tree.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git pull origin master\r\ngit log --oneline --graph</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* 5f5c4e6 (HEAD -&gt; master, origin/master) B1LA\r\n* c850bb3 Branch a (#2)\r\n*   61ace59 Merge pull request #1 from bloovee/Branch_C\r\n|\\  \r\n| * 56e6a45 (origin/Branch_C) C4LB\r\n| * 884d938 C3LB\r\n| * 1fbe7ca C2LB\r\n| * 8c3d8a0 C1LB\r\n|/  \r\n* de2bca2 M3LA\r\n* a4e2c2f M2RA\r\n* ee8f530 M1LA</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Repeat the same process&nbsp;for Developer B.</p>\r\n\r\n<p><img alt=\"bloovee\" src=\"https://s3.amazonaws.com/test.bloovee.com/skyblue.svg\" />&nbsp;<strong>Action by Developer B</strong></p>\r\n\r\n<p>&nbsp;First, check the latest status of the master branch. You can see that the branch is not updated yet.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git checkout master\r\ngit log --oneline</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>de2bca2 (HEAD -&gt; master, origin/master, origin/HEAD) M3LA\r\na4e2c2f M2RA\r\nee8f530 M1LA</code></pre>\r\n\r\n<p>Run the pull command and check the log with the &quot;--graph&quot; option to see the latest commit tree.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/command_line_icon_blue.svg\" />&nbsp;Command Line - INPUT</p>\r\n\r\n<pre>\r\n<code>git pull origin master\r\ngit log --oneline --graph</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3.amazonaws.com/test.bloovee.com/response_icon_blue.svg\" />&nbsp;Command Line - RESPONSE</p>\r\n\r\n<pre>\r\n<code>* 5f5c4e6 (HEAD -&gt; master, origin/master, origin/HEAD) B1LA\r\n* c850bb3 Branch a (#2)\r\n*   61ace59 Merge pull request #1 from bloovee/Branch_C\r\n|\\  \r\n| * 56e6a45 (origin/Branch_C, Branch_C) C4LB\r\n| * 884d938 C3LB\r\n| * 1fbe7ca C2LB\r\n| * 8c3d8a0 C1LB\r\n|/  \r\n* de2bca2 M3LA\r\n* a4e2c2f M2RA\r\n* ee8f530 M1LA</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T08:01:08.610Z", "updated_at": "2022-03-28T08:01:08.610Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 80, "fields": {"title": "Chapter 8. Supplemental Topics", "author": 8, "images": "media/uploads/26_stduIvW.svg", "categories": 9, "only_to_my_page": false, "unique_identifier": 204110181010, "meta_keywords": null, "meta_description": null, "content": "<p>In this chapter, we&rsquo;ll provide the following supplimental topics for Git &amp; GitHub Introduction.</p>\r\n\r\n<p>TOPICS</p>\r\n\r\n<ol>\r\n\t<li>GitHub Issues Introduction</li>\r\n\t<li>Git Key Commands and GitHub Key Features</li>\r\n\t<li>Git &amp; GitHub Glossaries</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>", "created_at": "2022-03-28T08:02:21.272Z", "updated_at": "2022-03-28T08:02:21.272Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 81, "fields": {"title": "GitHub Issues Introduction", "author": 8, "images": "media/uploads/27_bizHoJt.svg", "categories": 9, "only_to_my_page": false, "unique_identifier": 204110181110, "meta_keywords": null, "meta_description": null, "content": "<p>xxxx</p>", "created_at": "2022-03-28T08:03:29.519Z", "updated_at": "2022-03-28T08:03:29.519Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 82, "fields": {"title": "Git Key Commands and GitHub Key Features", "author": 8, "images": "media/uploads/28_e1eJT5q.svg", "categories": 9, "only_to_my_page": false, "unique_identifier": 204110181210, "meta_keywords": null, "meta_description": null, "content": "<p>On this page, we summarize Git key command and GitHub key features covered in chapter 3 to chapter 7.</p>\r\n\r\n<h3><strong>Chapter 3. Git &amp; GitHub Initial Settings:</strong></h3>\r\n\r\n<ul>\r\n\t<li><strong>$ git config</strong> is used when you register (or change) key user settings in the Git system. For example, you can do the following with this command\r\n\r\n\t<ul>\r\n\t\t<li>Register your user name and email address</li>\r\n\t\t<li>Register a text editor</li>\r\n\t\t<li>Check configured settings</li>\r\n\t\t<li>Clear configured settings</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>Chapter 4. Launch Git Project:</strong></h3>\r\n\r\n<ul>\r\n\t<li><strong>$ git init</strong>&nbsp;command is when initiating a Git project by creating&nbsp;a new Local Repository in the current directory.</li>\r\n\t<li>\r\n\t<p><strong>$ git clone</strong>&nbsp;command is used to create a link with a Remote Repository and bring the project directory from the remote repository&nbsp;with commit histories to your local computer. This command is used only the first time you&nbsp;bring the project directory to your local computer. The&nbsp;<strong>$ git clone</strong>&nbsp;command establishes a connection between the Remote Repository and your local computer by registering the URL to define the location of the Remote Repository onto your computer. Once the connection is established, you can&nbsp;<strong>Pull</strong>&nbsp;or&nbsp;<strong>Fetch</strong>&nbsp;the Remote Repository.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Fork</strong>&nbsp;is a feature provided by GitHub&nbsp;used to create a replica of a Remote Repository on GitHub. After implementing Fork, the replicated repository will be separated from the original repository. You can modify codes in the replicated repository on your own without permission from the owners of the original repository (within the software license agreement, if any). Fork is not a git command. It is executed on the GitHub website. Go to the GitHub site and find the repository which you want to create a replica of. There is a Fork button on the Remote Repository page. Press the Fork button to implement Fork.</p>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>Chapter 5. Edit &amp; Commit:</strong></h3>\r\n\r\n<ul>\r\n\t<li><strong>$ git add</strong>: with this command, you can add files to the Staging Area (INDEX), where you can prepare and check files to register in your Local Repository.&nbsp;</li>\r\n\t<li><strong>$ git status</strong>: with this command, you can see the status of the Working Tree (working directory) and the Staging Area (INDEX). This status lets you see which changes have been staged, which haven&#39;t, and which files aren&#39;t being tracked by Git.&nbsp;</li>\r\n\t<li><strong>$ git commit</strong>: with this command, you can register files in your Local Repository. Once the files are registered by this&nbsp;command, you can retrieve the saved version of the set of files anytime.</li>\r\n\t<li><strong>$ git log</strong>: with this command, you can check the infomation of the commit history of the repository</li>\r\n\t<li><strong>$ git diff:</strong>&nbsp;with this command, you can check differences&nbsp;among&nbsp;the Working Tree, Staging Area (INDEX) and&nbsp;commit histories.</li>\r\n\t<li><strong>$ git restore</strong>: with this command, you can bring your working tree back to the latest commit or a specific commit. This command is useful when you want to clear your edits and go back to a cleaner version.</li>\r\n\t<li><strong>$ git rm</strong>: with this command, you can delete files or directories under the Working Tree and the Staging Area (INDEX). When you want to reflect the deleted status as a formal version, you need to create another commit.&nbsp;</li>\r\n\t<li><strong>$ git reset</strong>: with this command, you can reset the Staging Area (INDEX) or change commit histories&nbsp;with or without changing the contents of your local files.&nbsp;</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>Chapter 6. Work With Branches:</strong></h3>\r\n\r\n<ul>\r\n\t<li><strong>$ git branch</strong>: this command is a multi-use command. For example, it is used for creating a new branch, checking branch status and deleting&nbsp;an unused branch.</li>\r\n\t<li><strong>$ git checkout</strong>:<strong>&nbsp;</strong>with this command, you can switch your current branch to a selected branch.&nbsp;</li>\r\n\t<li><strong>$ git switch</strong>: with this command, you can get the same result as $ git checkout. It is a newly introduced command as a substitute of the<strong>&nbsp;</strong>$ git checkout command.</li>\r\n\t<li><strong>$ git merge:</strong>&nbsp;with this command, you can merge branches. The merge operation can be done through a Remote Repository on the GitHub website. Merge operation on GitHub will be explained in the next chapter.</li>\r\n\t<li><strong>$ git rebase</strong>: with this command, you can reapply commits on top of another base branch. This command is useful when you want to streamline the commits diverged into multiple branches. The rebase operation can also be done through a Remote Repository on the GitHub website. It is an option of the merge-feature&nbsp;of&nbsp;GitHub.</li>\r\n\t<li><strong>$ git stash:</strong>&nbsp;with this command, you can separately manage WIP (Work In Progress) codes. When you want to switch the current&nbsp;branch in the middle of editing the Working Tree, the edits can prevent from switching the current branch. In that case, this command is useful. The stashed lines of code are parked somewhere temporarily.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>Chapter 7. Remote Collaboration:</strong></h3>\r\n\r\n<ul>\r\n\t<li><strong>$ git remote:&nbsp;</strong>this command is a multi-use command relating to manage a Remote Repository. For example, with the&nbsp;<strong>$ git remote add</strong>&nbsp;command, you can establish a link&nbsp;between a Remote<br />\r\n\tRepository and a&nbsp;Local Repository. The&nbsp;<strong>git remote -v</strong>&nbsp;command shows the status of the link.</li>\r\n\t<li><strong>$ git push:&nbsp;</strong>with this command, you can upload&nbsp;project directories and files along with commit histories for a designated branch from your computer to a Remote Repository</li>\r\n\t<li><strong>$ git pull:</strong>&nbsp;with this command, you can&nbsp;download project directories and files along with commit histories for a designated branch from a Remote Repository.&nbsp;This command also&nbsp;merges the downloaded branch with an existing branch under the Local Repository.</li>\r\n\t<li><strong>$ git fetch:</strong>&nbsp;with this command, you can obtain the latest Remote Repository information and store it in your local computer. This command doesn&#39;t enforce merge branches in&nbsp;the Local Repository. If you want to update the Local Repository, you need to run the&nbsp;<strong>$ git merge</strong>&nbsp;or&nbsp;<strong>$ git checkout</strong>&nbsp;command.&nbsp;</li>\r\n\t<li><strong>Pull request:</strong>&nbsp;this feature is used to ask&nbsp;a reviewer to review your edits. It is especially used when you want to ask the reviewer to merge&nbsp;your branch (a topic branch)&nbsp;to the main branch&nbsp;(e.g., master branch).</li>\r\n\t<li><strong>Merge:</strong>&nbsp;this feature gives similar functionality as the $ git merge command and the $ git rebase command. You can execute merge or rebase operations on the GitHub website. There are three merge&nbsp;approaches. 1) Create a merge commit, 2) Squash and merge, 3) Rebase and merge.</li>\r\n</ul>", "created_at": "2022-03-28T08:04:40.622Z", "updated_at": "2022-03-28T08:04:40.622Z", "liked": []}}, {"model": "webapi.reviewmodel", "pk": 83, "fields": {"title": "Git & GitHub Glossaries", "author": 8, "images": "media/uploads/27_HemTa1z.svg", "categories": 9, "only_to_my_page": false, "unique_identifier": 204110181310, "meta_keywords": null, "meta_description": null, "content": "<p>xxxx</p>", "created_at": "2022-03-28T08:05:40.295Z", "updated_at": "2022-03-28T08:05:40.295Z", "liked": []}}]