# Generated by Django 4.0.3 on 2022-03-22 10:07

import ckeditor.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0004_alter_taggeditem_content_type_alter_taggeditem_tag'),
        ('webapi', '0009_category'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReviewModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('images', models.FileField(blank=True, upload_to='media/uploads', validators=[django.core.validators.FileExtensionValidator(['png', 'jpg', 'jpeg', 'svg'])])),
                ('only_to_my_page', models.BooleanField(default=False)),
                ('unique_identifier', models.BigIntegerField(blank=True, help_text="You don't have to do it manually, & After you save it you can also edit", null=True, unique=True)),
                ('meta_keywords', models.CharField(blank=True, help_text='Comma-delimited set of SEO keywords for meta tag', max_length=255, null=True, verbose_name='Meta keywords')),
                ('meta_description', models.CharField(blank=True, help_text='Content for meta description', max_length=255, null=True, verbose_name='Meta Description')),
                ('content', ckeditor.fields.RichTextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapi.user')),
                ('categories', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapi.category')),
                ('liked', models.ManyToManyField(blank=True, related_name='likes', to='webapi.user')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
    ]
